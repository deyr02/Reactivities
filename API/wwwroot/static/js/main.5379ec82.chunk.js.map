{"version":3,"sources":["app/models/pagination.ts","app/api/agent.tsx","app/models/activity.ts","app/models/porfile.ts","app/stores/activityStore.ts","app/stores/profileStore.ts","app/stores/userStore.ts","app/stores/store.ts","app/stores/commonStore.ts","app/stores/modalStore.ts","app/stores/commentStore.ts","app/layout/NavBar.tsx","features/activities/dashboard/ActivityFilter.tsx","features/profiles/FollowButton.tsx","features/profiles/ProfileCard.tsx","features/activities/dashboard/ActivityListItemAttendee.tsx","features/activities/dashboard/ActivityListItem.tsx","features/activities/dashboard/ActivityList.tsx","features/activities/dashboard/ActivityListItemPlaceholder.tsx","features/activities/dashboard/ActivityDashboard.tsx","app/common/form/MyTextInput.tsx","features/users/LoginForm.tsx","features/errors/ValidationErrors.tsx","features/users/RegisterForm.tsx","features/home/Home.tsx","app/layout/LoadingComponent.tsx","app/common/form/MyTextArea.tsx","app/common/form/MySelectInput.tsx","app/common/options/CategoryOptions.tsx","app/common/form/MyDateInput.tsx","features/activities/form/ActivityForm.tsx","features/activities/details/ActivityDetailedChat.tsx","features/activities/details/ActivityDetailedHeader.tsx","features/activities/details/ActivityDetailedInfo.tsx","features/activities/details/ActivityDetailedSidebar.tsx","features/activities/details/ActivityDetails.tsx","features/errors/TestErrors.tsx","features/errors/NotFound.tsx","features/errors/ServerError.tsx","app/common/modals/ModalContainer.tsx","features/profiles/ProfileEditForm.tsx","features/profiles/ProfileAbout.tsx","features/profiles/ProfileActivities.tsx","features/profiles/ProfileFollowings.tsx","app/common/imageUpload/PhotoWidgetCropper.tsx","app/common/imageUpload/PhotoWidgetDropZone.tsx","app/common/imageUpload/PhotoUploadWidget.tsx","features/profiles/ProfilePhotos.tsx","features/profiles/ProfileContent.tsx","features/profiles/ProfileHeader.tsx","features/profiles/ProfilePage.tsx","app/layout/PrivateRoute.tsx","app/layout/App.tsx","reportWebVitals.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["PaginatedResult","data","pagination","this","PagingParams","pageNumber","pageSize","axios","defaults","baseURL","process","interceptors","request","use","config","token","store","commonStore","headers","Authorization","response","a","JSON","parse","error","status","toast","method","errors","hasOwnProperty","history","push","modalStateErrors","key","flat","setServerError","Promise","reject","responseBody","requests","url","get","then","body","post","put","delete","agent","Activities","list","params","details","id","create","activity","update","attend","listActivities","username","predicate","Account","current","login","user","register","fbLogin","accessToken","Profiles","uploadPhoto","file","formData","FormData","append","setMainPhoto","deletePhoto","updateProfile","profile","updateFollowing","listFollowings","Activity","init","Object","assign","ActivityFormValues","undefined","title","date","description","category","city","venue","Profile","displayName","image","ActivityStore","activityRegistry","Map","selectedActivity","editMode","loading","loadingInitial","pagingParams","set","setPagingParams","setPredicate","value","resetPredicate","forEach","loadingActivities","axiosParams","result","setActivity","setPagination","setLoadingInitial","console","log","loadActivity","getActivity","runInAction","userStore","isGoing","attendees","some","isHost","hostUserName","host","find","x","Date","state","createActivity","attendee","newActivity","updateActivity","updatedActivity","deleteActivity","updateAttendance","filter","attedee","cancelActivityToggle","isCancelled","clearSelectedActivity","updateAttendeeFollowing","following","followersCount","makeAutoObservable","reaction","keys","clear","URLSearchParams","toString","toISOString","Array","from","values","sort","b","getTime","entries","activitiesByDate","reduce","activities","format","ProfileStore","loadingProfile","uploading","followings","activeTab","loadingFollowings","userActivities","setActiveTab","loadProfile","photo","photos","isMain","setImage","p","UpdateProfile","setDisplayName","activityStore","followingCount","loadFollowings","loadUserActivities","UserStore","fbAccessToken","fbLoading","creds","setToken","modalStore","closeModal","logout","window","localStorage","removeItem","getUser","name","getFacebookLoginStatus","FB","getLoginStatus","authResponse","facebookLogin","apiLogin","catch","scope","getItem","appLoaded","setAppLoaded","setItem","modal","open","openModal","content","profileStore","commentStore","comments","hubConnection","createHubConnection","activityId","HubConnectionBuilder","withUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","LogLevel","Information","build","start","on","comment","createdAt","unshift","stopHubConnection","stop","clearComments","addComment","invoke","StoreContext","createContext","useStore","useContext","observer","Menu","inverted","fixed","Container","Item","as","NavLink","to","header","src","alt","style","marginRight","Button","positive","position","Image","avatar","spaced","Dropdown","pointing","text","Link","icon","onClick","vertical","size","width","marginTop","Header","attached","color","active","has","onChange","Reveal","animated","Content","visible","fluid","hidden","basic","e","preventDefault","handleFollow","Card","Description","str","length","substring","truncate","bio","Icon","borderColor","borderWidth","List","horizontal","map","Popup","hoverable","trigger","circular","bordered","ActivityListItem","Segment","Group","Label","texAligh","marginBottom","clearing","floated","groupedActivities","group","sub","ActivityListItemPlaceholder","Placeholder","minHeight","Line","Paragraph","secondary","disabled","useState","loadingNext","setLoadingNext","useEffect","Grid","Column","pageStart","loadMore","currentPage","hasMore","totalPages","initialLoad","Loader","MyTextInput","props","useField","field","meta","Form","Field","touched","label","initialValues","email","password","onSubmit","setErrors","handleSubmit","isSubmitting","className","autoComplete","textAlign","placeholder","type","render","ValidationErrors","Message","err","i","validationSchema","Yup","required","isValid","dirty","HomePage","isLoggedIn","LoginForm","Divider","LoadingComponent","Dimmer","MyTextArea","TextArea","MySelectInput","helpers","Select","clearable","options","d","setValue","onBlur","setTouched","categoryOptions","MyDateInput","selected","useHistory","useParams","nullable","enableReinitialize","uuid","handleFormSubmit","rows","placeholderText","showTimeSelect","timeCaption","dateFormat","border","resetForm","onKeyPress","shiftKey","Comment","Avatar","Author","Metadata","formatDistanceToNow","Text","whiteSpace","activityImageStyle","activityImageTextStyle","bottom","left","height","padding","zIndex","top","ribbon","verticalAlign","relaxed","divided","Extra","TestErrors","widths","baseUrl","primary","NotFound","Inline","message","Modal","onClose","setEditMode","isCurrentUser","Tab","Pane","panes","menuItem","pane","menu","onTabChange","activeIndex","handleTabChange","itemsPerRow","objectFit","Meta","PhotoWidgetCropper","imagePreview","setCropper","initialAspectRatio","aspectRatio","preview","guides","viewMode","autoCropArea","background","onInitialized","cropper","PhotoWidgetDropZone","setFiles","dzStyles","borderRadious","paddingTop","onDrop","useCallback","acceptedFiles","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoUploadWidget","files","revokeObjectURL","overflow","getCroppedCanvas","toBlob","blob","addPhotoMode","setAddPhotoMode","target","setTarget","currentTarget","handleSetMainPhoto","handleDeletePhoto","menuPosition","StatisticGroup","Statistic","PrivateRoute","Component","component","rest","location","useLocation","finally","hideProgressBar","exact","path","ActivityDashboard","ActivityDetails","ActivityForm","ProfilePage","ServerError","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollToTop","pathname","scrollTo","createBrowserHistory","ReactDOM","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.5379ec82.chunk.js","sourcesContent":["export interface Pagination {\r\n    currentPage: number;\r\n    itemsPerPage: number;\r\n    totalItems: number;\r\n    totalPages: number;\r\n}\r\n\r\nexport class PaginatedResult<T> {\r\n    data: T;\r\n    pagination: Pagination;\r\n\r\n    constructor(data: T, pagination: Pagination) {\r\n        this.data = data;\r\n        this.pagination = pagination;\r\n    }\r\n}\r\n\r\nexport class PagingParams {\r\n    pageNumber;\r\n    pageSize;\r\n\r\n    constructor(pageNumber = 1, pageSize = 5) {\r\n        this.pageNumber = pageNumber;\r\n        this.pageSize = pageSize;\r\n    }\r\n}","import axios, { AxiosError, AxiosResponse } from 'axios';\r\nimport { toast } from 'react-toastify';\r\nimport { history } from '../..';\r\nimport {Activity, ActivityFormValues} from '../models/activity';\r\nimport { PaginatedResult } from '../models/pagination';\r\nimport { Photo, Profile, UserActivity } from '../models/porfile';\r\nimport { User, UserFormValues } from '../models/user';\r\nimport { store } from '../stores/store';\r\n\r\nconst sleep = (delay:number) =>{\r\n    return new Promise ((resolve)=>{\r\n        setTimeout(resolve, delay);\r\n    })\r\n}\r\n\r\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\r\naxios.interceptors.request.use(config => {\r\n    const token = store.commonStore.token;\r\n    if(token) config.headers.Authorization = `Bearer ${token}`\r\n    return config;\r\n})\r\naxios.interceptors.response.use(async response =>{\r\n    if(process.env.NODE_ENV === 'development') await sleep(1000);\r\n    \r\n    const pagination = response.headers['pagination'];\r\n    if (pagination) {\r\n        response.data = new PaginatedResult(response.data, JSON.parse(pagination));\r\n        return response as AxiosResponse<PaginatedResult<any>>\r\n    }\r\n    \r\n    return response;\r\n   \r\n}, (error:AxiosError) =>{\r\n    const{data, status, config} = error.response!;\r\n    switch (status){\r\n        case 400:\r\n            if(typeof data === 'string'){\r\n                toast.error(data);\r\n            }\r\n           // toast.error('bad request');\r\n           if(config.method === 'get' && data.errors.hasOwnProperty('id')){\r\n               history.push('/not-found');\r\n           }\r\n            if(data.errors){\r\n                const modalStateErrors = [];\r\n                for(const key in data.errors){\r\n                    if(data.errors[key]){\r\n                        modalStateErrors.push(data.errors[key]);\r\n                    }\r\n                }\r\n                throw modalStateErrors.flat();\r\n            }\r\n            else{\r\n                toast.error(data);\r\n            }\r\n\r\n            break;\r\n        case 401:\r\n            toast.error(\"unauthorised\");\r\n            break;\r\n        case 404:\r\n            history.push(\"/not-found\");\r\n            break;\r\n        case 500:\r\n            //toast.error('server error');\r\n            store.commonStore.setServerError(data);\r\n            history.push('/server-error');\r\n            break;\r\n    }\r\n\r\n    return Promise.reject(error);\r\n})\r\n\r\nconst responseBody = <T,> (response: AxiosResponse<T>) => response.data;\r\nconst requests = {\r\n    get: <T,>(url:string)=> axios.get<T>(url).then(responseBody),\r\n    post:<T,> (url:string, body:{})=> axios.post<T>(url, body).then(responseBody),\r\n    put: <T,>(url:string, body:{})=> axios.put<T>(url, body).then(responseBody),\r\n    del: <T,> (url:string)=> axios.delete<T>(url).then(responseBody),\r\n}\r\nconst Activities = {\r\n    list: (params:URLSearchParams)=> axios.get<PaginatedResult<Activity[]>>('/activities',{params})\r\n        .then(responseBody),\r\n    details: ( id: string) => requests.get<Activity>(`/activities/${id}`),\r\n    create: (activity:ActivityFormValues)=> requests.post<void>('/activities', activity),\r\n    update: (activity:ActivityFormValues)=> requests.put<void>(`/activities/${activity.id}`, activity),\r\n    delete: (id:string)=> requests.del<void>(`/activities/${id}`),\r\n    attend: (id: string) => requests.post<void>(`/activities/${id}/attend`, {}),\r\n    listActivities: (username: string, predicate: string) =>\r\n    requests.get<UserActivity[]>(`/profiles/${username}/activities?predicate=${predicate}`)\r\n}\r\n\r\nconst Account = {\r\n    current: ()=> requests.get<User>('/account'),\r\n    login:(user: UserFormValues)=> requests.post<User>('/account/login', user),\r\n    register: (user: UserFormValues)=> requests.post<User>('/account/register', user),\r\n    fbLogin: (accessToken:string)=> requests.post<User>(`/account/fbLogin?accessToken=${accessToken}`, {})\r\n}\r\n\r\nconst Profiles = {\r\n    get:(username:string) => requests.get<Profile>(`/profiles/${username}`),\r\n    uploadPhoto: (file: Blob)=>{\r\n        let formData = new FormData();\r\n        formData.append('File', file);\r\n        return axios.post<Photo>('photos', formData, {\r\n            headers: {'Content-type':'multipart/form-data'}\r\n        })\r\n    },\r\n    setMainPhoto: (id:string)=> requests.post(`/photos/${id}/setMain`, {}),\r\n    deletePhoto: (id:string)=>requests.del(`/photos/${id}`),\r\n    updateProfile:(profile:Partial<Profile>)=> requests.put('/profiles', profile),\r\n    updateFollowing:(username: string)=>requests.post(`/follow/${username}`, {}),\r\n    listFollowings:(username:string, predicate:string)=> \r\n    requests.get<Profile[]>(`/follow/${username}?predicate=${predicate}`),\r\n    listActivities: (username: string, predicate: string) =>\r\n    requests.get<UserActivity[]>(`/profiles/${username}/activities?predicate=${predicate}`)\r\n\r\n}\r\n\r\n\r\n\r\n\r\nconst agent = {\r\n    Activities,\r\n    Account,\r\n    Profiles\r\n}\r\n\r\nexport default agent;","\r\nimport { Profile } from \"./porfile\";\r\n\r\n  export interface Activity {\r\n        id: string;\r\n        title: string;\r\n        date: Date| null;\r\n        description: string;\r\n        category: string;\r\n        city: string;\r\n        venue: string;\r\n        hostUserName: string;\r\n        isCancelled: boolean;\r\n        isGoing:boolean;\r\n        isHost:boolean;\r\n        host?: Profile;\r\n        attendees:Profile[];\r\n    }\r\n\r\n\r\n    export class Activity implements Activity{\r\n      constructor(init?: ActivityFormValues){\r\n        Object.assign(this, init);\r\n      }\r\n    }\r\n\r\n    export class ActivityFormValues{\r\n      id?:string = undefined;\r\n      title: string = '';\r\n      date: Date| null = null;\r\n      description: string = '';\r\n      category: string = '';\r\n      city: string = '';\r\n      venue: string = '';\r\n\r\n      constructor(activity?: ActivityFormValues){\r\n        if(activity){\r\n          this.id = activity.id;\r\n          this.title = activity.title;\r\n          this.date = activity.date;\r\n          this.description = activity.description;\r\n          this.category = activity.category;\r\n          this.city = activity.city;\r\n          this.venue = activity.venue;\r\n        }\r\n      }\r\n    }","import { User } from \"./user\";\r\n\r\nexport interface Profile{\r\n    username: string;\r\n    displayName: string;\r\n    image?: string;\r\n    bio?:string;\r\n    followersCount:number;\r\n    followingCount:number;\r\n    following:boolean;\r\n    photos?: Photo[];\r\n}\r\n\r\n\r\nexport class Profile implements Profile{\r\n    constructor(user:User){\r\n        this.username = user.username;\r\n        this.displayName = user.displayName;\r\n        this.image = user.image;\r\n    }\r\n}\r\n\r\n\r\nexport interface Photo {\r\n    id: string;\r\n    url:string;\r\n    isMain:boolean;\r\n}\r\n\r\nexport interface UserActivity {\r\n    id: string;\r\n    title: string;\r\n    category: string;\r\n    date: Date;\r\n}","import {  makeAutoObservable, reaction, runInAction} from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { Activity, ActivityFormValues } from \"../models/activity\";\r\n\r\nimport {format} from 'date-fns';\r\nimport { store } from \"./store\";\r\nimport { Profile } from \"../models/porfile\";\r\nimport { Pagination, PagingParams } from \"../models/pagination\";\r\n\r\nexport default class ActivityStore{\r\n    activityRegistry= new Map<string, Activity>();\r\n    selectedActivity: Activity | undefined = undefined;\r\n    editMode = false;\r\n    loading = false;\r\n    loadingInitial = false;\r\n    pagination:Pagination|null = null;\r\n    pagingParams = new PagingParams();\r\n    predicate = new Map().set('all', true);\r\n\r\n    constructor(){\r\n        makeAutoObservable(this)\r\n        reaction(\r\n            () => this.predicate.keys(),\r\n            () => {\r\n                this.pagingParams = new PagingParams();\r\n                this.activityRegistry.clear();\r\n                this.loadingActivities();\r\n            }\r\n        )\r\n    }\r\n\r\n    setPagingParams = (pagingParams : PagingParams)=>{\r\n        this.pagingParams = pagingParams;\r\n    }\r\n\r\n    setPredicate = (predicate: string, value: string | Date) => {\r\n        const resetPredicate = () => {\r\n            this.predicate.forEach((value, key) => {\r\n                if (key !== 'startDate') this.predicate.delete(key);\r\n            })\r\n        }\r\n        switch (predicate) {\r\n            case 'all':\r\n                resetPredicate();\r\n                this.predicate.set('all', true);\r\n                break;\r\n            case 'isGoing':\r\n                resetPredicate();\r\n                this.predicate.set('isGoing', true);\r\n                break;\r\n            case 'isHost':\r\n                resetPredicate();\r\n                this.predicate.set('isHost', true);\r\n                break;\r\n            case 'startDate':\r\n                this.predicate.delete('startDate');\r\n                this.predicate.set('startDate', value);\r\n        }\r\n    } \r\n\r\n    get axiosParams(){\r\n        const params = new URLSearchParams();\r\n        params.append(\"pageNumber\", this.pagingParams.pageNumber.toString());\r\n        params.append('pageSize', this.pagingParams.pageSize.toString());\r\n        this.predicate.forEach((value, key)=>{\r\n            if(key === 'startDate'){\r\n                params.append(key, (value as Date).toISOString())\r\n            }\r\n            else{\r\n                params.append(key, value);\r\n            }\r\n        })\r\n        return params;\r\n    }\r\n\r\n\r\n    get activitiesByDate(){\r\n        return Array.from(this.activityRegistry.values()).sort((a,b)=> a.date!.getTime() - b.date!.getTime());\r\n    }\r\n\r\n    get groupedActivities(){\r\n        return Object.entries(\r\n            this.activitiesByDate.reduce((activities, activity) =>{\r\n                const date = format(activity.date!, 'dd MM yyyy');\r\n                activities[date] = activities[date] ? [...activities[date], activity] : [activity];\r\n                return activities;\r\n            },{} as {[key:string]: Activity[]})\r\n        )\r\n    }\r\n    loadingActivities = async() => {\r\n        this.loadingInitial = true;\r\n        try{\r\n            const result = await agent.Activities.list(this.axiosParams);\r\n            result.data.forEach(activity =>{\r\n                this.setActivity(activity);\r\n            });\r\n            this.setPagination(result.pagination);\r\n            this.setLoadingInitial(false); \r\n           \r\n        }catch(error){\r\n            console.log(error);\r\n            this.setLoadingInitial(false);            \r\n\r\n        }\r\n    }\r\n    setPagination = (pagination:Pagination)=>{\r\n        this.pagination = pagination;\r\n    }\r\n\r\n    loadActivity = async(id:string)=>{\r\n        let activity = this.getActivity(id);\r\n        if(activity){\r\n            this.selectedActivity = activity;\r\n            return activity;\r\n        }\r\n        else{\r\n            this.loadingInitial = true;\r\n            try{\r\n                activity = await agent.Activities.details(id);\r\n                this.setActivity(activity);\r\n                runInAction(()=>{\r\n                     this.selectedActivity = activity;\r\n                });\r\n                this.setLoadingInitial(false);\r\n                return activity;\r\n            }\r\n            catch(error){\r\n                console.log(error);\r\n                this.setLoadingInitial(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    private getActivity = (id:string)=>{\r\n        return this.activityRegistry.get(id);\r\n    }\r\n\r\n    private setActivity = (activity: Activity)=>{\r\n        const user = store.userStore.user;\r\n\r\n        if(user){\r\n            activity.isGoing = activity.attendees?.some(a => a.username === user.username);\r\n            activity.isHost = activity.hostUserName === user.username;\r\n            activity.host = activity.attendees?.find(x=> x.username === activity.hostUserName);\r\n\r\n        }\r\n\r\n\r\n         activity.date = new Date(activity.date!);\r\n        this.activityRegistry.set(activity.id, activity);\r\n    }\r\n\r\n\r\n    setLoadingInitial = (state: boolean)=>{\r\n        this.loadingInitial = state;\r\n    }\r\n\r\n   \r\n\r\n\r\n    createActivity = async (activity:ActivityFormValues)=>{\r\n        const user = store.userStore.user;\r\n        const attendee = new Profile(user!);\r\n        try{\r\n            await agent.Activities.create(activity);\r\n            const newActivity = new Activity(activity);\r\n            newActivity.hostUserName = user!.username;\r\n            newActivity.attendees =[attendee];\r\n            this.setActivity(newActivity);\r\n            runInAction(()=>{\r\n                this.selectedActivity = newActivity;\r\n\r\n            })\r\n        }catch(error){\r\n            console.log(error);\r\n          \r\n        }\r\n        \r\n    }\r\n\r\n    updateActivity= async (activity:ActivityFormValues)=>{\r\n        try{\r\n            await agent.Activities.update(activity);\r\n            runInAction(()=>{\r\n                if(activity.id){\r\n                    let updatedActivity = {...this.getActivity(activity.id), ...activity}\r\n                    this.activityRegistry.set(activity.id, updatedActivity as Activity);\r\n                    this.selectedActivity = updatedActivity as Activity;\r\n                }\r\n               \r\n               \r\n            })\r\n        }\r\n        catch(error){\r\n            console.log(error);\r\n            runInAction(()=>{\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n    deleteActivity = async (id:string)=>{\r\n        this.loading = true;\r\n        try{\r\n            await agent.Activities.delete(id);\r\n            runInAction(()=>{\r\n                this.activityRegistry.delete(id);\r\n                this.loading = false;\r\n\r\n\r\n            })\r\n\r\n        }catch(error){\r\n            console.log(error);\r\n            runInAction(()=>{\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    updateAttendance = async () =>{\r\n        const user = store.userStore.user;\r\n        this.loading = true;\r\n\r\n        try{\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(()=>{\r\n                if(this.selectedActivity?.isGoing){\r\n                    this.selectedActivity.attendees = this.selectedActivity.attendees?.filter(a => a.username !== user?.username);\r\n                    this.selectedActivity.isGoing = false;\r\n                }\r\n                else{\r\n                    const attedee = new Profile(user!);\r\n                    this.selectedActivity?.attendees?.push(attedee);\r\n                    this.selectedActivity!.isGoing = true;\r\n                }\r\n\r\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!)\r\n            })\r\n        }\r\n        catch (error){\r\n            console.log(error)\r\n        }\r\n        finally{\r\n            runInAction(()=> this.loading = false);\r\n        }\r\n    }\r\n\r\n    cancelActivityToggle = async ()=> {\r\n        this.loading = true;\r\n\r\n        try{\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(()=>{\r\n                this.selectedActivity!.isCancelled = !this.selectedActivity!.isCancelled;\r\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!)\r\n            })\r\n\r\n        }\r\n        catch(error){\r\n            console.log(error);\r\n        }\r\n        finally{\r\n            runInAction(()=> this.loading = false);\r\n        }\r\n    }\r\n\r\n    clearSelectedActivity = () => {\r\n        this.selectedActivity = undefined;\r\n    }\r\n\r\n    updateAttendeeFollowing = (username: string)=>{\r\n        this.activityRegistry.forEach(activity =>{\r\n            activity.attendees.forEach(attendee =>{\r\n                if(attendee.username === username){\r\n                    attendee.following ? attendee.followersCount-- : attendee.followersCount++;\r\n                    attendee.following = !attendee.following;\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n}","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { Photo, Profile, UserActivity } from \"../models/porfile\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class ProfileStore{\r\n    profile: Profile | null = null;\r\n    loadingProfile = false;\r\n    uploading = false;\r\n    loading = false;\r\n    followings: Profile[] = [];\r\n    activeTab = 0;\r\n\r\n    loadingFollowings: boolean = false;\r\n    userActivities: UserActivity[] = [];\r\n    loadingActivities = false;\r\n\r\n    constructor(){\r\n        makeAutoObservable(this);\r\n        reaction (\r\n            ()=> this.activeTab,\r\n            activeTab => {\r\n                if(activeTab ===3 || activeTab === 4 ){\r\n                    const predicate =  activeTab ===3? \"followers\": \"followings\";\r\n                    this.loadFollowings(predicate);\r\n                }\r\n                else{\r\n                    this.followings = [];\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    setActiveTab = (activeTab: any)=>{\r\n        this.activeTab = activeTab;\r\n    }\r\n\r\n\r\n    get isCurrentUser(){\r\n        if(store.userStore.user && this.profile){\r\n            return store.userStore.user.username === this.profile.username;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    loadProfile = async(username: string)=>{\r\n        this.loadingProfile = true;\r\n        try{\r\n            const profile = await agent.Profiles.get(username);\r\n            runInAction(()=>{\r\n                this.profile = profile;\r\n                this.loadingProfile = false;\r\n            })\r\n        }\r\n        catch(error){\r\n            console.log(error);\r\n            runInAction(()=> this.loadingProfile= false);   \r\n        }\r\n    }\r\n\r\n    uploadPhoto = async (file:Blob)=>{\r\n        this.uploading = true;\r\n        try{\r\n            const response = await agent.Profiles.uploadPhoto(file);\r\n            const photo = response.data;\r\n            runInAction(()=>{\r\n                if(this.profile){\r\n                    this.profile.photos?.push(photo);\r\n                    if(photo.isMain && store.userStore.user){\r\n                        store.userStore.setImage(photo.url);\r\n                        this.profile.image = photo.url;\r\n                    }\r\n                }\r\n                this.uploading = false;\r\n            })\r\n        }\r\n        catch(error){\r\n            console.log(error);\r\n            runInAction(()=>this.uploading = false);\r\n        }\r\n    }\r\n\r\n    setMainPhoto = async (photo:Photo) => {\r\n        this.loading = true;\r\n        try{\r\n            await agent.Profiles.setMainPhoto(photo.id);\r\n            store.userStore.setImage(photo.url);\r\n            runInAction(()=>{\r\n                if(this.profile && this.profile.photos){\r\n                    this.profile.photos.find(p=> p.isMain)!.isMain = false;\r\n                    this.profile.photos.find(p=> p.id===photo.id)!.isMain = true;\r\n                    this.profile.image = photo.url;\r\n                    this.loading = false;\r\n                }\r\n            })\r\n\r\n        }\r\n        catch(error){\r\n            console.log(error);\r\n            runInAction(()=> this.loading = false)\r\n        }\r\n    }\r\n\r\n    deletePhoto = async(photo: Photo)=>{\r\n        this.loading = true;\r\n        try{\r\n            await agent.Profiles.deletePhoto(photo.id);\r\n            runInAction(()=>{\r\n                if(this.profile){\r\n                    this.profile.photos = this.profile.photos?.filter(p=> p.id !== photo.id);\r\n                    this.loading = false;\r\n                }\r\n            })\r\n\r\n        }\r\n        catch(error){\r\n            console.log(error);\r\n            runInAction(()=> this.loading= false)\r\n        }\r\n    }\r\n\r\n    UpdateProfile = async (profile: Partial<Profile>) => {\r\n        this.loading = true;\r\n        try{\r\n            await agent.Profiles.updateProfile(profile);\r\n            runInAction(()=>{\r\n                if(profile.displayName && profile.displayName !== store.userStore.user?.displayName){\r\n                    store.userStore.setDisplayName(profile.displayName);\r\n                }\r\n                this.profile = {...this.profile, ...profile as Profile};\r\n                this.loading = false;\r\n            })\r\n\r\n        }\r\n        catch(error){\r\n            console.log(error);\r\n            runInAction(()=> this.loading = false);\r\n        }\r\n    }\r\n\r\n\r\n    updateFollowing = async (username:string, following:boolean)=>{\r\n        this.loading = true;\r\n        try{\r\n            await agent.Profiles.updateFollowing(username);\r\n            store.activityStore.updateAttendeeFollowing(username);\r\n            runInAction(()=>{\r\n                if(this.profile && this.profile.username !== store.userStore.user?.username && this.profile.username === username){\r\n                    following? this.profile.followersCount ++: this.profile.followersCount --;\r\n                    this.profile.following = !this.profile.following;\r\n                }\r\n                if(this.profile && this.profile.username === store.userStore.user?.username)\r\n                {\r\n                    following? this.profile.followingCount ++: this.profile.followingCount --;\r\n\r\n                }\r\n\r\n                this.followings.forEach(profile =>{\r\n                    if(profile.username === username){\r\n                        profile.following?profile.followersCount--: profile.followersCount++;\r\n                        profile.following = !profile.following;\r\n                    }\r\n                })\r\n                this.loading = false;\r\n            })\r\n\r\n        }\r\n        catch(error){\r\n            console.log(error);\r\n            runInAction(()=> this.loading = false);\r\n        }\r\n    }\r\n\r\n     loadFollowings = async (predicate: string) => {\r\n        this.loadingFollowings = true;\r\n        try {\r\n            const followings = await agent.Profiles.listFollowings(this.profile!.username, predicate);\r\n            runInAction(() => {\r\n                this.followings = followings;\r\n                this.loadingFollowings = false;\r\n            })\r\n        } catch (error) {\r\n            runInAction(() => this.loadingFollowings = false);\r\n        }\r\n    }\r\n\r\n    loadUserActivities = async (username: string, predicate?: string) => {\r\n        this.loadingActivities = true;\r\n        try {\r\n            const activities = await agent.Profiles.listActivities(username, predicate!);\r\n            runInAction(() => {\r\n                this.userActivities = activities;\r\n                this.loadingActivities = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loadingActivities = false;\r\n            })\r\n        }\r\n    }\r\n}","import { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { history } from \"../..\";\r\nimport agent from \"../api/agent\";\r\nimport { User, UserFormValues } from \"../models/user\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class UserStore{\r\n    user: User| null = null;\r\n    fbAccessToken: string|null = null;\r\n    fbLoading = false;\r\n\r\n    constructor(){\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    get isLoggedIn(){\r\n        return !!this.user;\r\n    }\r\n\r\n    login  = async(creds: UserFormValues)=>{\r\n        try{\r\n            const user = await agent.Account.login(creds);\r\n            store.commonStore.setToken(user.token);\r\n            runInAction(()=>this.user = user);\r\n            history.push('/activities');\r\n            store.modalStore.closeModal();\r\n        }\r\n        catch (error){\r\n            throw error;\r\n        }\r\n\r\n\r\n    }\r\n\r\n    logout = () =>{\r\n        store.commonStore.setToken(null);\r\n        window.localStorage.removeItem('jwt');\r\n        this.user = null;\r\n        history.push('/');\r\n\r\n    }\r\n\r\n    getUser = async () =>{\r\n        try{\r\n            const user = await agent.Account.current();\r\n            runInAction(()=>this.user = user);\r\n        }\r\n        catch(error){\r\n            console.log(error);\r\n        }\r\n        \r\n    }\r\n\r\n    register = async (creds: UserFormValues)=>{\r\n        try{\r\n            const user = await agent.Account.register(creds);\r\n            store.commonStore.setToken(user.token);\r\n            runInAction(()=>this.user = user);\r\n            history.push('/activities');\r\n            store.modalStore.closeModal();\r\n        }\r\n        catch (error){\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    setImage = (image: string)=>{\r\n        if(this.user) this.user.image = image;\r\n    }\r\n\r\n    setDisplayName = (name:string)=>{\r\n        if(this.user) this.user.displayName = name;\r\n    }\r\n\r\n        getFacebookLoginStatus = async () => {\r\n        window.FB.getLoginStatus(response => {\r\n            if (response.status === 'connected') {\r\n                this.fbAccessToken = response.authResponse.accessToken;\r\n            }\r\n        })\r\n    }\r\n\r\n    facebookLogin = () => {\r\n        this.fbLoading = true;\r\n        const apiLogin = (accessToken: string) => {\r\n            agent.Account.fbLogin(accessToken).then(user => {\r\n                store.commonStore.setToken(user.token);\r\n                runInAction(() => {\r\n                    this.user = user;\r\n                    this.fbLoading = false;\r\n                })\r\n                history.push('/activities');\r\n            }).catch(error => {\r\n                console.log(error);\r\n                runInAction(() => this.fbLoading = false);\r\n            })\r\n        }\r\n        if (this.fbAccessToken) {\r\n            apiLogin(this.fbAccessToken);\r\n        } else {\r\n            window.FB.login(response => {\r\n                apiLogin(response.authResponse.accessToken);\r\n            }, {scope: 'public_profile,email'})\r\n        }\r\n    }\r\n    \r\n}","import { createContext, useContext } from \"react\";\r\nimport ActivityStore from \"./activityStore\";\r\nimport CommentStore from \"./commentStore\";\r\nimport CommonStore from \"./commonStore\";\r\nimport ModalStore from \"./modalStore\";\r\nimport ProfileStore from \"./profileStore\";\r\nimport UserStore from \"./userStore\";\r\n\r\ninterface Store{\r\n    activityStore: ActivityStore;\r\n    commonStore: CommonStore;\r\n    userStore: UserStore;\r\n    modalStore: ModalStore;\r\n    profileStore: ProfileStore;\r\n    commentStore: CommentStore;\r\n}\r\n\r\nexport const store: Store = {\r\n    activityStore : new ActivityStore(),\r\n    commonStore: new CommonStore(),\r\n    userStore: new UserStore(),\r\n    modalStore: new ModalStore(),\r\n    profileStore: new ProfileStore(),\r\n    commentStore:new CommentStore(),\r\n}\r\n\r\nexport const StoreContext = createContext(store);\r\n\r\nexport function useStore(){\r\n    return useContext(StoreContext);\r\n}","import { makeAutoObservable, reaction } from \"mobx\";\r\nimport { ServerError } from \"../models/serverError\";\r\n\r\nexport default class CommonStore{\r\n    error: ServerError|null = null;\r\n    token:string|null = window.localStorage.getItem('jwt');\r\n    appLoaded = false;\r\n\r\n    constructor(){\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            ()=>this.token,\r\n            token =>{\r\n                if(token){\r\n                    window.localStorage.setItem('jwt', token)\r\n                }else{\r\n                    window.localStorage.removeItem('jwt')\r\n                }\r\n            }\r\n        )\r\n\r\n\r\n    }\r\n    setServerError = (error:ServerError)=> {\r\n        this.error = error;\r\n    }\r\n\r\n    setToken = (token:string|null)=>{\r\n        this.token = token;\r\n    }\r\n    setAppLoaded = () => {\r\n        this.appLoaded = true;\r\n    }\r\n\r\n}","import { makeAutoObservable } from \"mobx\"\r\n\r\ninterface Modal{\r\n    open: boolean,\r\n    body: JSX.Element | null\r\n}\r\n\r\n\r\nexport default class ModalStore{\r\n    modal:Modal = {\r\n        open: false,\r\n        body: null\r\n    }\r\n\r\n\r\n    constructor(){\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    openModal = (content:JSX.Element)=> {\r\n        this.modal.open = true;\r\n        this.modal.body = content;\r\n    }\r\n\r\n    closeModal = ()=>{\r\n        this.modal.open = false;\r\n        this.modal.body = null;\r\n    }\r\n}","import { HubConnection, HubConnectionBuilder, LogLevel } from \"@microsoft/signalr\";\r\nimport { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { ChatComment } from \"../models/comment\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class CommentStore{\r\n    comments:ChatComment[] = [];\r\n    hubConnection: HubConnection|null = null;\r\n\r\n    constructor(){\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n\r\n    createHubConnection = (activityId: string) => {\r\n        if (store.activityStore.selectedActivity) {\r\n            this.hubConnection = new HubConnectionBuilder()\r\n                .withUrl( process.env.REACT_APP_CHAT_URL + '?activityId=' + activityId, {\r\n                    accessTokenFactory: () => store.userStore.user?.token!\r\n                })\r\n                .withAutomaticReconnect()\r\n                .configureLogging(LogLevel.Information)\r\n                .build();\r\n\r\n            this.hubConnection?.start().catch(error => console.log('Error establishing the connection: ', error));\r\n\r\n            this.hubConnection?.on('LoadComments', (comments: ChatComment[]) => {\r\n                runInAction(()=>{   \r\n                    comments.forEach(comment =>{\r\n                        comment.createdAt = new Date(comment.createdAt+ 'Z');\r\n                    })\r\n                    this.comments = comments;\r\n                }); \r\n            })\r\n\r\n            this.hubConnection?.on('ReceivedComment', (comment: ChatComment) => {\r\n                runInAction(()=>{\r\n                    comment.createdAt = new Date(comment.createdAt);\r\n                    this.comments.unshift(comment)\r\n                })\r\n            })\r\n        }\r\n    }\r\n\r\n    stopHubConnection = () => {\r\n        this.hubConnection?.stop().catch(error => console.log('Error stopping connection: ', error));\r\n    }\r\n\r\n    clearComments = () => {\r\n        this.comments = [];\r\n        this.stopHubConnection();\r\n    }\r\n\r\n    addComment = async (values: any) => {\r\n        values.activityId = store.activityStore.selectedActivity?.id;\r\n        try {\r\n            await this.hubConnection?.invoke('SendComment', values);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n}","import { observer } from 'mobx-react-lite';\r\nimport  React from 'react';\r\nimport { Link, NavLink } from 'react-router-dom';\r\nimport { Button, Container, Dropdown, Image, Menu } from 'semantic-ui-react';\r\nimport { useStore } from '../stores/store';\r\n\r\n\r\nexport default observer( function NavBar(){\r\n    const{userStore: {user, logout}} = useStore();\r\n    return(\r\n        <Menu inverted fixed='top'>\r\n            <Container>\r\n                <Menu.Item as={NavLink} to='/' header>\r\n                    <img src = \"/assets/logo.png\" alt = \"logo\" style={{marginRight:'10px'}}/>\r\n                    Reactivities\r\n                </Menu.Item>\r\n                <Menu.Item as={NavLink} to='/activities' name=\"Activities\"/>\r\n                <Menu.Item as={NavLink} to='/errors' name=\"Errors\"/>\r\n                <Menu.Item>\r\n                    <Button as={NavLink} to='/createActivity' positive content=\"Create Activity\"/>\r\n                </Menu.Item>\r\n\r\n                <Menu.Item position = 'right'>\r\n                    <Image src= {user?.image || '/assets/user.png'} avatar spaced= 'right' />\r\n                    <Dropdown pointing ='top left' text= {user?.displayName}>\r\n                        <Dropdown.Menu>\r\n                            <Dropdown.Item as = {Link} to={`/profile/${user?.username}`} text='My Profile' icon = 'user'/>\r\n                            <Dropdown.Item onClick={logout} text=\"Log out\" icon=\"power\"/>\r\n                        </Dropdown.Menu>\r\n                        \r\n                    </Dropdown>\r\n                </Menu.Item>\r\n            </Container>\r\n        </Menu>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport Calendar from 'react-calendar';\r\nimport { Header, Menu } from 'semantic-ui-react';\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\nexport default observer ( function ActivityFilter(){\r\n    const {activityStore:{predicate, setPredicate}} = useStore();\r\n    return(\r\n        <>\r\n            <Menu vertical size='large' style={{width:'100%', marginTop: 25}}> \r\n                <Header icon='filter' attached color='teal' content='Fileter'></Header>\r\n                <Menu.Item \r\n                    content='All Activities'\r\n                    active={predicate.has('all')}\r\n                    onClick={()=> setPredicate('all', 'true')}\r\n                />\r\n                <Menu.Item \r\n                    content=\"I'm going\"\r\n                    active={predicate.has('isGoing')}\r\n                    onClick={()=> setPredicate('isGoing', 'true')}\r\n                />\r\n                <Menu.Item \r\n                    content=\"I'm hosting\"\r\n                    active={predicate.has('isHost')}\r\n                    onClick={()=> setPredicate('isHost', 'true')}\r\n                />\r\n            </Menu>\r\n            <Header/>\r\n            <Calendar\r\n                onChange = {(date)=> setPredicate('startDate', date as Date)}\r\n                value = {predicate.get(\"startDate\") || new Date()}\r\n\r\n\r\n            />\r\n        </>\r\n        \r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport { SyntheticEvent } from \"react\";\r\nimport { Button, Reveal } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/models/porfile\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\ninterface Props{\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function FollowButton({profile}:Props){\r\n    const{profileStore, userStore} = useStore();\r\n    const{updateFollowing, loading}= profileStore;\r\n\r\n    if(userStore.user?.username === profile.username) return null;\r\n\r\n    function handleFollow(e:SyntheticEvent, username:string){\r\n        e.preventDefault();\r\n        profile.following ? updateFollowing(username, false): updateFollowing(username, true);\r\n    }\r\n    return(\r\n        <Reveal animated= 'move'>\r\n            <Reveal.Content visible style= {{width:'100%'}}>\r\n                <Button \r\n                    fluid \r\n                    color='teal' \r\n                    content= { profile.following?'Following': 'Not Following'}\r\n\r\n                />\r\n            </Reveal.Content>\r\n\r\n                <Reveal.Content hidden style= {{width:'100%'}}>\r\n                <Button \r\n                    fluid \r\n                    basic\r\n                    color={profile.following? \"red\": \"green\"} \r\n                    content= {profile.following?\"Unfollow\": \"Follow\"}\r\n                    loading = {loading}\r\n                    onClick ={(e)=> handleFollow(e, profile.username)}\r\n                />\r\n            </Reveal.Content>\r\n        </Reveal>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport { Link } from 'react-router-dom';\r\nimport { Card, Icon, Image } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/porfile';\r\nimport FollowButton from './FollowButton';\r\n\r\ninterface Props{\r\n    profile: Profile;\r\n}\r\n\r\n\r\n\r\nexport default observer(function ProfileCard({profile}:Props){\r\n   \r\n   function truncate(str: string | undefined){\r\n       if(str){\r\n           return str.length >40 ? str.substring(0, 37) + '...' : str;\r\n       }\r\n   }\r\n   \r\n    return(\r\n        <Card as= {Link} to ={`/profile/${profile.username}`}>\r\n            <Image src= {profile.image || '/assets/user.png'} />\r\n            <Card.Content>\r\n                <Card.Header>{profile.displayName}</Card.Header>\r\n                <Card.Description>{truncate(profile.bio)}</Card.Description>\r\n            </Card.Content>\r\n            <Card.Content>\r\n                <Icon name='user'/>\r\n                {profile.followersCount} followers\r\n            </Card.Content>\r\n             <FollowButton profile= {profile}/>\r\n            \r\n        </Card>\r\n    )\r\n\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Image, List, Popup } from 'semantic-ui-react';\r\nimport { Profile } from '../../../app/models/porfile';\r\nimport ProfileCard from '../../profiles/ProfileCard';\r\n\r\n\r\ninterface Props{\r\n    attendees: Profile[];\r\n}\r\n\r\nexport default observer( function ActivityListItemAttendee({attendees}: Props){\r\n    const style = {\r\n        borderColor: 'orange',\r\n        borderWidth:3\r\n    }\r\n    return(\r\n        <List horizontal>\r\n            {attendees.map(attendee => (\r\n                <Popup\r\n                    hoverable\r\n                    key= {attendee.username}\r\n                    trigger={\r\n                        <List.Item as={Link} to ={`/profile/${attendee.username}`} key={attendee.username}>\r\n                            <Image \r\n                                size='mini' \r\n                                circular  \r\n                                src={ attendee.image || '/assets/user.png'}\r\n                                bordered\r\n                                style = {attendee.following ? style : null}\r\n                            />\r\n                        </List.Item>\r\n                    }\r\n                >\r\n                    <Popup.Content>\r\n                        <ProfileCard profile= {attendee} />\r\n                    </Popup.Content>\r\n\r\n                </Popup>\r\n               \r\n\r\n            ))}\r\n           \r\n        </List>\r\n\r\n    )\r\n})","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Icon, Item, Label, Segment } from 'semantic-ui-react';\r\nimport { Activity } from '../../../app/models/activity';\r\n\r\nimport {format} from 'date-fns';\r\nimport ActivityListItemAttendee from './ActivityListItemAttendee';\r\n\r\ninterface Props{\r\n    activity: Activity\r\n}\r\n\r\nexport default function ActivityListItem({activity}:Props){\r\n\r\n   \r\n\r\n    return (\r\n        <Segment.Group>\r\n            <Segment>\r\n                {activity.isCancelled && (\r\n                    <Label \r\n                        attached = \"top\"\r\n                        color = \"red\"\r\n                        content = \"Cancelled\"\r\n                        style = {{texAligh:\"center\"}}\r\n                    />\r\n                )}\r\n                <Item.Group>\r\n                    <Item>\r\n                        <Item.Image  style = {{marginBottom: 3}}  size ='tiny' circular src= {activity.host?.image ||'assets/user.png'} />\r\n                        <Item.Content>\r\n                            <Item.Header as= {Link} to={`/activities/${activity.id}`}>\r\n                                {activity.title}\r\n                            </Item.Header>\r\n                             <Item.Description>\r\n                                Hosted by  <Link to={`/profile/${activity.hostUserName}`}>{ activity.host?.displayName}</Link> \r\n                            </Item.Description>\r\n                            {activity.isHost && (\r\n                                <Item.Description>\r\n                                    <Label basic color='orange'>\r\n                                        You are hosting this activity\r\n                                    </Label>\r\n                                </Item.Description>\r\n                            )}\r\n                            {activity.isGoing && !activity.isHost && (\r\n                                <Item.Description>\r\n                                    <Label basic color='green'>\r\n                                        You are going to this activity\r\n                                    </Label>\r\n                                </Item.Description>\r\n                            )}\r\n                        </Item.Content>\r\n                       \r\n                    </Item>\r\n                </Item.Group>\r\n            </Segment>\r\n            <Segment>\r\n                <span>\r\n                    <Icon name = 'clock'/> {format( activity.date!, 'dd MMMM yyyy h:mm aa')}\r\n                    <Icon name = 'marker'/> {activity.venue}\r\n                </span>\r\n            </Segment>\r\n            <Segment>\r\n                <ActivityListItemAttendee attendees = {activity.attendees!} />\r\n            </Segment>\r\n            <Segment clearing>\r\n                <span>{activity.description}</span>\r\n                <Button\r\n                    as = {Link}\r\n                    to = {`/activities/${activity.id}`}\r\n                    color=\"teal\"\r\n                    content = \"View\"\r\n                    floated='right'\r\n                />\r\n            </Segment>\r\n        </Segment.Group>\r\n\r\n\r\n        // <Item key={activity.id}>\r\n        //     <Item.Content>\r\n        //         <Item.Header as= 'a'>{activity.title} </Item.Header>\r\n        //         <Item.Meta>{activity.date}</Item.Meta>\r\n        //         <Item.Description>\r\n        //             <div>{activity.description}</div>\r\n        //             <div>{activity.city}, {activity.venue}</div>\r\n        //         </Item.Description>\r\n        //         <Item.Extra>\r\n        //             <Button as={Link} to={`/activities/${activity.id}`} floated='right' content= \"View\" color=\"blue\"/>\r\n        //             <Button\r\n        //                 name = {activity.id}\r\n        //                 loading={loading && target === activity.id} \r\n        //                 onClick={(e)=> handlActivityDelete(e, activity.id)} \r\n        //                 floated='right' \r\n        //                 content= \"Delete\" \r\n        //                 color=\"red\"\r\n        //             />\r\n        //             <Label basic content={activity.category} />\r\n        //         </Item.Extra>\r\n        //     </Item.Content>\r\n        // </Item> \r\n    )\r\n}","import { observer } from 'mobx-react-lite';\r\nimport { Fragment } from 'react';\r\nimport {Header} from 'semantic-ui-react';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport ActivityListItem from './ActivityListItem';\r\n\r\nexport default observer( function ActivityList(){\r\n    const{activityStore} = useStore();\r\n    const{groupedActivities}= activityStore\r\n   \r\n\r\n    return(\r\n        <>\r\n        {groupedActivities.map(([group, activities])=>(\r\n            <Fragment key= {group}>\r\n                <Header sub color='teal'>\r\n                    {group}\r\n                </Header>\r\n                \r\n                {activities.map(activity =>(\r\n                    <ActivityListItem key={activity.id} activity ={activity}/>\r\n                ))}\r\n               \r\n            </Fragment>\r\n        ))}\r\n        </>\r\n     \r\n    )\r\n})","import React, { Fragment } from 'react';\r\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\r\n\r\nexport default function ActivityListItemPlaceholder() {\r\n    return (\r\n        <Fragment>\r\n            <Placeholder fluid style={{ marginTop: 25 }}>\r\n                <Segment.Group>\r\n                    <Segment style={{ minHeight: 110 }}>\r\n                        <Placeholder>\r\n                            <Placeholder.Header image>\r\n                                <Placeholder.Line />\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Header>\r\n                            <Placeholder.Paragraph>\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Paragraph>\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment>\r\n                        <Placeholder>\r\n                            <Placeholder.Line />\r\n                            <Placeholder.Line />\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment secondary style={{ minHeight: 70 }} />\r\n                    <Segment clearing>\r\n                        <Button disabled color='blue' floated='right' content='View' />\r\n                    </Segment>\r\n                </Segment.Group>\r\n            </Placeholder>\r\n        </Fragment>\r\n    );\r\n}; ","import { observer } from 'mobx-react-lite';\r\nimport { useEffect, useState } from 'react';\r\nimport InfiniteScroll from 'react-infinite-scroller';\r\nimport { Grid, Loader } from 'semantic-ui-react';\r\nimport { PagingParams } from '../../../app/models/pagination';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport ActivityFilter from './ActivityFilter';\r\nimport ActivityList from './ActivityList';\r\nimport ActivityListItemPlaceholder from './ActivityListItemPlaceholder';\r\n\r\n\r\n\r\n\r\nexport default observer( function ActivityDashboard(){\r\n    const {activityStore} = useStore();\r\n    const {loadingActivities, activityRegistry, setPagingParams, pagination} = activityStore;\r\n    const[loadingNext, setLoadingNext] = useState(false);\r\n\r\n    function handleGetNext(){\r\n        setLoadingNext(true);\r\n        setPagingParams(new PagingParams(pagination!.currentPage+1))\r\n        loadingActivities().then(()=>setLoadingNext(false));\r\n    }\r\n\r\n    useEffect(()=>{\r\n    if(activityRegistry.size <=1) loadingActivities();\r\n    }, [activityRegistry.size, loadingActivities])\r\n    \r\n\r\n    return(\r\n        <Grid>\r\n            <Grid.Column width = '10'>\r\n                {activityStore.loadingInitial && !loadingNext ?(\r\n                    <>\r\n                        <ActivityListItemPlaceholder/>\r\n                        <ActivityListItemPlaceholder/>\r\n                    </>\r\n                ):(\r\n                    <InfiniteScroll\r\n                        pageStart={0}\r\n                        loadMore= {handleGetNext}\r\n                        hasMore = {!loadingNext && !!pagination && pagination.currentPage < pagination.totalPages}\r\n                        initialLoad= {false}\r\n                    >\r\n                        <ActivityList />\r\n                    </InfiniteScroll>\r\n                )}\r\n            \r\n            </Grid.Column>\r\n            <Grid.Column width=\"6\">\r\n                <ActivityFilter/>\r\n            </Grid.Column>\r\n            <Grid.Column width ={10}>\r\n                <Loader active = {loadingNext} />\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import { useField } from 'formik';\r\nimport React from 'react';\r\nimport { Form, Label } from 'semantic-ui-react';\r\n\r\ninterface Props{\r\n    placeholder:string,\r\n    name : string,\r\n    type?: string,\r\n    label?: string,\r\n}\r\n\r\nexport default function MyTextInput(props:Props){\r\n\r\n    const [field, meta] = useField(props.name);\r\n    return(\r\n        <Form.Field error = {meta.touched && !!meta.error }>\r\n            <label>{props.label}</label>\r\n            <input {...field} {...props}/>\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ): null}\r\n        </Form.Field>\r\n    )\r\n}","import { ErrorMessage, Form, Formik } from 'formik';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Button, Header, Label } from 'semantic-ui-react';\r\nimport MyTextInput from '../../app/common/form/MyTextInput';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\nexport default observer( function Loginform(){\r\n    const {userStore} = useStore();\r\n    return(\r\n        <Formik\r\n            initialValues = {{email:'', password:'', error: null}}\r\n            onSubmit = {(values, {setErrors}) => userStore.login(values).catch(error=> \r\n                setErrors({error: \"Invalid Email or password\"}))}\r\n        >\r\n            {({handleSubmit, isSubmitting, errors})=>(\r\n                <Form\r\n                    className = 'ui form'\r\n                    onSubmit = {handleSubmit}\r\n                    autoComplete= \"off\"\r\n                >\r\n                    <Header as='h2' content='Login to Reactivities' color='teal' textAlign='center'/>\r\n\r\n                    <MyTextInput name= 'email' placeholder = \"Email\"/>\r\n                    <MyTextInput name= 'password' placeholder = \"Password\" type='password'/>\r\n                    <ErrorMessage\r\n                        name = 'error'\r\n                        render = {()=>\r\n                            <Label style={{marginBottom:10}} basic color='red' content = {errors.error} />\r\n                        }\r\n                    />\r\n\r\n                    <Button loading = {isSubmitting} positive content='Login' type = 'submit' fluid /> \r\n\r\n                </Form>\r\n            )}\r\n\r\n\r\n        </Formik>\r\n\r\n    )\r\n})","import React from 'react';\r\nimport { Message } from 'semantic-ui-react';\r\n\r\ninterface Props{\r\n    errors: any;\r\n}\r\n\r\nexport default function ValidationErrors({errors}:Props){\r\n    return(\r\n        <Message error>\r\n            {\r\n               errors &&(\r\n                   <Message.List>\r\n                       {errors.map((err:any, i:any)=>(\r\n                           <Message.Item key={i}>{err}</Message.Item>\r\n                       ))}\r\n                   </Message.List>\r\n               ) \r\n            }\r\n\r\n        </Message>\r\n    )\r\n}","import { ErrorMessage, Form, Formik } from 'formik';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Button, Header } from 'semantic-ui-react';\r\nimport MyTextInput from '../../app/common/form/MyTextInput';\r\nimport { useStore } from '../../app/stores/store';\r\nimport * as Yup from \"yup\";\r\nimport ValidationErrors from '../errors/ValidationErrors';\r\n\r\n\r\nexport default observer( function RegisterForm(){\r\n    const {userStore} = useStore();\r\n    return(\r\n        <Formik\r\n            initialValues = {{displayName:'', username:'', email:'', password:'', error: null}}\r\n            onSubmit = {(values, {setErrors}) => userStore.register(values).catch(error=> \r\n                setErrors({error})\r\n                )}\r\n            validationSchema= {Yup.object({\r\n                displayName: Yup.string().required(),\r\n                username: Yup.string().required(),\r\n                email: Yup.string().required().email(),\r\n                password: Yup.string().required(),\r\n            })}\r\n        >\r\n            {({handleSubmit, isSubmitting, errors, isValid, dirty})=>(\r\n                <Form\r\n                    className = 'ui form error'\r\n                    onSubmit = {handleSubmit}\r\n                    autoComplete= \"off\"\r\n                >\r\n                    <Header as='h2' content='Sign Up to Reactivities' color='teal' textAlign='center'/>\r\n\r\n                    <MyTextInput name= 'displayName' placeholder = \"Display Name\"/>\r\n                    <MyTextInput name= 'username' placeholder = \"Username\"/>\r\n                    <MyTextInput name= 'email' placeholder = \"Email\"/>\r\n                    <MyTextInput name= 'password' placeholder = \"Password\" type='password'/>\r\n                    <ErrorMessage\r\n                        name = 'error'\r\n                        render = {()=>\r\n                            <ValidationErrors errors = {errors.error} />\r\n                        }\r\n                    />\r\n\r\n                    <Button \r\n                        disabled={!isValid || !dirty || isSubmitting} \r\n                        loading = {isSubmitting} \r\n                        positive \r\n                        content='Register' \r\n                        type = 'submit' \r\n                        fluid \r\n                    /> \r\n\r\n                </Form>\r\n            )}\r\n\r\n\r\n        </Formik>\r\n\r\n    )\r\n})","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Container, Header, Segment, Image, Button, Divider } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store';\r\nimport LoginForm from '../users/LoginForm';\r\nimport RegisterForm from '../users/RegisterForm';\r\n\r\nexport default function HomePage(){\r\n    const{userStore, modalStore} = useStore();\r\n    return (\r\n        <Segment inverted textAlign='center' vertical className='masthead' >\r\n            <Container text>\r\n                <Header as=\"h1\" inverted>\r\n                    <Image size='massive' src = '/assets/logo.png' alt= 'logo' style= {{marginBottom:12}}/>\r\n                    Reactivities\r\n                </Header>\r\n                {\r\n                    userStore.isLoggedIn?(\r\n                        <>\r\n                        <Header as=\"h2\" inverted content= \"Welcome to Reactivities\"/>\r\n                        <Button as={Link} to='/activities' size='huge' inverted>\r\n                            Go to activities\r\n                        </Button>\r\n                        </>\r\n                        \r\n                    ):(\r\n                        <>\r\n                            <Button onClick={()=>modalStore.openModal(<LoginForm/>)} size='huge' inverted>\r\n                                Login!\r\n                            </Button>\r\n                            <Button onClick={()=>modalStore.openModal(<RegisterForm/>)} size='huge' inverted>\r\n                                Register\r\n                            </Button>\r\n                            <Divider horizontal inverted>or</Divider>\r\n                            <Button\r\n                                loading={userStore.fbLoading}\r\n                                size='huge'\r\n                                inverted\r\n                                color=\"facebook\"\r\n                                content=\"Login with facebook\"\r\n                                onClick= {userStore.facebookLogin}\r\n\r\n                            />\r\n                        </>\r\n                        \r\n                    )\r\n                }\r\n\r\n            </Container>\r\n        </Segment>\r\n    )\r\n}","import React from \"react\"\r\nimport { Dimmer, Loader } from \"semantic-ui-react\"\r\n\r\ninterface Props {\r\n    inverted?: boolean;\r\n    content?: string;\r\n}\r\n\r\n\r\nexport default function LoadingComponent({inverted = true, content = \"loading....\"}: Props){\r\n    return(\r\n        <Dimmer active={true} inverted = {inverted}>\r\n            <Loader content={content}></Loader>\r\n        </Dimmer>\r\n    )\r\n}","\r\nimport { useField } from \"formik\";\r\nimport React from \"react\";\r\nimport { Form, Label, TextArea } from \"semantic-ui-react\";\r\n\r\ninterface Props{\r\n    placeholder:string,\r\n    name : string,\r\n    rows: number,\r\n    label?: string,\r\n}\r\n\r\n\r\nexport default function MyTextArea(props:Props){\r\n\r\n    const[field, meta] = useField(props.name);\r\n\r\n    return(\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <TextArea {...field} {...props} />\r\n            {\r\n                meta.touched && meta.error ? (\r\n                    <Label basic color='red'>{meta.error}</Label>\r\n                ): null\r\n            }\r\n        </Form.Field>\r\n    )\r\n\r\n}","import {  useField } from \"formik\";\r\nimport React from \"react\";\r\nimport { Form, Label, Select } from \"semantic-ui-react\";\r\n\r\n\r\ninterface Props{\r\n    placeholder:string,\r\n    name : string,\r\n    options: any;\r\n    label?: string,\r\n}\r\n\r\n\r\nexport default function MySelectInput(props: Props){\r\n    const[field, meta, helpers] = useField(props.name);\r\n\r\n    return(\r\n        <Form.Field error ={meta.touched && !!meta.error}>\r\n            {/* <Label> {props.label}</Label> */}\r\n            <Select\r\n                clearable\r\n                options = {props.options}\r\n                value = {field.value || null}\r\n                onChange = {(e, d)=> helpers.setValue(d.value)}\r\n                onBlur = {()=> helpers.setTouched(true)}\r\n                placeholder = {props.placeholder}\r\n            />\r\n            {\r\n                meta.touched && meta.error? (\r\n                    <Label basic color=\"red\">{meta.error}</Label>\r\n                ):null\r\n            }\r\n        \r\n\r\n        </Form.Field>\r\n    )\r\n\r\n}","export const categoryOptions = [\r\n    {text: 'Drinks', value : 'drink'},\r\n    {text: 'Culture', value : 'culture'},\r\n    {text: 'Film', value : 'film'},\r\n    {text: 'Food', value : 'food'},\r\n    {text: 'Music', value : 'music'},\r\n    {text: 'Travel', value : 'travel'},\r\n]","import { useField } from 'formik';\r\nimport React from 'react';\r\nimport { Form, Label } from 'semantic-ui-react';\r\nimport DatePicker, {ReactDatePickerProps} from 'react-datepicker';\r\n\r\n\r\nexport default function MyDateInput(props: Partial<ReactDatePickerProps>){\r\n\r\n    const [field, meta, helpers] = useField(props.name!);\r\n    return(\r\n        <Form.Field error = {meta.touched && !!meta.error }>\r\n            <DatePicker\r\n                {...field}\r\n                {...props}\r\n                selected = {(field.value && new Date(field.value)) || null}\r\n                onChange = {value => helpers.setValue(value)}\r\n            />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ): null}\r\n        </Form.Field>\r\n    )\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useHistory, useParams } from \"react-router\";\r\nimport { Button, Header, Segment } from \"semantic-ui-react\";\r\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\r\nimport {v4 as uuid} from \"uuid\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Formik, Form } from \"formik\";\r\nimport * as Yup from 'yup';\r\nimport MyTextInput from \"../../../app/common/form/MyTextInput\";\r\nimport MyTextArea from \"../../../app/common/form/MyTextArea\";\r\nimport MySelectInput from \"../../../app/common/form/MySelectInput\";\r\nimport { categoryOptions } from \"../../../app/common/options/CategoryOptions\";\r\nimport MyDateInput from \"../../../app/common/form/MyDateInput\";\r\nimport { ActivityFormValues } from \"../../../app/models/activity\";\r\n\r\n\r\n\r\nexport default observer( function ActivityForm(){\r\n    const history = useHistory();\r\n    const{activityStore} = useStore();\r\n    const{createActivity, updateActivity, loadActivity, loadingInitial }= activityStore;\r\n    const{id} = useParams<{id:string}>();\r\n    const[activity, setActivity] = useState<ActivityFormValues>(new ActivityFormValues());\r\n\r\n\r\n    const validationSchema = Yup.object({\r\n        title: Yup.string().required(\"The activity title is required\"),\r\n        description: Yup.string().required(\"The activity description is required\"),\r\n        category: Yup.string().required(),\r\n        date: Yup.string().required('Date is required').nullable(),\r\n        venue: Yup.string().required(),\r\n        city: Yup.string().required(),\r\n    })\r\n\r\n    useEffect(()=>{\r\n        if(id) loadActivity(id).then(activity => setActivity(new ActivityFormValues(activity)) )\r\n    }, [id, loadActivity]);\r\n\r\n\r\n    function handleFormSubmit(activity:ActivityFormValues){\r\n        if(!activity.id)\r\n        {\r\n            let newActivity = {\r\n                ...activity, id: uuid()\r\n            } \r\n            createActivity(newActivity).then(()=>history.push(`/activities/${newActivity.id}`));\r\n        }\r\n        else{\r\n            updateActivity(activity).then(()=>history.push(`/activities/${activity.id}`));\r\n        }\r\n    }\r\n   \r\n\r\n    if(loadingInitial)   return <LoadingComponent content=\"loading activity...\"/>\r\n    return(\r\n        <Segment clearing>\r\n            <Header content=\"Activity Details\" sub color='teal'/>\r\n            <Formik\r\n            validationSchema= {validationSchema} \r\n            enableReinitialize \r\n            initialValues={activity} \r\n            onSubmit = {values => handleFormSubmit(values)}\r\n            >\r\n                {({handleSubmit, isValid, isSubmitting, dirty})=>(\r\n                <Form className=\"ui form\" onSubmit={handleSubmit} autoComplete = \"off\">\r\n                    <MyTextInput name='title' placeholder='Title'/>\r\n\r\n                    <MyTextArea rows = {3} placeholder = \"Description\"  name='description'  />\r\n                    <MySelectInput options = {categoryOptions} placeholder = \"Category\"  name ='category'   />\r\n                    <MyDateInput  \r\n                        placeholderText = \"Date\"  \r\n                        name ='date'\r\n                        showTimeSelect\r\n                        timeCaption = \"time\"\r\n                        dateFormat = \"MMMM d, yyyy h:mm aa\"\r\n                    />\r\n                    <Header content=\"Location Details\" sub color='teal'/>\r\n                    <MyTextInput placeholder = \"City\"  name ='city'  />\r\n                    <MyTextInput placeholder = \"Venue\" name ='venue'  />\r\n                    <Button \r\n                        disabled ={isSubmitting || !dirty || !isValid}\r\n                        loading={isSubmitting} \r\n                        floated='right' \r\n                        positive \r\n                        type = \"submit\" \r\n                        content = \"Submit\" \r\n                    />\r\n                    <Button as = {Link} to ='/activities'  floated='right' type = \"button\" content = \"Cancel\"/>\r\n                </Form>\r\n                )}\r\n\r\n\r\n            </Formik>\r\n        </Segment>\r\n    )\r\n})","import { Formik, Form, Field, FieldProps } from 'formik'\r\nimport { observer } from 'mobx-react-lite'\r\nimport { useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport {Segment, Header, Comment, Loader} from 'semantic-ui-react'\r\nimport { useStore } from '../../../app/stores/store';\r\nimport * as Yup from 'yup';\r\nimport { formatDistanceToNow } from 'date-fns'\r\n\r\ninterface Props{\r\n    activityId:string;\r\n}\r\n\r\n\r\nexport default observer(function ActivityDetailedChat({activityId}:Props) {\r\n\r\n    const{commentStore}= useStore();\r\n\r\n    useEffect(()=>{\r\n        if(activityId){\r\n            commentStore.createHubConnection(activityId);\r\n        }\r\n        return()=>{\r\n            commentStore.clearComments();\r\n        }\r\n    },[commentStore, activityId]);\r\n\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                attached='top'\r\n                inverted\r\n                color='teal'\r\n                style={{border: 'none'}}\r\n            >\r\n                <Header>Chat about this event</Header>\r\n            </Segment>\r\n            <Segment attached clearing>\r\n                <Formik\r\n                    onSubmit = {(values, {resetForm})=>\r\n                    commentStore.addComment(values).then(()=> resetForm())}\r\n\r\n                    initialValues = {{body:''}}\r\n\r\n                    validationSchema = {Yup.object({\r\n                        body: Yup.string().required()\r\n                    })}\r\n                >\r\n                    {({isSubmitting, isValid, handleSubmit})=>(\r\n                        <Form className='ui form'>\r\n                            <Field name='body'>\r\n                                {(props:FieldProps)=>(\r\n                                    <div style={{position:'relative'}}>\r\n                                        <Loader active={isSubmitting}/>\r\n                                        <textarea \r\n                                        placeholder = \"Enter your comment (Enter to submit, SHIFT + Enter for new line)\"\r\n                                        rows = {2}\r\n                                        {...props.field}\r\n                                        onKeyPress = {e =>{\r\n                                            if(e.key === 'Enter' && e.shiftKey){\r\n                                                return;\r\n                                            }\r\n                                            if(e.key === 'Enter' && !e.shiftKey){\r\n                                                e.preventDefault();\r\n                                                isValid && handleSubmit();\r\n\r\n                                            }\r\n                                        }}\r\n                                        />\r\n                                    </div>\r\n                                )}\r\n                                \r\n                            </Field>\r\n                        </Form>\r\n                    )}\r\n                    \r\n                </Formik>\r\n                <Comment.Group>\r\n                    {commentStore.comments.map(comment =>(\r\n                        <Comment key= {comment.id}>\r\n                            <Comment.Avatar src={comment.image ||'/assets/user.png'}/>\r\n                            <Comment.Content>\r\n                                <Comment.Author as= {Link} to = {`/profile/${comment.username}`}>{comment.displayName}</Comment.Author>\r\n                                <Comment.Metadata>\r\n                                    <div>{ formatDistanceToNow( comment.createdAt)} ago</div>\r\n                                </Comment.Metadata>\r\n                                <Comment.Text style = {{whiteSpace: 'pre-wrap'}}>{comment.body}</Comment.Text>\r\n                            </Comment.Content>\r\n                        </Comment>\r\n                    ))}\r\n\r\n\r\n                    \r\n                </Comment.Group>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})\r\n","import { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport {Button, Header, Item, Segment, Image, Label} from 'semantic-ui-react'\r\nimport {Activity} from \"../../../app/models/activity\";\r\n\r\nimport {format} from 'date-fns';\r\nimport { useStore } from '../../../app/stores/store';\r\nconst activityImageStyle = {\r\n    filter: 'brightness(30%)'\r\n};\r\n\r\nconst activityImageTextStyle = {\r\n    position: 'absolute',\r\n    bottom: '5%',\r\n    left: '5%',\r\n    width: '100%',\r\n    height: 'auto',\r\n    color: 'white'\r\n};\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer (function ActivityDetailedHeader({activity}: Props) {\r\n    const {activityStore:{updateAttendance, loading, cancelActivityToggle}} = useStore();\r\n    return (\r\n        <Segment.Group>\r\n            <Segment basic attached='top' style={{padding: '0'}}>\r\n                {activity.isCancelled && (\r\n                    <Label\r\n                        style = {{position: \"absolute\", zIndex: 1000, left: -14, top:20}}\r\n                        ribbon\r\n                        color = 'red'\r\n                        content='Cancelled'\r\n                    />\r\n                )}\r\n                <Image src={`/assets/categoryImages/${activity.category}.jpg`} fluid style={activityImageStyle}/>\r\n                <Segment style={activityImageTextStyle} basic>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Content>\r\n                                <Header\r\n                                    size='huge'\r\n                                    content={activity.title}\r\n                                    style={{color: 'white'}}\r\n                                />\r\n                                <p>{format(activity.date!, \"dd MMMM yyyy\")}</p>\r\n                                <p>\r\n                                    Hosted by <strong><Link to={`/profile/${activity.host?.username}`}>{activity.host?.displayName}</Link> </strong>\r\n                                </p>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Segment>\r\n            </Segment>\r\n            <Segment clearing attached='bottom'>\r\n                {activity.isHost?(\r\n                    <>\r\n                        <Button\r\n                            color = {activity.isCancelled ? \"green\": \"red\"}\r\n                            floated = \"left\"\r\n                            basic\r\n                            content= {activity.isCancelled? \"Re-activate Activity\": \"Cancel Activity\"}\r\n                            onClick = {cancelActivityToggle}\r\n                            loading = {loading}\r\n                        />\r\n                        <Button as={Link} \r\n                            to={`/manage/${activity.id}`} \r\n                            color='orange' \r\n                            floated='right'\r\n                            disabled = {activity.isCancelled}\r\n                        >\r\n                        Manage Event\r\n                        </Button>\r\n                    </>\r\n                     \r\n                ): activity.isGoing?(\r\n                    <Button loading= {loading} onClick={updateAttendance}>Cancel attendance</Button>\r\n\r\n                ):(\r\n                    <Button  disabled = {activity.isCancelled} loading= {loading} onClick={updateAttendance} color='teal'>Join Activity</Button>\r\n\r\n                )}\r\n              \r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})\r\n\r\n","\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport {Segment, Grid, Icon} from 'semantic-ui-react'\r\nimport {Activity} from \"../../../app/models/activity\";\r\n\r\nimport {format} from 'date-fns';\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedInfo({activity}: Props) {\r\n    return (\r\n        <Segment.Group>\r\n            <Segment attached='top'>\r\n                <Grid>\r\n                    <Grid.Column width={1}>\r\n                        <Icon size='large' color='teal' name='info'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <p>{activity.description}</p>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='calendar' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n            <span>\r\n              {format( activity.date!, \"dd MMMM yyyy h:mm aa\")}\r\n            </span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='marker' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={11}>\r\n                        <span>{activity.venue}, {activity.city}</span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})\r\n","import React from 'react'\r\nimport { Segment, List, Label, Item, Image } from 'semantic-ui-react'\r\nimport { Link } from 'react-router-dom'\r\nimport { observer } from 'mobx-react-lite'\r\nimport { Activity } from '../../../app/models/activity'\r\n\r\n\r\ninterface Props{\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedSidebar ({activity:{attendees, host}}:Props) {\r\n    if(!attendees) return null;\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                style={{ border: 'none' }}\r\n                attached='top'\r\n                secondary\r\n                inverted\r\n                color='teal'\r\n            >\r\n                  {attendees.length}{attendees.length ===1?\"Person\":\"People\"} going\r\n            </Segment>\r\n            <Segment attached>\r\n                <List relaxed divided>\r\n                    {attendees.map(attendee =>(\r\n                        <Item style={{ position: 'relative' }} key={attendee.username}>\r\n                            {attendee.username === host?.username &&(\r\n                                <Label\r\n                                    style={{ position: 'absolute' }}\r\n                                    color='orange'\r\n                                    ribbon='right'\r\n                                >\r\n                                    Host\r\n                                </Label>\r\n                            )}\r\n                            \r\n                            <Image size='tiny' src={attendee.image ||'/assets/user.png'} />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Item.Header as='h3'>\r\n                                    <Link to={`/profiles/${attendee.username}`}>{attendee.displayName}</Link>\r\n                                </Item.Header>\r\n                                {attendee.following &&\r\n                                <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>}\r\n                            </Item.Content>\r\n                        </Item>\r\n                    ))}\r\n                </List>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})\r\n\r\n\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React, { useEffect } from \"react\";\r\nimport { useParams } from \"react-router\";\r\nimport { Grid } from \"semantic-ui-react\";\r\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport ActivityDetailedChat from \"./ActivityDetailedChat\";\r\nimport ActivityDetailedHeader from \"./ActivityDetailedHeader\";\r\nimport ActivityDetailedInfo from \"./ActivityDetailedInfo\";\r\nimport ActivityDetailedSidebar from \"./ActivityDetailedSidebar\";\r\n\r\n\r\nexport default observer( function ActivityDetails(){\r\n    const {activityStore} = useStore();\r\n    const{selectedActivity: activity, loadActivity, loadingInitial, clearSelectedActivity} = activityStore;\r\n    const{id} = useParams<{id:string}>();\r\n\r\n    useEffect(()=>{\r\n        if(id) loadActivity(id);\r\n        return ()=> clearSelectedActivity();\r\n    }, [id, loadActivity, clearSelectedActivity]);\r\n    \r\n    if(loadingInitial || !activity) return <LoadingComponent/>\r\n    return(\r\n       <Grid>\r\n           <Grid.Column width= {10}>\r\n              <ActivityDetailedHeader activity= {activity}></ActivityDetailedHeader>\r\n              <ActivityDetailedInfo activity = {activity}></ActivityDetailedInfo>\r\n              <ActivityDetailedChat activityId={activity.id}></ActivityDetailedChat>\r\n           </Grid.Column>\r\n           <Grid.Column width= {6}>\r\n               <ActivityDetailedSidebar activity = {activity} ></ActivityDetailedSidebar>\r\n           </Grid.Column>\r\n\r\n       </Grid>\r\n        \r\n    )\r\n})","\r\nimport React, { useState } from 'react';\r\nimport {Button, Header, Segment} from \"semantic-ui-react\";\r\nimport axios from 'axios';\r\nimport ValidationErrors from './ValidationErrors';\r\n\r\nexport default function TestErrors() {\r\n    const baseUrl = process.env.REACT_APP_API_URL;\r\n    const [errors, setErrors] = useState(null);\r\n\r\n    function handleNotFound() {\r\n        axios.get(baseUrl + 'buggy/not-found').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadRequest() {\r\n        axios.get(baseUrl + 'buggy/bad-request').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleServerError() {\r\n        axios.get(baseUrl + 'buggy/server-error').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleUnauthorised() {\r\n        axios.get(baseUrl + 'buggy/unauthorised').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadGuid() {\r\n        axios.get(baseUrl + 'activities/notaguid').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleValidationError() {\r\n        axios.post(baseUrl + 'activities', {}).catch(err => setErrors(err));\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header as='h1' content='Test Error component' />\r\n            <Segment>\r\n                <Button.Group widths='7'>\r\n                    <Button onClick={handleNotFound} content='Not Found' basic primary />\r\n                    <Button onClick={handleBadRequest} content='Bad Request' basic primary />\r\n                    <Button onClick={handleValidationError} content='Validation Error' basic primary />\r\n                    <Button onClick={handleServerError} content='Server Error' basic primary />\r\n                    <Button onClick={handleUnauthorised} content='Unauthorised' basic primary />\r\n                    <Button onClick={handleBadGuid} content='Bad Guid' basic primary />\r\n                </Button.Group>\r\n            </Segment>\r\n            {errors && \r\n            <ValidationErrors errors= {errors}/>}\r\n\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, Header, Icon, Segment } from \"semantic-ui-react\";\r\n\r\n\r\nexport default function NotFound(){\r\n    return(\r\n        <Segment placeholder>\r\n            <Header icon>\r\n                <Icon name = 'search'/>\r\n                Oops - we've looked everywhere and could not find this.\r\n            </Header>\r\n            <Segment.Inline>\r\n                <Button as={Link} to = \"/activities\" primary >\r\n                    Return to Activities page\r\n                </Button>\r\n            </Segment.Inline>\r\n\r\n        </Segment>\r\n    )\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Container, Header, Segment } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store';\r\nexport default observer( function ServerError(){\r\n    const {commonStore} = useStore();\r\n    return(\r\n        <Container>\r\n            <Header as =\"h1\" content=\"Server Error\"/>\r\n            <Header sub as='h5' color='red' content={commonStore.error?.message}/>\r\n            {\r\n                commonStore.error?.details && \r\n                <Segment>\r\n                    <Header as ='h4' content='Stack trace' color = 'teal'/>\r\n                    <code style = {{marginTop: '10px'}}> {commonStore.error.details}</code>\r\n                </Segment>\r\n            }\r\n\r\n        </Container>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Modal } from 'semantic-ui-react';\r\nimport { useStore } from '../../stores/store';\r\n\r\nexport default observer( function ModalContainer(){\r\n    const{modalStore} = useStore();\r\n    return(\r\n        <Modal open={modalStore.modal.open} onClose={modalStore.closeModal} size=\"mini\">\r\n            <Modal.Content>\r\n                {modalStore.modal.body}\r\n            </Modal.Content>\r\n\r\n        </Modal>\r\n    )\r\n})","import { Form, Formik } from 'formik';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { useStore } from '../../app/stores/store';\r\nimport * as Yup from 'yup';\r\nimport MyTextInput from '../../app/common/form/MyTextInput';\r\nimport MyTextArea from '../../app/common/form/MyTextArea';\r\nimport { Button } from 'semantic-ui-react';\r\n\r\n\r\ninterface Props{\r\n    setEditMode: (editMode: boolean) => void;\r\n}\r\n\r\nexport default observer(function ProfileEditForm({setEditMode}:Props){\r\n    \r\n    const{profileStore:{profile, UpdateProfile}}=useStore();\r\n    return(\r\n        <Formik\r\n            initialValues = {{displayName: profile?.displayName, bio:profile?.bio}}\r\n            onSubmit= {values=>{\r\n                UpdateProfile(values).then(()=>{\r\n                    setEditMode (false);\r\n                })\r\n            }}\r\n\r\n            validationSchema = {Yup.object({\r\n                displayName: Yup.string().required()\r\n            })}\r\n        >\r\n            {({isSubmitting, isValid, dirty})=>(\r\n                <Form className='ui form'>\r\n                    <MyTextInput placeholder='Display Name' name='displayName' />\r\n                    <MyTextArea rows={3} placeholder='Add your bio' name='bio'/>\r\n                    <Button\r\n                        positive\r\n                        type= 'submit'\r\n                        loading = {isSubmitting}\r\n                        content='Update Profile'\r\n                        floated='right'\r\n                        disabled = {!isValid || !dirty}\r\n                    />\r\n                </Form>\r\n            )}\r\n\r\n        </Formik>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { useState } from \"react\";\r\nimport { Button, Grid, Header, Tab } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport ProfileEditForm from \"./ProfileEditForm\";\r\n\r\n\r\nexport default observer (function ProfileAbout(){\r\n    \r\n    const{profileStore}= useStore();\r\n    const{isCurrentUser, profile}= profileStore;\r\n    const[editMode, setEditMode] = useState(false);\r\n    \r\n    return(\r\n        <Tab.Pane>\r\n           <Grid>\r\n               <Grid.Column width={16}>\r\n                   <Header floated='left' icon='user' content={`about ${profile?.displayName}`}/>\r\n                   {isCurrentUser &&(\r\n                       <Button\r\n                        basic\r\n                        floated='right'\r\n                        content={editMode?'Cancel':'Edit Profile'}\r\n                        onClick={()=> setEditMode(!editMode)}\r\n                       />\r\n                   )}\r\n               </Grid.Column>\r\n               <Grid.Column width={16}>\r\n                   {editMode ? <ProfileEditForm setEditMode={setEditMode}/>:\r\n                   <span style={{whiteSpace: 'pre-wrap'}}>{profile?.bio}</span>}\r\n               </Grid.Column>\r\n\r\n           </Grid> \r\n        </Tab.Pane>\r\n    )\r\n})","import React, { SyntheticEvent, useEffect } from 'react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Tab, Grid, Header, Card, Image, TabProps } from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom';\r\nimport { format } from 'date-fns';\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport { UserActivity } from '../../app/models/porfile';\r\n\r\nconst panes = [\r\n    { menuItem: 'Future Events', pane: { key: 'future' } },\r\n    { menuItem: 'Past Events', pane: { key: 'past' } },\r\n    { menuItem: 'Hosting', pane: { key: 'hosting' } }\r\n];\r\n\r\nexport default observer(function ProfileActivities() {\r\n    const { profileStore } = useStore();\r\n    const {\r\n        loadUserActivities,\r\n        profile,\r\n        loadingActivities,\r\n        userActivities\r\n    } = profileStore;\r\n\r\n    useEffect(() => {\r\n        loadUserActivities(profile!.username);\r\n    }, [loadUserActivities, profile]);\r\n\r\n    const handleTabChange = (e: SyntheticEvent, data: TabProps) => {\r\n        loadUserActivities(profile!.username, panes[data.activeIndex as number].pane.key);\r\n    };\r\n\r\n    return (\r\n        <Tab.Pane loading={loadingActivities}>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='calendar' content={'Activities'} />\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Tab\r\n                        panes={panes}\r\n                        menu={{ secondary: true, pointing: true }}\r\n                        onTabChange={(e, data) => handleTabChange(e, data)}\r\n                    />\r\n                    <br />\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {userActivities.map((activity: UserActivity) => (\r\n                            <Card\r\n                                as={Link}\r\n                                to={`/activities/${activity.id}`}\r\n                                key={activity.id}\r\n                            >\r\n                                <Image\r\n                                    src={`/assets/categoryImages/${activity.category}.jpg`}\r\n                                    style={{ minHeight: 100, objectFit: 'cover' }}\r\n                                />\r\n                                <Card.Content>\r\n                                    <Card.Header textAlign='center'>{activity.title}</Card.Header>\r\n                                    <Card.Meta textAlign='center'>\r\n                                        <div>{format(new Date(activity.date), 'do LLL')}</div>\r\n                                        <div>{format(new Date(activity.date), 'h:mm a')}</div>\r\n                                    </Card.Meta>\r\n                                </Card.Content>\r\n                            </Card>\r\n                        ))}\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    );\r\n});","import React from 'react';\r\nimport {Tab, Grid, Header, Card} from \"semantic-ui-react\";\r\nimport ProfileCard from \"./ProfileCard\";\r\nimport {useStore} from \"../../app/stores/store\";\r\nimport { observer } from 'mobx-react-lite';\r\n\r\nexport default observer(function ProfileFollowings() {\r\n    const {profileStore} = useStore();\r\n    const {profile, followings, loadingFollowings, activeTab } = profileStore;\r\n    return (\r\n        <Tab.Pane loading={loadingFollowings}>\r\n            <Grid>\r\n                <Grid.Column width='16'>\r\n                    <Header\r\n                        floated='left'\r\n                        icon='user'\r\n                       content={activeTab === 3 ? `People following ${profile!.displayName}` : `People ${profile?.displayName} is following`}\r\n                  \r\n                    />\r\n                </Grid.Column>\r\n                <Grid.Column width='16'>\r\n                    <Card.Group itemsPerRow={4}>\r\n                       \r\n                        {followings.map(profile => (\r\n                            <ProfileCard key={profile.username} profile={profile} />\r\n                        ))}\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import React from \"react\";\r\nimport { Cropper } from \"react-cropper\";\r\nimport 'cropperjs/dist/cropper.css';\r\n\r\ninterface Props{\r\nimagePreview : string;\r\nsetCropper:(cropper:Cropper) => void;\r\n}\r\nexport default function PhotoWidgetCropper({imagePreview, setCropper}:Props){\r\n    return(\r\n        <Cropper \r\n            src = {imagePreview}\r\n            style = {{height: 200, width:\"100%\"}}\r\n            initialAspectRatio= {1}\r\n            aspectRatio = {1}\r\n            preview = '.img-preview'\r\n            guides = {false}\r\n            viewMode = {1}\r\n            autoCropArea= {1}\r\n            background = {false}\r\n            onInitialized = {cropper => setCropper(cropper)}\r\n        \r\n        \r\n        />\r\n    )\r\n}","import React, {useCallback} from 'react'\r\nimport {useDropzone} from 'react-dropzone'\r\nimport { Header, Icon } from 'semantic-ui-react'\r\n\r\ninterface Props{\r\n    setFiles: (files: any)=> void;\r\n}\r\n\r\nexport default function PhotoWidgetDropZone({setFiles}: Props) {\r\n\r\n    const dzStyles = {\r\n        border: 'dashed 3px #eee',\r\n        borderColor: '#eee',\r\n        borderRadious: '5px',\r\n        paddingTop: '30px',\r\n        textAlign: 'center'as 'center',\r\n        height: 200\r\n    }\r\n\r\n    const dzActive = {\r\n        borderColor: 'green'\r\n    }\r\n\r\n\r\n  const onDrop = useCallback(acceptedFiles => {\r\n    setFiles(acceptedFiles.map((file:any) => Object.assign(file, {\r\n        preview: URL.createObjectURL(file)\r\n    })))\r\n  }, [setFiles])\r\n  const {getRootProps, getInputProps, isDragActive} = useDropzone({onDrop})\r\n\r\n  return (\r\n    <div {...getRootProps()} style={isDragActive ? {...dzStyles, ...dzActive}: dzStyles} >\r\n      <input {...getInputProps()} />\r\n        <Icon name = \"upload\" size= 'huge' />\r\n        <Header content = \"Drop image here\"/>\r\n    </div>\r\n  )\r\n}","import React from \"react\";\r\nimport { useEffect } from \"react\";\r\nimport { useState } from \"react\";\r\nimport { Button, Grid, Header } from \"semantic-ui-react\";\r\nimport PhotoWidgetCropper from \"./PhotoWidgetCropper\";\r\nimport PhotoWidgetDropZone from \"./PhotoWidgetDropZone\";\r\n\r\n\r\ninterface Props{\r\n   loading: boolean;\r\n   uploadPhoto:(file:Blob)=> void; \r\n}\r\n\r\n\r\nexport default function PhotoUploadWidget({loading, uploadPhoto}:Props){\r\n    const[files, setFiles] = useState<any>([]);\r\n    const[cropper, setCropper] = useState<Cropper>();\r\n\r\n    function onCrop(){\r\n        if(cropper){\r\n            cropper.getCroppedCanvas().toBlob(blob => uploadPhoto(blob!));\r\n        }\r\n    }\r\n\r\n    useEffect(()=>{\r\n        return()=>{\r\n            files.forEach((file:any)=> URL.revokeObjectURL(file.preview))\r\n        }\r\n    },[files])\r\n\r\n    return(\r\n        <Grid>\r\n            <Grid.Column width= {4}>\r\n                <Header sub color='teal' content= 'Step 1 - Add Photo'/> \r\n                <PhotoWidgetDropZone setFiles = {setFiles}/>\r\n            </Grid.Column>\r\n            <Grid.Column width= {1}></Grid.Column>\r\n            <Grid.Column width= {4}>\r\n                <Header sub color='teal' content= 'Step 2 - Resize Image'/> \r\n                {files && files.length > 0 &&(\r\n                    <PhotoWidgetCropper setCropper = {setCropper} imagePreview = {files[0].preview} />\r\n                )}\r\n            </Grid.Column>\r\n            <Grid.Column width= {1}></Grid.Column>\r\n            <Grid.Column width= {4}>\r\n                {files && files.length > 0 && \r\n                <>\r\n                    <Header sub color='teal' content= 'Step 3 - Preview & unpload'/> \r\n                    <> \r\n                        <div className = \"img-preview\" style= {{minHeight:200, overflow:\"hidden\"}}/>\r\n                        <Button.Group widths={2}>\r\n                            <Button loading={loading} onClick={onCrop} positive icon= 'check'/>\r\n                            <Button disabled={loading} onClick={()=> setFiles([])} icon= 'close'/>\r\n                        </Button.Group>\r\n                    </>\r\n                </>}\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport React, { SyntheticEvent } from \"react\";\r\nimport { useState } from \"react\";\r\nimport { Card, Header, Image, Tab, Grid, Button } from \"semantic-ui-react\";\r\nimport PhotoUploadWidget from \"../../app/common/imageUpload/PhotoUploadWidget\";\r\nimport { Photo, Profile } from \"../../app/models/porfile\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\ninterface Props{\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfilePhotos({profile}:Props){\r\n    const{profileStore:{isCurrentUser, uploadPhoto, uploading, setMainPhoto, loading, deletePhoto}} = useStore();\r\n    const [addPhotoMode, setAddPhotoMode] = useState(false);\r\n    const [target, setTarget] = useState('');\r\n\r\n    function handlePhotoUpload(file:Blob){\r\n        uploadPhoto(file).then(()=> setAddPhotoMode(false));\r\n    }\r\n\r\n    function handleSetMainPhoto (photo: Photo, e: SyntheticEvent<HTMLButtonElement>){\r\n        setTarget(e.currentTarget.name);\r\n        setMainPhoto(photo);\r\n    }\r\n    function handleDeletePhoto (photo: Photo, e: SyntheticEvent<HTMLButtonElement>){\r\n        setTarget(e.currentTarget.name);\r\n        deletePhoto(photo);\r\n    }\r\n\r\n\r\n\r\n    return(\r\n        \r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width = {16}>\r\n                    <Header floated= 'left' icon= \"image\" content = 'Photos'></Header>\r\n                    {isCurrentUser && (\r\n                        <Button floated=\"right\"\r\n                        content = {addPhotoMode ? 'Cancel': 'Add Photo'}\r\n                        onClick = {()=> setAddPhotoMode(!addPhotoMode)}\r\n                        />\r\n                    )\r\n                    }\r\n                </Grid.Column>\r\n                <Grid.Column width = {16}>\r\n                    {addPhotoMode ? (\r\n                        <PhotoUploadWidget uploadPhoto = {handlePhotoUpload} loading = {uploading} />\r\n                    ):(\r\n                    <Card.Group itemsPerRow={5}>\r\n                        {profile.photos?.map((photo)=>(\r\n                            <Card key={photo.id}>\r\n                                <Image src = {photo.url || '/assets/user.png'}/>\r\n                                {isCurrentUser && (\r\n                                    <Button.Group fluid widths= {2}>\r\n                                        <Button \r\n                                            basic\r\n                                            color='green'\r\n                                            content='Main'\r\n                                            name = {'main' +photo.id}\r\n                                            disabled = {photo.isMain}\r\n                                            loading = {target === 'main'+photo.id && loading}\r\n                                            onClick={e=> handleSetMainPhoto(photo, e)}\r\n                                        />\r\n                                        <Button\r\n                                            basic \r\n                                            color='red' \r\n                                            icon='trash'\r\n                                            name = {photo.id}\r\n                                            loading = {target === photo.id && loading}\r\n                                            disabled = {photo.isMain}\r\n                                            onClick = {e => handleDeletePhoto(photo, e)}\r\n                                        />\r\n\r\n                                    </Button.Group>\r\n                                )}\r\n                            </Card> \r\n                        ))}\r\n                    \r\n                    </Card.Group>\r\n                    )}\r\n                </Grid.Column>\r\n\r\n            </Grid>  \r\n        </Tab.Pane>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Tab } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/models/porfile\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport ProfileAbout from \"./ProfileAbout\";\r\nimport ProfileActivities from \"./ProfileActivities\";\r\nimport ProfileFollowings from \"./ProfileFollowings\";\r\nimport ProfilePhotos from \"./ProfilePhotos\";\r\ninterface Props{\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer( function ProfileContent({profile}:Props){\r\n    const{profileStore} = useStore()\r\n    const panes= [\r\n        {menuItem: 'About', render: ()=> <ProfileAbout/>},\r\n        {menuItem: 'Photos', render: ()=><ProfilePhotos profile = {profile}/>},\r\n        {menuItem: 'Events', render: ()=> <ProfileActivities/>},\r\n        {menuItem: 'Followers', render: ()=><ProfileFollowings/>},\r\n        {menuItem: 'Following', render: ()=><ProfileFollowings/>},\r\n    ]\r\n    return(\r\n        <Tab \r\n            menu = {{fluid: true, vertical:true}}\r\n            menuPosition = \"right\"\r\n            panes = {panes}\r\n            onTabChange = {(e, data)=> profileStore.setActiveTab(data.activeIndex)}\r\n        />\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport { Divider, Grid, Header, Item, Segment, Statistic, StatisticGroup } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/porfile';\r\nimport FollowButton from './FollowButton';\r\n\r\ninterface Props{\r\n    profile: Profile;\r\n}\r\n\r\n\r\nexport default observer( function ProfileHeader({profile}: Props){\r\n    return(\r\n        <Segment>\r\n            <Grid>\r\n\r\n                <Grid.Column width = {12}>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Image avatar size =\"small\" src= {profile.image ||\"/assets/user.png\"}/>\r\n                            <Item.Content verticalAlign = \"middle\">\r\n                                <Header as ='h1' content= {profile.displayName}/>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Grid.Column>\r\n\r\n                <Grid.Column width = {4}>\r\n                    <StatisticGroup widths= {2}>\r\n                        <Statistic label= 'Followers' value= {profile.followersCount} />\r\n                        <Statistic label= 'Following' value= {profile.followingCount} />\r\n                    </StatisticGroup>\r\n                    \r\n                    <Divider />\r\n                    <FollowButton profile= {profile}/>\r\n\r\n                </Grid.Column>\r\n\r\n            </Grid>\r\n        </Segment>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React, { useEffect } from \"react\";\r\nimport { useParams } from \"react-router\";\r\nimport { Grid } from \"semantic-ui-react\";\r\nimport LoadingComponent from \"../../app/layout/LoadingComponent\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport ProfileContent from \"./ProfileContent\";\r\nimport ProfileHeader from \"./ProfileHeader\";\r\n\r\nexport default observer( function ProfilePage(){\r\n\r\n    const {username} = useParams<{username: string}>();\r\n    const {profileStore} = useStore();\r\n    const {loadProfile, loadingProfile, profile, setActiveTab} = profileStore;\r\n\r\n    useEffect(()=>{\r\n        loadProfile(username);\r\n        setActiveTab(0);\r\n    },[loadProfile, username, setActiveTab])\r\n\r\n    if(loadingProfile) return <LoadingComponent content= 'Loading Profile.....'></LoadingComponent> \r\n\r\n    return(\r\n        <Grid>\r\n            <Grid.Column width= {16}>\r\n                {profile &&\r\n                    <> \r\n                        <ProfileHeader profile = {profile} />\r\n                        <ProfileContent profile = {profile}/>\r\n                    </>\r\n                }   \r\n               \r\n                \r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import { Redirect, Route, RouteComponentProps, RouteProps } from \"react-router-dom\";\r\nimport { useStore } from \"../stores/store\";\r\n\r\ninterface Props extends RouteProps {\r\n    component: React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>;\r\n}\r\n\r\nexport default function PrivateRoute({component: Component, ...rest}: Props) {\r\n    const {userStore: {isLoggedIn}} = useStore();\r\n    return (\r\n        <Route \r\n            {...rest}\r\n            render={(props) => isLoggedIn ? <Component {...props} /> : <Redirect to='/' />}\r\n        />\r\n    )\r\n}","import { useEffect } from 'react';\nimport { Container } from 'semantic-ui-react';\nimport NavBar from './NavBar';\nimport ActivityDashboard from '../../features/activities/dashboard/ActivityDashboard';\nimport { observer } from 'mobx-react-lite';\nimport { Route, Switch, useLocation } from 'react-router';\nimport HomePage from '../../features/home/Home';\nimport ActivityForm from '../../features/activities/form/ActivityForm';\nimport ActivityDetails from '../../features/activities/details/ActivityDetails';\nimport TestErrors from '../../features/errors/TestErrors';\nimport { ToastContainer } from 'react-toastify';\nimport NotFound from '../../features/errors/NotFound';\nimport ServerError from '../../features/errors/ServerError';\nimport { useStore } from '../stores/store';\nimport LoadingComponent from './LoadingComponent';\nimport ModalContainer from '../common/modals/ModalContainer';\nimport ProfilePage from '../../features/profiles/ProfilePage';\nimport PrivateRoute from './PrivateRoute';\n\n\nfunction App() {\n  const location = useLocation();\n  const {commonStore, userStore} = useStore();\n\n  useEffect(()=>{\n    if(commonStore.token){\n      userStore.getUser().finally(()=> commonStore.setAppLoaded());\n    }else{\n      userStore.getFacebookLoginStatus().then(() => commonStore.setAppLoaded());\n    }\n  }, [commonStore, userStore])\n\n  if(!commonStore.appLoaded) return (<LoadingComponent content = 'Loading app.....' />)\n\n  return (\n    < >\n    <ToastContainer position=\"bottom-right\" hideProgressBar />\n    <ModalContainer/>\n     <Route exact path='/' component={HomePage}/>\n     <Route \n      path={'/(.+)'}\n      render = {()=>(\n        <>\n        <NavBar/>\n        <Container style = {{marginTop: '7em'}}> \n          <Switch>\n            <PrivateRoute exact path='/activities' component={ActivityDashboard}/>\n            <PrivateRoute path='/activities/:id' component={ActivityDetails}/>\n            <PrivateRoute key={location.key} path={['/createActivity', '/manage/:id' ]} component={ActivityForm}/>\n            <PrivateRoute path=\"/profile/:username\" component = {ProfilePage}/>\n            <PrivateRoute path=\"/errors\" component = {TestErrors}/>\n            <Route path='/server-error' component = {ServerError}/>\n            <Route component={NotFound}/>\n          </Switch>\n        </Container>\n        </>\n      )}\n     />\n    \n    </>\n  );\n}\n\nexport default observer( App);\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useEffect } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nexport default function ScrollToTop() {\r\n  const { pathname } = useLocation();\r\n\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n  }, [pathname]);\r\n\r\n  return null;\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Router } from 'react-router-dom';\nimport \"semantic-ui-css/semantic.min.css\";\nimport \"react-calendar/dist/Calendar.css\";\nimport \"react-toastify/dist/ReactToastify.min.css\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport App from './app/layout/App';\nimport './app/layout/style.css';\nimport { store, StoreContext } from './app/stores/store';\nimport reportWebVitals from './reportWebVitals';\nimport {createBrowserHistory} from \"history\";\nimport ScrollToTop from './app/layout/ScrollToTop';\n\nexport const history = createBrowserHistory();\n\nReactDOM.render(\n <StoreContext.Provider value={store}>\n    <Router history = {history}>\n       <ScrollToTop/>\n       <App />\n    </Router>\n </StoreContext.Provider>\n ,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n "],"sourceRoot":""}