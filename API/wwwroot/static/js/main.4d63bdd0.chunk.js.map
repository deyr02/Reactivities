{"version":3,"sources":["app/models/pagination.ts","app/api/agent.tsx","app/models/activity.ts","app/models/porfile.ts","app/stores/activityStore.ts","app/stores/profileStore.ts","app/stores/userStore.ts","app/stores/store.ts","app/stores/commonStore.ts","app/stores/modalStore.ts","app/stores/commentStore.ts","app/layout/NavBar.tsx","features/activities/dashboard/ActivityFilter.tsx","features/profiles/FollowButton.tsx","features/profiles/ProfileCard.tsx","features/activities/dashboard/ActivityListItemAttendee.tsx","features/activities/dashboard/ActivityListItem.tsx","features/activities/dashboard/ActivityList.tsx","features/activities/dashboard/ActivityListItemPlaceholder.tsx","features/activities/dashboard/ActivityDashboard.tsx","app/common/form/MyTextInput.tsx","features/users/LoginForm.tsx","features/errors/ValidationErrors.tsx","features/users/RegisterForm.tsx","features/home/Home.tsx","app/layout/LoadingComponent.tsx","app/common/form/MyTextArea.tsx","app/common/form/MySelectInput.tsx","app/common/options/CategoryOptions.tsx","app/common/form/MyDateInput.tsx","features/activities/form/ActivityForm.tsx","features/activities/details/ActivityDetailedChat.tsx","features/activities/details/ActivityDetailedHeader.tsx","features/activities/details/ActivityDetailedInfo.tsx","features/activities/details/ActivityDetailedSidebar.tsx","features/activities/details/ActivityDetails.tsx","features/errors/TestErrors.tsx","features/errors/NotFound.tsx","features/errors/ServerError.tsx","app/common/modals/ModalContainer.tsx","features/profiles/ProfileEditForm.tsx","features/profiles/ProfileAbout.tsx","features/profiles/ProfileActivities.tsx","features/profiles/ProfileFollowings.tsx","app/common/imageUpload/PhotoWidgetCropper.tsx","app/common/imageUpload/PhotoWidgetDropZone.tsx","app/common/imageUpload/PhotoUploadWidget.tsx","features/profiles/ProfilePhotos.tsx","features/profiles/ProfileContent.tsx","features/profiles/ProfileHeader.tsx","features/profiles/ProfilePage.tsx","app/layout/PrivateRoute.tsx","app/layout/App.tsx","reportWebVitals.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["PaginatedResult","data","pagination","this","PagingParams","pageNumber","pageSize","axios","defaults","baseURL","process","interceptors","request","use","config","token","store","commonStore","headers","Authorization","response","a","JSON","parse","error","status","toast","method","errors","hasOwnProperty","history","push","modalStateErrors","key","flat","setServerError","Promise","reject","responseBody","requests","url","get","then","body","post","put","delete","agent","Activities","list","params","details","id","create","activity","update","attend","listActivities","username","predicate","Account","current","login","user","register","Profiles","uploadPhoto","file","formData","FormData","append","setMainPhoto","deletePhoto","updateProfile","profile","updateFollowing","listFollowings","Activity","init","Object","assign","ActivityFormValues","undefined","title","date","description","category","city","venue","Profile","displayName","image","ActivityStore","activityRegistry","Map","selectedActivity","editMode","loading","loadingInitial","pagingParams","set","setPagingParams","setPredicate","value","resetPredicate","forEach","loadingActivities","axiosParams","result","setActivity","setPagination","setLoadingInitial","console","log","loadActivity","getActivity","runInAction","userStore","isGoing","attendees","some","isHost","hostUserName","host","find","x","Date","state","createActivity","attendee","newActivity","updateActivity","updatedActivity","deleteActivity","updateAttendance","filter","attedee","cancelActivityToggle","isCancelled","clearSelectedActivity","updateAttendeeFollowing","following","followersCount","makeAutoObservable","reaction","keys","clear","URLSearchParams","toString","toISOString","Array","from","values","sort","b","getTime","entries","activitiesByDate","reduce","activities","format","ProfileStore","loadingProfile","uploading","followings","activeTab","loadingFollowings","userActivities","setActiveTab","loadProfile","photo","photos","isMain","setImage","p","UpdateProfile","setDisplayName","activityStore","followingCount","loadFollowings","loadUserActivities","UserStore","creds","setToken","modalStore","closeModal","logout","window","localStorage","removeItem","getUser","name","getItem","appLoaded","setAppLoaded","setItem","modal","open","openModal","content","profileStore","commentStore","comments","hubConnection","createHubConnection","activityId","HubConnectionBuilder","withUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","LogLevel","Information","build","start","catch","on","comment","createdAt","unshift","stopHubConnection","stop","clearComments","addComment","invoke","StoreContext","createContext","useStore","useContext","observer","Menu","inverted","fixed","Container","Item","as","NavLink","to","header","src","alt","style","marginRight","Button","positive","position","Image","avatar","spaced","Dropdown","pointing","text","Link","icon","onClick","vertical","size","width","marginTop","Header","attached","color","active","has","onChange","Reveal","animated","Content","visible","fluid","hidden","basic","e","preventDefault","handleFollow","Card","Description","str","length","substring","truncate","bio","Icon","borderColor","borderWidth","List","horizontal","map","Popup","hoverable","trigger","circular","bordered","ActivityListItem","Segment","Group","Label","texAligh","marginBottom","clearing","floated","groupedActivities","group","sub","ActivityListItemPlaceholder","Placeholder","minHeight","Line","Paragraph","secondary","disabled","useState","loadingNext","setLoadingNext","useEffect","Grid","Column","pageStart","loadMore","currentPage","hasMore","totalPages","initialLoad","Loader","MyTextInput","props","useField","field","meta","Form","Field","touched","label","initialValues","email","password","onSubmit","setErrors","handleSubmit","isSubmitting","className","autoComplete","textAlign","placeholder","type","render","ValidationErrors","Message","err","i","validationSchema","Yup","required","isValid","dirty","HomePage","isLoggedIn","LoginForm","LoadingComponent","Dimmer","MyTextArea","TextArea","MySelectInput","helpers","Select","clearable","options","d","setValue","onBlur","setTouched","categoryOptions","MyDateInput","selected","useHistory","useParams","nullable","enableReinitialize","uuid","handleFormSubmit","rows","placeholderText","showTimeSelect","timeCaption","dateFormat","border","resetForm","onKeyPress","shiftKey","Comment","Avatar","Author","Metadata","formatDistanceToNow","Text","whiteSpace","activityImageStyle","activityImageTextStyle","bottom","left","height","padding","zIndex","top","ribbon","verticalAlign","relaxed","divided","Extra","TestErrors","widths","baseUrl","primary","NotFound","Inline","message","Modal","onClose","setEditMode","isCurrentUser","Tab","Pane","panes","menuItem","pane","menu","onTabChange","activeIndex","handleTabChange","itemsPerRow","objectFit","Meta","PhotoWidgetCropper","imagePreview","setCropper","initialAspectRatio","aspectRatio","preview","guides","viewMode","autoCropArea","background","onInitialized","cropper","PhotoWidgetDropZone","setFiles","dzStyles","borderRadious","paddingTop","onDrop","useCallback","acceptedFiles","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoUploadWidget","files","revokeObjectURL","overflow","getCroppedCanvas","toBlob","blob","addPhotoMode","setAddPhotoMode","target","setTarget","currentTarget","handleSetMainPhoto","handleDeletePhoto","menuPosition","StatisticGroup","Statistic","Divider","PrivateRoute","Component","component","rest","location","useLocation","finally","hideProgressBar","exact","path","ActivityDashboard","ActivityDetails","ActivityForm","ProfilePage","ServerError","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollToTop","pathname","scrollTo","createBrowserHistory","ReactDOM","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.4d63bdd0.chunk.js","sourcesContent":["export interface Pagination {\r\n    currentPage: number;\r\n    itemsPerPage: number;\r\n    totalItems: number;\r\n    totalPages: number;\r\n}\r\n\r\nexport class PaginatedResult<T> {\r\n    data: T;\r\n    pagination: Pagination;\r\n\r\n    constructor(data: T, pagination: Pagination) {\r\n        this.data = data;\r\n        this.pagination = pagination;\r\n    }\r\n}\r\n\r\nexport class PagingParams {\r\n    pageNumber;\r\n    pageSize;\r\n\r\n    constructor(pageNumber = 1, pageSize = 2) {\r\n        this.pageNumber = pageNumber;\r\n        this.pageSize = pageSize;\r\n    }\r\n}","import axios, { AxiosError, AxiosResponse } from 'axios';\r\nimport { toast } from 'react-toastify';\r\nimport { history } from '../..';\r\nimport {Activity, ActivityFormValues} from '../models/activity';\r\nimport { PaginatedResult } from '../models/pagination';\r\nimport { Photo, Profile, UserActivity } from '../models/porfile';\r\nimport { User, UserFormValues } from '../models/user';\r\nimport { store } from '../stores/store';\r\n\r\nconst sleep = (delay:number) =>{\r\n    return new Promise ((resolve)=>{\r\n        setTimeout(resolve, delay);\r\n    })\r\n}\r\n\r\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\r\naxios.interceptors.request.use(config => {\r\n    const token = store.commonStore.token;\r\n    if(token) config.headers.Authorization = `Bearer ${token}`\r\n    return config;\r\n})\r\naxios.interceptors.response.use(async response =>{\r\n    if(process.env.NODE_ENV === 'development') await sleep(1000);\r\n    \r\n    const pagination = response.headers['pagination'];\r\n    if (pagination) {\r\n        response.data = new PaginatedResult(response.data, JSON.parse(pagination));\r\n        return response as AxiosResponse<PaginatedResult<any>>\r\n    }\r\n    \r\n    return response;\r\n   \r\n}, (error:AxiosError) =>{\r\n    const{data, status, config} = error.response!;\r\n    switch (status){\r\n        case 400:\r\n            if(typeof data === 'string'){\r\n                toast.error(data);\r\n            }\r\n           // toast.error('bad request');\r\n           if(config.method === 'get' && data.errors.hasOwnProperty('id')){\r\n               history.push('/not-found');\r\n           }\r\n            if(data.errors){\r\n                const modalStateErrors = [];\r\n                for(const key in data.errors){\r\n                    if(data.errors[key]){\r\n                        modalStateErrors.push(data.errors[key]);\r\n                    }\r\n                }\r\n                throw modalStateErrors.flat();\r\n            }\r\n            else{\r\n                toast.error(data);\r\n            }\r\n\r\n            break;\r\n        case 401:\r\n            toast.error(\"unauthorised\");\r\n            break;\r\n        case 404:\r\n            history.push(\"/not-found\");\r\n            break;\r\n        case 500:\r\n            //toast.error('server error');\r\n            store.commonStore.setServerError(data);\r\n            history.push('/server-error');\r\n            break;\r\n    }\r\n\r\n    return Promise.reject(error);\r\n})\r\n\r\nconst responseBody = <T,> (response: AxiosResponse<T>) => response.data;\r\nconst requests = {\r\n    get: <T,>(url:string)=> axios.get<T>(url).then(responseBody),\r\n    post:<T,> (url:string, body:{})=> axios.post<T>(url, body).then(responseBody),\r\n    put: <T,>(url:string, body:{})=> axios.put<T>(url, body).then(responseBody),\r\n    del: <T,> (url:string)=> axios.delete<T>(url).then(responseBody),\r\n}\r\nconst Activities = {\r\n    list: (params:URLSearchParams)=> axios.get<PaginatedResult<Activity[]>>('/activities',{params})\r\n        .then(responseBody),\r\n    details: ( id: string) => requests.get<Activity>(`/activities/${id}`),\r\n    create: (activity:ActivityFormValues)=> requests.post<void>('/activities', activity),\r\n    update: (activity:ActivityFormValues)=> requests.put<void>(`/activities/${activity.id}`, activity),\r\n    delete: (id:string)=> requests.del<void>(`/activities/${id}`),\r\n    attend: (id: string) => requests.post<void>(`/activities/${id}/attend`, {}),\r\n    listActivities: (username: string, predicate: string) =>\r\n    requests.get<UserActivity[]>(`/profiles/${username}/activities?predicate=${predicate}`)\r\n}\r\n\r\nconst Account = {\r\n    current: ()=> requests.get<User>('/account'),\r\n    login:(user: UserFormValues)=> requests.post<User>('/account/login', user),\r\n    register: (user: UserFormValues)=> requests.post<User>('/account/register', user)\r\n}\r\n\r\nconst Profiles = {\r\n    get:(username:string) => requests.get<Profile>(`/profiles/${username}`),\r\n    uploadPhoto: (file: Blob)=>{\r\n        let formData = new FormData();\r\n        formData.append('File', file);\r\n        return axios.post<Photo>('photos', formData, {\r\n            headers: {'Content-type':'multipart/form-data'}\r\n        })\r\n    },\r\n    setMainPhoto: (id:string)=> requests.post(`/photos/${id}/setMain`, {}),\r\n    deletePhoto: (id:string)=>requests.del(`/photos/${id}`),\r\n    updateProfile:(profile:Partial<Profile>)=> requests.put('/profiles', profile),\r\n    updateFollowing:(username: string)=>requests.post(`/follow/${username}`, {}),\r\n    listFollowings:(username:string, predicate:string)=> \r\n    requests.get<Profile[]>(`/follow/${username}?predicate=${predicate}`),\r\n    listActivities: (username: string, predicate: string) =>\r\n    requests.get<UserActivity[]>(`/profiles/${username}/activities?predicate=${predicate}`)\r\n\r\n}\r\n\r\n\r\n\r\n\r\nconst agent = {\r\n    Activities,\r\n    Account,\r\n    Profiles\r\n}\r\n\r\nexport default agent;","\r\nimport { Profile } from \"./porfile\";\r\n\r\n  export interface Activity {\r\n        id: string;\r\n        title: string;\r\n        date: Date| null;\r\n        description: string;\r\n        category: string;\r\n        city: string;\r\n        venue: string;\r\n        hostUserName: string;\r\n        isCancelled: boolean;\r\n        isGoing:boolean;\r\n        isHost:boolean;\r\n        host?: Profile;\r\n        attendees:Profile[];\r\n    }\r\n\r\n\r\n    export class Activity implements Activity{\r\n      constructor(init?: ActivityFormValues){\r\n        Object.assign(this, init);\r\n      }\r\n    }\r\n\r\n    export class ActivityFormValues{\r\n      id?:string = undefined;\r\n      title: string = '';\r\n      date: Date| null = null;\r\n      description: string = '';\r\n      category: string = '';\r\n      city: string = '';\r\n      venue: string = '';\r\n\r\n      constructor(activity?: ActivityFormValues){\r\n        if(activity){\r\n          this.id = activity.id;\r\n          this.title = activity.title;\r\n          this.date = activity.date;\r\n          this.description = activity.description;\r\n          this.category = activity.category;\r\n          this.city = activity.city;\r\n          this.venue = activity.venue;\r\n        }\r\n      }\r\n    }","import { User } from \"./user\";\r\n\r\nexport interface Profile{\r\n    username: string;\r\n    displayName: string;\r\n    image?: string;\r\n    bio?:string;\r\n    followersCount:number;\r\n    followingCount:number;\r\n    following:boolean;\r\n    photos?: Photo[];\r\n}\r\n\r\n\r\nexport class Profile implements Profile{\r\n    constructor(user:User){\r\n        this.username = user.username;\r\n        this.displayName = user.displayName;\r\n        this.image = user.image;\r\n    }\r\n}\r\n\r\n\r\nexport interface Photo {\r\n    id: string;\r\n    url:string;\r\n    isMain:boolean;\r\n}\r\n\r\nexport interface UserActivity {\r\n    id: string;\r\n    title: string;\r\n    category: string;\r\n    date: Date;\r\n}","import {  makeAutoObservable, reaction, runInAction} from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { Activity, ActivityFormValues } from \"../models/activity\";\r\n\r\nimport {format} from 'date-fns';\r\nimport { store } from \"./store\";\r\nimport { Profile } from \"../models/porfile\";\r\nimport { Pagination, PagingParams } from \"../models/pagination\";\r\n\r\nexport default class ActivityStore{\r\n    activityRegistry= new Map<string, Activity>();\r\n    selectedActivity: Activity | undefined = undefined;\r\n    editMode = false;\r\n    loading = false;\r\n    loadingInitial = false;\r\n    pagination:Pagination|null = null;\r\n    pagingParams = new PagingParams();\r\n    predicate = new Map().set('all', true);\r\n\r\n    constructor(){\r\n        makeAutoObservable(this)\r\n        reaction(\r\n            () => this.predicate.keys(),\r\n            () => {\r\n                this.pagingParams = new PagingParams();\r\n                this.activityRegistry.clear();\r\n                this.loadingActivities();\r\n            }\r\n        )\r\n    }\r\n\r\n    setPagingParams = (pagingParams : PagingParams)=>{\r\n        this.pagingParams = pagingParams;\r\n    }\r\n\r\n    setPredicate = (predicate: string, value: string | Date) => {\r\n        const resetPredicate = () => {\r\n            this.predicate.forEach((value, key) => {\r\n                if (key !== 'startDate') this.predicate.delete(key);\r\n            })\r\n        }\r\n        switch (predicate) {\r\n            case 'all':\r\n                resetPredicate();\r\n                this.predicate.set('all', true);\r\n                break;\r\n            case 'isGoing':\r\n                resetPredicate();\r\n                this.predicate.set('isGoing', true);\r\n                break;\r\n            case 'isHost':\r\n                resetPredicate();\r\n                this.predicate.set('isHost', true);\r\n                break;\r\n            case 'startDate':\r\n                this.predicate.delete('startDate');\r\n                this.predicate.set('startDate', value);\r\n        }\r\n    } \r\n\r\n    get axiosParams(){\r\n        const params = new URLSearchParams();\r\n        params.append(\"pageNumber\", this.pagingParams.pageNumber.toString());\r\n        params.append('pageSize', this.pagingParams.pageSize.toString());\r\n        this.predicate.forEach((value, key)=>{\r\n            if(key === 'startDate'){\r\n                params.append(key, (value as Date).toISOString())\r\n            }\r\n            else{\r\n                params.append(key, value);\r\n            }\r\n        })\r\n        return params;\r\n    }\r\n\r\n\r\n    get activitiesByDate(){\r\n        return Array.from(this.activityRegistry.values()).sort((a,b)=> a.date!.getTime() - b.date!.getTime());\r\n    }\r\n\r\n    get groupedActivities(){\r\n        return Object.entries(\r\n            this.activitiesByDate.reduce((activities, activity) =>{\r\n                const date = format(activity.date!, 'dd MM yyyy');\r\n                activities[date] = activities[date] ? [...activities[date], activity] : [activity];\r\n                return activities;\r\n            },{} as {[key:string]: Activity[]})\r\n        )\r\n    }\r\n    loadingActivities = async() => {\r\n        this.loadingInitial = true;\r\n        try{\r\n            const result = await agent.Activities.list(this.axiosParams);\r\n            result.data.forEach(activity =>{\r\n                this.setActivity(activity);\r\n            });\r\n            this.setPagination(result.pagination);\r\n            this.setLoadingInitial(false); \r\n           \r\n        }catch(error){\r\n            console.log(error);\r\n            this.setLoadingInitial(false);            \r\n\r\n        }\r\n    }\r\n    setPagination = (pagination:Pagination)=>{\r\n        this.pagination = pagination;\r\n    }\r\n\r\n    loadActivity = async(id:string)=>{\r\n        let activity = this.getActivity(id);\r\n        if(activity){\r\n            this.selectedActivity = activity;\r\n            return activity;\r\n        }\r\n        else{\r\n            this.loadingInitial = true;\r\n            try{\r\n                activity = await agent.Activities.details(id);\r\n                this.setActivity(activity);\r\n                runInAction(()=>{\r\n                     this.selectedActivity = activity;\r\n                });\r\n                this.setLoadingInitial(false);\r\n                return activity;\r\n            }\r\n            catch(error){\r\n                console.log(error);\r\n                this.setLoadingInitial(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    private getActivity = (id:string)=>{\r\n        return this.activityRegistry.get(id);\r\n    }\r\n\r\n    private setActivity = (activity: Activity)=>{\r\n        const user = store.userStore.user;\r\n\r\n        if(user){\r\n            activity.isGoing = activity.attendees?.some(a => a.username === user.username);\r\n            activity.isHost = activity.hostUserName === user.username;\r\n            activity.host = activity.attendees?.find(x=> x.username === activity.hostUserName);\r\n\r\n        }\r\n\r\n\r\n         activity.date = new Date(activity.date!);\r\n        this.activityRegistry.set(activity.id, activity);\r\n    }\r\n\r\n\r\n    setLoadingInitial = (state: boolean)=>{\r\n        this.loadingInitial = state;\r\n    }\r\n\r\n   \r\n\r\n\r\n    createActivity = async (activity:ActivityFormValues)=>{\r\n        const user = store.userStore.user;\r\n        const attendee = new Profile(user!);\r\n        try{\r\n            await agent.Activities.create(activity);\r\n            const newActivity = new Activity(activity);\r\n            newActivity.hostUserName = user!.username;\r\n            newActivity.attendees =[attendee];\r\n            this.setActivity(newActivity);\r\n            runInAction(()=>{\r\n                this.selectedActivity = newActivity;\r\n\r\n            })\r\n        }catch(error){\r\n            console.log(error);\r\n          \r\n        }\r\n        \r\n    }\r\n\r\n    updateActivity= async (activity:ActivityFormValues)=>{\r\n        try{\r\n            await agent.Activities.update(activity);\r\n            runInAction(()=>{\r\n                if(activity.id){\r\n                    let updatedActivity = {...this.getActivity(activity.id), ...activity}\r\n                    this.activityRegistry.set(activity.id, updatedActivity as Activity);\r\n                    this.selectedActivity = updatedActivity as Activity;\r\n                }\r\n               \r\n               \r\n            })\r\n        }\r\n        catch(error){\r\n            console.log(error);\r\n            runInAction(()=>{\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n    deleteActivity = async (id:string)=>{\r\n        this.loading = true;\r\n        try{\r\n            await agent.Activities.delete(id);\r\n            runInAction(()=>{\r\n                this.activityRegistry.delete(id);\r\n                this.loading = false;\r\n\r\n\r\n            })\r\n\r\n        }catch(error){\r\n            console.log(error);\r\n            runInAction(()=>{\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    updateAttendance = async () =>{\r\n        const user = store.userStore.user;\r\n        this.loading = true;\r\n\r\n        try{\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(()=>{\r\n                if(this.selectedActivity?.isGoing){\r\n                    this.selectedActivity.attendees = this.selectedActivity.attendees?.filter(a => a.username !== user?.username);\r\n                    this.selectedActivity.isGoing = false;\r\n                }\r\n                else{\r\n                    const attedee = new Profile(user!);\r\n                    this.selectedActivity?.attendees?.push(attedee);\r\n                    this.selectedActivity!.isGoing = true;\r\n                }\r\n\r\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!)\r\n            })\r\n        }\r\n        catch (error){\r\n            console.log(error)\r\n        }\r\n        finally{\r\n            runInAction(()=> this.loading = false);\r\n        }\r\n    }\r\n\r\n    cancelActivityToggle = async ()=> {\r\n        this.loading = true;\r\n\r\n        try{\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(()=>{\r\n                this.selectedActivity!.isCancelled = !this.selectedActivity!.isCancelled;\r\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!)\r\n            })\r\n\r\n        }\r\n        catch(error){\r\n            console.log(error);\r\n        }\r\n        finally{\r\n            runInAction(()=> this.loading = false);\r\n        }\r\n    }\r\n\r\n    clearSelectedActivity = () => {\r\n        this.selectedActivity = undefined;\r\n    }\r\n\r\n    updateAttendeeFollowing = (username: string)=>{\r\n        this.activityRegistry.forEach(activity =>{\r\n            activity.attendees.forEach(attendee =>{\r\n                if(attendee.username === username){\r\n                    attendee.following ? attendee.followersCount-- : attendee.followersCount++;\r\n                    attendee.following = !attendee.following;\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n}","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { Photo, Profile, UserActivity } from \"../models/porfile\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class ProfileStore{\r\n    profile: Profile | null = null;\r\n    loadingProfile = false;\r\n    uploading = false;\r\n    loading = false;\r\n    followings: Profile[] = [];\r\n    activeTab = 0;\r\n\r\n    loadingFollowings: boolean = false;\r\n    userActivities: UserActivity[] = [];\r\n    loadingActivities = false;\r\n\r\n    constructor(){\r\n        makeAutoObservable(this);\r\n        reaction (\r\n            ()=> this.activeTab,\r\n            activeTab => {\r\n                if(activeTab ===3 || activeTab === 4 ){\r\n                    const predicate =  activeTab ===3? \"followers\": \"followings\";\r\n                    this.loadFollowings(predicate);\r\n                }\r\n                else{\r\n                    this.followings = [];\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    setActiveTab = (activeTab: any)=>{\r\n        this.activeTab = activeTab;\r\n    }\r\n\r\n\r\n    get isCurrentUser(){\r\n        if(store.userStore.user && this.profile){\r\n            return store.userStore.user.username === this.profile.username;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    loadProfile = async(username: string)=>{\r\n        this.loadingProfile = true;\r\n        try{\r\n            const profile = await agent.Profiles.get(username);\r\n            runInAction(()=>{\r\n                this.profile = profile;\r\n                this.loadingProfile = false;\r\n            })\r\n        }\r\n        catch(error){\r\n            console.log(error);\r\n            runInAction(()=> this.loadingProfile= false);   \r\n        }\r\n    }\r\n\r\n    uploadPhoto = async (file:Blob)=>{\r\n        this.uploading = true;\r\n        try{\r\n            const response = await agent.Profiles.uploadPhoto(file);\r\n            const photo = response.data;\r\n            runInAction(()=>{\r\n                if(this.profile){\r\n                    this.profile.photos?.push(photo);\r\n                    if(photo.isMain && store.userStore.user){\r\n                        store.userStore.setImage(photo.url);\r\n                        this.profile.image = photo.url;\r\n                    }\r\n                }\r\n                this.uploading = false;\r\n            })\r\n        }\r\n        catch(error){\r\n            console.log(error);\r\n            runInAction(()=>this.uploading = false);\r\n        }\r\n    }\r\n\r\n    setMainPhoto = async (photo:Photo) => {\r\n        this.loading = true;\r\n        try{\r\n            await agent.Profiles.setMainPhoto(photo.id);\r\n            store.userStore.setImage(photo.url);\r\n            runInAction(()=>{\r\n                if(this.profile && this.profile.photos){\r\n                    this.profile.photos.find(p=> p.isMain)!.isMain = false;\r\n                    this.profile.photos.find(p=> p.id===photo.id)!.isMain = true;\r\n                    this.profile.image = photo.url;\r\n                    this.loading = false;\r\n                }\r\n            })\r\n\r\n        }\r\n        catch(error){\r\n            console.log(error);\r\n            runInAction(()=> this.loading = false)\r\n        }\r\n    }\r\n\r\n    deletePhoto = async(photo: Photo)=>{\r\n        this.loading = true;\r\n        try{\r\n            await agent.Profiles.deletePhoto(photo.id);\r\n            runInAction(()=>{\r\n                if(this.profile){\r\n                    this.profile.photos = this.profile.photos?.filter(p=> p.id !== photo.id);\r\n                    this.loading = false;\r\n                }\r\n            })\r\n\r\n        }\r\n        catch(error){\r\n            console.log(error);\r\n            runInAction(()=> this.loading= false)\r\n        }\r\n    }\r\n\r\n    UpdateProfile = async (profile: Partial<Profile>) => {\r\n        this.loading = true;\r\n        try{\r\n            await agent.Profiles.updateProfile(profile);\r\n            runInAction(()=>{\r\n                if(profile.displayName && profile.displayName !== store.userStore.user?.displayName){\r\n                    store.userStore.setDisplayName(profile.displayName);\r\n                }\r\n                this.profile = {...this.profile, ...profile as Profile};\r\n                this.loading = false;\r\n            })\r\n\r\n        }\r\n        catch(error){\r\n            console.log(error);\r\n            runInAction(()=> this.loading = false);\r\n        }\r\n    }\r\n\r\n\r\n    updateFollowing = async (username:string, following:boolean)=>{\r\n        this.loading = true;\r\n        try{\r\n            await agent.Profiles.updateFollowing(username);\r\n            store.activityStore.updateAttendeeFollowing(username);\r\n            runInAction(()=>{\r\n                if(this.profile && this.profile.username !== store.userStore.user?.username && this.profile.username === username){\r\n                    following? this.profile.followersCount ++: this.profile.followersCount --;\r\n                    this.profile.following = !this.profile.following;\r\n                }\r\n                if(this.profile && this.profile.username === store.userStore.user?.username)\r\n                {\r\n                    following? this.profile.followingCount ++: this.profile.followingCount --;\r\n\r\n                }\r\n\r\n                this.followings.forEach(profile =>{\r\n                    if(profile.username === username){\r\n                        profile.following?profile.followersCount--: profile.followersCount++;\r\n                        profile.following = !profile.following;\r\n                    }\r\n                })\r\n                this.loading = false;\r\n            })\r\n\r\n        }\r\n        catch(error){\r\n            console.log(error);\r\n            runInAction(()=> this.loading = false);\r\n        }\r\n    }\r\n\r\n     loadFollowings = async (predicate: string) => {\r\n        this.loadingFollowings = true;\r\n        try {\r\n            const followings = await agent.Profiles.listFollowings(this.profile!.username, predicate);\r\n            runInAction(() => {\r\n                this.followings = followings;\r\n                this.loadingFollowings = false;\r\n            })\r\n        } catch (error) {\r\n            runInAction(() => this.loadingFollowings = false);\r\n        }\r\n    }\r\n\r\n    loadUserActivities = async (username: string, predicate?: string) => {\r\n        this.loadingActivities = true;\r\n        try {\r\n            const activities = await agent.Profiles.listActivities(username, predicate!);\r\n            runInAction(() => {\r\n                this.userActivities = activities;\r\n                this.loadingActivities = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loadingActivities = false;\r\n            })\r\n        }\r\n    }\r\n}","import { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { history } from \"../..\";\r\nimport agent from \"../api/agent\";\r\nimport { User, UserFormValues } from \"../models/user\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class UserStore{\r\n    user: User| null = null;\r\n\r\n    constructor(){\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    get isLoggedIn(){\r\n        return !!this.user;\r\n    }\r\n\r\n    login  = async(creds: UserFormValues)=>{\r\n        try{\r\n            const user = await agent.Account.login(creds);\r\n            store.commonStore.setToken(user.token);\r\n            runInAction(()=>this.user = user);\r\n            history.push('/activities');\r\n            store.modalStore.closeModal();\r\n        }\r\n        catch (error){\r\n            throw error;\r\n        }\r\n\r\n\r\n    }\r\n\r\n    logout = () =>{\r\n        store.commonStore.setToken(null);\r\n        window.localStorage.removeItem('jwt');\r\n        this.user = null;\r\n        history.push('/');\r\n\r\n    }\r\n\r\n    getUser = async () =>{\r\n        try{\r\n            const user = await agent.Account.current();\r\n            runInAction(()=>this.user = user);\r\n        }\r\n        catch(error){\r\n            console.log(error);\r\n        }\r\n        \r\n    }\r\n\r\n    register = async (creds: UserFormValues)=>{\r\n        try{\r\n            const user = await agent.Account.register(creds);\r\n            store.commonStore.setToken(user.token);\r\n            runInAction(()=>this.user = user);\r\n            history.push('/activities');\r\n            store.modalStore.closeModal();\r\n        }\r\n        catch (error){\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    setImage = (image: string)=>{\r\n        if(this.user) this.user.image = image;\r\n    }\r\n\r\n    setDisplayName = (name:string)=>{\r\n        if(this.user) this.user.displayName = name;\r\n    }\r\n\r\n}","import { createContext, useContext } from \"react\";\r\nimport ActivityStore from \"./activityStore\";\r\nimport CommentStore from \"./commentStore\";\r\nimport CommonStore from \"./commonStore\";\r\nimport ModalStore from \"./modalStore\";\r\nimport ProfileStore from \"./profileStore\";\r\nimport UserStore from \"./userStore\";\r\n\r\ninterface Store{\r\n    activityStore: ActivityStore;\r\n    commonStore: CommonStore;\r\n    userStore: UserStore;\r\n    modalStore: ModalStore;\r\n    profileStore: ProfileStore;\r\n    commentStore: CommentStore;\r\n}\r\n\r\nexport const store: Store = {\r\n    activityStore : new ActivityStore(),\r\n    commonStore: new CommonStore(),\r\n    userStore: new UserStore(),\r\n    modalStore: new ModalStore(),\r\n    profileStore: new ProfileStore(),\r\n    commentStore:new CommentStore(),\r\n}\r\n\r\nexport const StoreContext = createContext(store);\r\n\r\nexport function useStore(){\r\n    return useContext(StoreContext);\r\n}","import { makeAutoObservable, reaction } from \"mobx\";\r\nimport { ServerError } from \"../models/serverError\";\r\n\r\nexport default class CommonStore{\r\n    error: ServerError|null = null;\r\n    token:string|null = window.localStorage.getItem('jwt');\r\n    appLoaded = false;\r\n\r\n    constructor(){\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            ()=>this.token,\r\n            token =>{\r\n                if(token){\r\n                    window.localStorage.setItem('jwt', token)\r\n                }else{\r\n                    window.localStorage.removeItem('jwt')\r\n                }\r\n            }\r\n        )\r\n\r\n\r\n    }\r\n    setServerError = (error:ServerError)=> {\r\n        this.error = error;\r\n    }\r\n\r\n    setToken = (token:string|null)=>{\r\n        this.token = token;\r\n    }\r\n    setAppLoaded = () => {\r\n        this.appLoaded = true;\r\n    }\r\n\r\n}","import { makeAutoObservable } from \"mobx\"\r\n\r\ninterface Modal{\r\n    open: boolean,\r\n    body: JSX.Element | null\r\n}\r\n\r\n\r\nexport default class ModalStore{\r\n    modal:Modal = {\r\n        open: false,\r\n        body: null\r\n    }\r\n\r\n\r\n    constructor(){\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    openModal = (content:JSX.Element)=> {\r\n        this.modal.open = true;\r\n        this.modal.body = content;\r\n    }\r\n\r\n    closeModal = ()=>{\r\n        this.modal.open = false;\r\n        this.modal.body = null;\r\n    }\r\n}","import { HubConnection, HubConnectionBuilder, LogLevel } from \"@microsoft/signalr\";\r\nimport { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { ChatComment } from \"../models/comment\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class CommentStore{\r\n    comments:ChatComment[] = [];\r\n    hubConnection: HubConnection|null = null;\r\n\r\n    constructor(){\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n\r\n    createHubConnection = (activityId: string) => {\r\n        if (store.activityStore.selectedActivity) {\r\n            this.hubConnection = new HubConnectionBuilder()\r\n                .withUrl( process.env.REACT_APP_CHAT_URL + '?activityId=' + activityId, {\r\n                    accessTokenFactory: () => store.userStore.user?.token!\r\n                })\r\n                .withAutomaticReconnect()\r\n                .configureLogging(LogLevel.Information)\r\n                .build();\r\n\r\n            this.hubConnection?.start().catch(error => console.log('Error establishing the connection: ', error));\r\n\r\n            this.hubConnection?.on('LoadComments', (comments: ChatComment[]) => {\r\n                runInAction(()=>{   \r\n                    comments.forEach(comment =>{\r\n                        comment.createdAt = new Date(comment.createdAt+ 'Z');\r\n                    })\r\n                    this.comments = comments;\r\n                }); \r\n            })\r\n\r\n            this.hubConnection?.on('ReceivedComment', (comment: ChatComment) => {\r\n                runInAction(()=>{\r\n                    comment.createdAt = new Date(comment.createdAt);\r\n                    this.comments.unshift(comment)\r\n                })\r\n            })\r\n        }\r\n    }\r\n\r\n    stopHubConnection = () => {\r\n        this.hubConnection?.stop().catch(error => console.log('Error stopping connection: ', error));\r\n    }\r\n\r\n    clearComments = () => {\r\n        this.comments = [];\r\n        this.stopHubConnection();\r\n    }\r\n\r\n    addComment = async (values: any) => {\r\n        values.activityId = store.activityStore.selectedActivity?.id;\r\n        try {\r\n            await this.hubConnection?.invoke('SendComment', values);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n}","import { observer } from 'mobx-react-lite';\r\nimport  React from 'react';\r\nimport { Link, NavLink } from 'react-router-dom';\r\nimport { Button, Container, Dropdown, Image, Menu } from 'semantic-ui-react';\r\nimport { useStore } from '../stores/store';\r\n\r\n\r\nexport default observer( function NavBar(){\r\n    const{userStore: {user, logout}} = useStore();\r\n    return(\r\n        <Menu inverted fixed='top'>\r\n            <Container>\r\n                <Menu.Item as={NavLink} to='/' header>\r\n                    <img src = \"/assets/logo.png\" alt = \"logo\" style={{marginRight:'10px'}}/>\r\n                    Reactivities\r\n                </Menu.Item>\r\n                <Menu.Item as={NavLink} to='/activities' name=\"Activities\"/>\r\n                <Menu.Item as={NavLink} to='/errors' name=\"Errors\"/>\r\n                <Menu.Item>\r\n                    <Button as={NavLink} to='/createActivity' positive content=\"Create Activity\"/>\r\n                </Menu.Item>\r\n\r\n                <Menu.Item position = 'right'>\r\n                    <Image src= {user?.image || '/assets/user.png'} avatar spaced= 'right' />\r\n                    <Dropdown pointing ='top left' text= {user?.displayName}>\r\n                        <Dropdown.Menu>\r\n                            <Dropdown.Item as = {Link} to={`/profile/${user?.username}`} text='My Profile' icon = 'user'/>\r\n                            <Dropdown.Item onClick={logout} text=\"Log out\" icon=\"power\"/>\r\n                        </Dropdown.Menu>\r\n                        \r\n                    </Dropdown>\r\n                </Menu.Item>\r\n            </Container>\r\n        </Menu>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport Calendar from 'react-calendar';\r\nimport { Header, Menu } from 'semantic-ui-react';\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\nexport default observer ( function ActivityFilter(){\r\n    const {activityStore:{predicate, setPredicate}} = useStore();\r\n    return(\r\n        <>\r\n            <Menu vertical size='large' style={{width:'100%', marginTop: 25}}> \r\n                <Header icon='filter' attached color='teal' content='Fileter'></Header>\r\n                <Menu.Item \r\n                    content='All Activities'\r\n                    active={predicate.has('all')}\r\n                    onClick={()=> setPredicate('all', 'true')}\r\n                />\r\n                <Menu.Item \r\n                    content=\"I'm going\"\r\n                    active={predicate.has('isGoing')}\r\n                    onClick={()=> setPredicate('isGoing', 'true')}\r\n                />\r\n                <Menu.Item \r\n                    content=\"I'm hosting\"\r\n                    active={predicate.has('isHost')}\r\n                    onClick={()=> setPredicate('isHost', 'true')}\r\n                />\r\n            </Menu>\r\n            <Header/>\r\n            <Calendar\r\n                onChange = {(date)=> setPredicate('startDate', date as Date)}\r\n                value = {predicate.get(\"startDate\") || new Date()}\r\n\r\n\r\n            />\r\n        </>\r\n        \r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport { SyntheticEvent } from \"react\";\r\nimport { Button, Reveal } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/models/porfile\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\ninterface Props{\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function FollowButton({profile}:Props){\r\n    const{profileStore, userStore} = useStore();\r\n    const{updateFollowing, loading}= profileStore;\r\n\r\n    if(userStore.user?.username === profile.username) return null;\r\n\r\n    function handleFollow(e:SyntheticEvent, username:string){\r\n        e.preventDefault();\r\n        profile.following ? updateFollowing(username, false): updateFollowing(username, true);\r\n    }\r\n    return(\r\n        <Reveal animated= 'move'>\r\n            <Reveal.Content visible style= {{width:'100%'}}>\r\n                <Button \r\n                    fluid \r\n                    color='teal' \r\n                    content= { profile.following?'Following': 'Not Following'}\r\n\r\n                />\r\n            </Reveal.Content>\r\n\r\n                <Reveal.Content hidden style= {{width:'100%'}}>\r\n                <Button \r\n                    fluid \r\n                    basic\r\n                    color={profile.following? \"red\": \"green\"} \r\n                    content= {profile.following?\"Unfollow\": \"Follow\"}\r\n                    loading = {loading}\r\n                    onClick ={(e)=> handleFollow(e, profile.username)}\r\n                />\r\n            </Reveal.Content>\r\n        </Reveal>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport { Link } from 'react-router-dom';\r\nimport { Card, Icon, Image } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/porfile';\r\nimport FollowButton from './FollowButton';\r\n\r\ninterface Props{\r\n    profile: Profile;\r\n}\r\n\r\n\r\n\r\nexport default observer(function ProfileCard({profile}:Props){\r\n   \r\n   function truncate(str: string | undefined){\r\n       if(str){\r\n           return str.length >40 ? str.substring(0, 37) + '...' : str;\r\n       }\r\n   }\r\n   \r\n    return(\r\n        <Card as= {Link} to ={`/profile/${profile.username}`}>\r\n            <Image src= {profile.image || '/assets/user.png'} />\r\n            <Card.Content>\r\n                <Card.Header>{profile.displayName}</Card.Header>\r\n                <Card.Description>{truncate(profile.bio)}</Card.Description>\r\n            </Card.Content>\r\n            <Card.Content>\r\n                <Icon name='user'/>\r\n                {profile.followersCount} followers\r\n            </Card.Content>\r\n             <FollowButton profile= {profile}/>\r\n            \r\n        </Card>\r\n    )\r\n\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Image, List, Popup } from 'semantic-ui-react';\r\nimport { Profile } from '../../../app/models/porfile';\r\nimport ProfileCard from '../../profiles/ProfileCard';\r\n\r\n\r\ninterface Props{\r\n    attendees: Profile[];\r\n}\r\n\r\nexport default observer( function ActivityListItemAttendee({attendees}: Props){\r\n    const style = {\r\n        borderColor: 'orange',\r\n        borderWidth:3\r\n    }\r\n    return(\r\n        <List horizontal>\r\n            {attendees.map(attendee => (\r\n                <Popup\r\n                    hoverable\r\n                    key= {attendee.username}\r\n                    trigger={\r\n                        <List.Item as={Link} to ={`/profile/${attendee.username}`} key={attendee.username}>\r\n                            <Image \r\n                                size='mini' \r\n                                circular  \r\n                                src={ attendee.image || '/assets/user.png'}\r\n                                bordered\r\n                                style = {attendee.following ? style : null}\r\n                            />\r\n                        </List.Item>\r\n                    }\r\n                >\r\n                    <Popup.Content>\r\n                        <ProfileCard profile= {attendee} />\r\n                    </Popup.Content>\r\n\r\n                </Popup>\r\n               \r\n\r\n            ))}\r\n           \r\n        </List>\r\n\r\n    )\r\n})","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Icon, Item, Label, Segment } from 'semantic-ui-react';\r\nimport { Activity } from '../../../app/models/activity';\r\n\r\nimport {format} from 'date-fns';\r\nimport ActivityListItemAttendee from './ActivityListItemAttendee';\r\n\r\ninterface Props{\r\n    activity: Activity\r\n}\r\n\r\nexport default function ActivityListItem({activity}:Props){\r\n\r\n   \r\n\r\n    return (\r\n        <Segment.Group>\r\n            <Segment>\r\n                {activity.isCancelled && (\r\n                    <Label \r\n                        attached = \"top\"\r\n                        color = \"red\"\r\n                        content = \"Cancelled\"\r\n                        style = {{texAligh:\"center\"}}\r\n                    />\r\n                )}\r\n                <Item.Group>\r\n                    <Item>\r\n                        <Item.Image  style = {{marginBottom: 3}}  size ='tiny' circular src= {activity.host?.image ||'assets/user.png'} />\r\n                        <Item.Content>\r\n                            <Item.Header as= {Link} to={`/activities/${activity.id}`}>\r\n                                {activity.title}\r\n                            </Item.Header>\r\n                             <Item.Description>\r\n                                Hosted by  <Link to={`/profile/${activity.hostUserName}`}>{ activity.host?.displayName}</Link> \r\n                            </Item.Description>\r\n                            {activity.isHost && (\r\n                                <Item.Description>\r\n                                    <Label basic color='orange'>\r\n                                        You are hosting this activity\r\n                                    </Label>\r\n                                </Item.Description>\r\n                            )}\r\n                            {activity.isGoing && !activity.isHost && (\r\n                                <Item.Description>\r\n                                    <Label basic color='green'>\r\n                                        You are going to this activity\r\n                                    </Label>\r\n                                </Item.Description>\r\n                            )}\r\n                        </Item.Content>\r\n                       \r\n                    </Item>\r\n                </Item.Group>\r\n            </Segment>\r\n            <Segment>\r\n                <span>\r\n                    <Icon name = 'clock'/> {format( activity.date!, 'dd MMMM yyyy h:mm aa')}\r\n                    <Icon name = 'marker'/> {activity.venue}\r\n                </span>\r\n            </Segment>\r\n            <Segment>\r\n                <ActivityListItemAttendee attendees = {activity.attendees!} />\r\n            </Segment>\r\n            <Segment clearing>\r\n                <span>{activity.description}</span>\r\n                <Button\r\n                    as = {Link}\r\n                    to = {`/activities/${activity.id}`}\r\n                    color=\"teal\"\r\n                    content = \"View\"\r\n                    floated='right'\r\n                />\r\n            </Segment>\r\n        </Segment.Group>\r\n\r\n\r\n        // <Item key={activity.id}>\r\n        //     <Item.Content>\r\n        //         <Item.Header as= 'a'>{activity.title} </Item.Header>\r\n        //         <Item.Meta>{activity.date}</Item.Meta>\r\n        //         <Item.Description>\r\n        //             <div>{activity.description}</div>\r\n        //             <div>{activity.city}, {activity.venue}</div>\r\n        //         </Item.Description>\r\n        //         <Item.Extra>\r\n        //             <Button as={Link} to={`/activities/${activity.id}`} floated='right' content= \"View\" color=\"blue\"/>\r\n        //             <Button\r\n        //                 name = {activity.id}\r\n        //                 loading={loading && target === activity.id} \r\n        //                 onClick={(e)=> handlActivityDelete(e, activity.id)} \r\n        //                 floated='right' \r\n        //                 content= \"Delete\" \r\n        //                 color=\"red\"\r\n        //             />\r\n        //             <Label basic content={activity.category} />\r\n        //         </Item.Extra>\r\n        //     </Item.Content>\r\n        // </Item> \r\n    )\r\n}","import { observer } from 'mobx-react-lite';\r\nimport { Fragment } from 'react';\r\nimport {Header} from 'semantic-ui-react';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport ActivityListItem from './ActivityListItem';\r\n\r\nexport default observer( function ActivityList(){\r\n    const{activityStore} = useStore();\r\n    const{groupedActivities}= activityStore\r\n   \r\n\r\n    return(\r\n        <>\r\n        {groupedActivities.map(([group, activities])=>(\r\n            <Fragment key= {group}>\r\n                <Header sub color='teal'>\r\n                    {group}\r\n                </Header>\r\n                \r\n                {activities.map(activity =>(\r\n                    <ActivityListItem key={activity.id} activity ={activity}/>\r\n                ))}\r\n               \r\n            </Fragment>\r\n        ))}\r\n        </>\r\n     \r\n    )\r\n})","import React, { Fragment } from 'react';\r\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\r\n\r\nexport default function ActivityListItemPlaceholder() {\r\n    return (\r\n        <Fragment>\r\n            <Placeholder fluid style={{ marginTop: 25 }}>\r\n                <Segment.Group>\r\n                    <Segment style={{ minHeight: 110 }}>\r\n                        <Placeholder>\r\n                            <Placeholder.Header image>\r\n                                <Placeholder.Line />\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Header>\r\n                            <Placeholder.Paragraph>\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Paragraph>\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment>\r\n                        <Placeholder>\r\n                            <Placeholder.Line />\r\n                            <Placeholder.Line />\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment secondary style={{ minHeight: 70 }} />\r\n                    <Segment clearing>\r\n                        <Button disabled color='blue' floated='right' content='View' />\r\n                    </Segment>\r\n                </Segment.Group>\r\n            </Placeholder>\r\n        </Fragment>\r\n    );\r\n}; ","import { observer } from 'mobx-react-lite';\r\nimport { useEffect, useState } from 'react';\r\nimport InfiniteScroll from 'react-infinite-scroller';\r\nimport { Grid, Loader } from 'semantic-ui-react';\r\nimport { PagingParams } from '../../../app/models/pagination';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport ActivityFilter from './ActivityFilter';\r\nimport ActivityList from './ActivityList';\r\nimport ActivityListItemPlaceholder from './ActivityListItemPlaceholder';\r\n\r\n\r\n\r\n\r\nexport default observer( function ActivityDashboard(){\r\n    const {activityStore} = useStore();\r\n    const {loadingActivities, activityRegistry, setPagingParams, pagination} = activityStore;\r\n    const[loadingNext, setLoadingNext] = useState(false);\r\n\r\n    function handleGetNext(){\r\n        setLoadingNext(true);\r\n        setPagingParams(new PagingParams(pagination!.currentPage+1))\r\n        loadingActivities().then(()=>setLoadingNext(false));\r\n    }\r\n\r\n    useEffect(()=>{\r\n    if(activityRegistry.size <=1) loadingActivities();\r\n    }, [activityRegistry.size, loadingActivities])\r\n    \r\n\r\n    return(\r\n        <Grid>\r\n            <Grid.Column width = '10'>\r\n                {activityStore.loadingInitial && !loadingNext ?(\r\n                    <>\r\n                        <ActivityListItemPlaceholder/>\r\n                        <ActivityListItemPlaceholder/>\r\n                    </>\r\n                ):(\r\n                    <InfiniteScroll\r\n                        pageStart={0}\r\n                        loadMore= {handleGetNext}\r\n                        hasMore = {!loadingNext && !!pagination && pagination.currentPage < pagination.totalPages}\r\n                        initialLoad= {false}\r\n                    >\r\n                        <ActivityList />\r\n                    </InfiniteScroll>\r\n                )}\r\n            \r\n            </Grid.Column>\r\n            <Grid.Column width=\"6\">\r\n                <ActivityFilter/>\r\n            </Grid.Column>\r\n            <Grid.Column width ={10}>\r\n                <Loader active = {loadingNext} />\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import { useField } from 'formik';\r\nimport React from 'react';\r\nimport { Form, Label } from 'semantic-ui-react';\r\n\r\ninterface Props{\r\n    placeholder:string,\r\n    name : string,\r\n    type?: string,\r\n    label?: string,\r\n}\r\n\r\nexport default function MyTextInput(props:Props){\r\n\r\n    const [field, meta] = useField(props.name);\r\n    return(\r\n        <Form.Field error = {meta.touched && !!meta.error }>\r\n            <label>{props.label}</label>\r\n            <input {...field} {...props}/>\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ): null}\r\n        </Form.Field>\r\n    )\r\n}","import { ErrorMessage, Form, Formik } from 'formik';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Button, Header, Label } from 'semantic-ui-react';\r\nimport MyTextInput from '../../app/common/form/MyTextInput';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\nexport default observer( function Loginform(){\r\n    const {userStore} = useStore();\r\n    return(\r\n        <Formik\r\n            initialValues = {{email:'', password:'', error: null}}\r\n            onSubmit = {(values, {setErrors}) => userStore.login(values).catch(error=> \r\n                setErrors({error: \"Invalid Email or password\"}))}\r\n        >\r\n            {({handleSubmit, isSubmitting, errors})=>(\r\n                <Form\r\n                    className = 'ui form'\r\n                    onSubmit = {handleSubmit}\r\n                    autoComplete= \"off\"\r\n                >\r\n                    <Header as='h2' content='Login to Reactivities' color='teal' textAlign='center'/>\r\n\r\n                    <MyTextInput name= 'email' placeholder = \"Email\"/>\r\n                    <MyTextInput name= 'password' placeholder = \"Password\" type='password'/>\r\n                    <ErrorMessage\r\n                        name = 'error'\r\n                        render = {()=>\r\n                            <Label style={{marginBottom:10}} basic color='red' content = {errors.error} />\r\n                        }\r\n                    />\r\n\r\n                    <Button loading = {isSubmitting} positive content='Login' type = 'submit' fluid /> \r\n\r\n                </Form>\r\n            )}\r\n\r\n\r\n        </Formik>\r\n\r\n    )\r\n})","import React from 'react';\r\nimport { Message } from 'semantic-ui-react';\r\n\r\ninterface Props{\r\n    errors: any;\r\n}\r\n\r\nexport default function ValidationErrors({errors}:Props){\r\n    return(\r\n        <Message error>\r\n            {\r\n               errors &&(\r\n                   <Message.List>\r\n                       {errors.map((err:any, i:any)=>(\r\n                           <Message.Item key={i}>{err}</Message.Item>\r\n                       ))}\r\n                   </Message.List>\r\n               ) \r\n            }\r\n\r\n        </Message>\r\n    )\r\n}","import { ErrorMessage, Form, Formik } from 'formik';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Button, Header } from 'semantic-ui-react';\r\nimport MyTextInput from '../../app/common/form/MyTextInput';\r\nimport { useStore } from '../../app/stores/store';\r\nimport * as Yup from \"yup\";\r\nimport ValidationErrors from '../errors/ValidationErrors';\r\n\r\n\r\nexport default observer( function RegisterForm(){\r\n    const {userStore} = useStore();\r\n    return(\r\n        <Formik\r\n            initialValues = {{displayName:'', username:'', email:'', password:'', error: null}}\r\n            onSubmit = {(values, {setErrors}) => userStore.register(values).catch(error=> \r\n                setErrors({error})\r\n                )}\r\n            validationSchema= {Yup.object({\r\n                displayName: Yup.string().required(),\r\n                username: Yup.string().required(),\r\n                email: Yup.string().required().email(),\r\n                password: Yup.string().required(),\r\n            })}\r\n        >\r\n            {({handleSubmit, isSubmitting, errors, isValid, dirty})=>(\r\n                <Form\r\n                    className = 'ui form error'\r\n                    onSubmit = {handleSubmit}\r\n                    autoComplete= \"off\"\r\n                >\r\n                    <Header as='h2' content='Sign Up to Reactivities' color='teal' textAlign='center'/>\r\n\r\n                    <MyTextInput name= 'displayName' placeholder = \"Display Name\"/>\r\n                    <MyTextInput name= 'username' placeholder = \"Username\"/>\r\n                    <MyTextInput name= 'email' placeholder = \"Email\"/>\r\n                    <MyTextInput name= 'password' placeholder = \"Password\" type='password'/>\r\n                    <ErrorMessage\r\n                        name = 'error'\r\n                        render = {()=>\r\n                            <ValidationErrors errors = {errors.error} />\r\n                        }\r\n                    />\r\n\r\n                    <Button \r\n                        disabled={!isValid || !dirty || isSubmitting} \r\n                        loading = {isSubmitting} \r\n                        positive \r\n                        content='Register' \r\n                        type = 'submit' \r\n                        fluid \r\n                    /> \r\n\r\n                </Form>\r\n            )}\r\n\r\n\r\n        </Formik>\r\n\r\n    )\r\n})","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Container, Header, Segment, Image, Button } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store';\r\nimport LoginForm from '../users/LoginForm';\r\nimport RegisterForm from '../users/RegisterForm';\r\n\r\nexport default function HomePage(){\r\n    const{userStore, modalStore} = useStore();\r\n    return (\r\n        <Segment inverted textAlign='center' vertical className='masthead' >\r\n            <Container text>\r\n                <Header as=\"h1\" inverted>\r\n                    <Image size='massive' src = '/assets/logo.png' alt= 'logo' style= {{marginBottom:12}}/>\r\n                    Reactivities\r\n                </Header>\r\n                {\r\n                    userStore.isLoggedIn?(\r\n                        <>\r\n                        <Header as=\"h2\" inverted content= \"Welcome to Reactivities\"/>\r\n                        <Button as={Link} to='/activities' size='huge' inverted>\r\n                            Go to activities\r\n                        </Button>\r\n                        </>\r\n                        \r\n                    ):(\r\n                        <>\r\n                            <Button onClick={()=>modalStore.openModal(<LoginForm/>)} size='huge' inverted>\r\n                                Login!\r\n                            </Button>\r\n                            <Button onClick={()=>modalStore.openModal(<RegisterForm/>)} size='huge' inverted>\r\n                                Register\r\n                            </Button>\r\n                        </>\r\n                        \r\n                    )\r\n                }\r\n\r\n            </Container>\r\n        </Segment>\r\n    )\r\n}","import React from \"react\"\r\nimport { Dimmer, Loader } from \"semantic-ui-react\"\r\n\r\ninterface Props {\r\n    inverted?: boolean;\r\n    content?: string;\r\n}\r\n\r\n\r\nexport default function LoadingComponent({inverted = true, content = \"loading....\"}: Props){\r\n    return(\r\n        <Dimmer active={true} inverted = {inverted}>\r\n            <Loader content={content}></Loader>\r\n        </Dimmer>\r\n    )\r\n}","\r\nimport { useField } from \"formik\";\r\nimport React from \"react\";\r\nimport { Form, Label, TextArea } from \"semantic-ui-react\";\r\n\r\ninterface Props{\r\n    placeholder:string,\r\n    name : string,\r\n    rows: number,\r\n    label?: string,\r\n}\r\n\r\n\r\nexport default function MyTextArea(props:Props){\r\n\r\n    const[field, meta] = useField(props.name);\r\n\r\n    return(\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <TextArea {...field} {...props} />\r\n            {\r\n                meta.touched && meta.error ? (\r\n                    <Label basic color='red'>{meta.error}</Label>\r\n                ): null\r\n            }\r\n        </Form.Field>\r\n    )\r\n\r\n}","import {  useField } from \"formik\";\r\nimport React from \"react\";\r\nimport { Form, Label, Select } from \"semantic-ui-react\";\r\n\r\n\r\ninterface Props{\r\n    placeholder:string,\r\n    name : string,\r\n    options: any;\r\n    label?: string,\r\n}\r\n\r\n\r\nexport default function MySelectInput(props: Props){\r\n    const[field, meta, helpers] = useField(props.name);\r\n\r\n    return(\r\n        <Form.Field error ={meta.touched && !!meta.error}>\r\n            {/* <Label> {props.label}</Label> */}\r\n            <Select\r\n                clearable\r\n                options = {props.options}\r\n                value = {field.value || null}\r\n                onChange = {(e, d)=> helpers.setValue(d.value)}\r\n                onBlur = {()=> helpers.setTouched(true)}\r\n                placeholder = {props.placeholder}\r\n            />\r\n            {\r\n                meta.touched && meta.error? (\r\n                    <Label basic color=\"red\">{meta.error}</Label>\r\n                ):null\r\n            }\r\n        \r\n\r\n        </Form.Field>\r\n    )\r\n\r\n}","export const categoryOptions = [\r\n    {text: 'Drinks', value : 'drink'},\r\n    {text: 'Culture', value : 'culture'},\r\n    {text: 'Film', value : 'film'},\r\n    {text: 'Food', value : 'food'},\r\n    {text: 'Music', value : 'music'},\r\n    {text: 'Travel', value : 'travel'},\r\n]","import { useField } from 'formik';\r\nimport React from 'react';\r\nimport { Form, Label } from 'semantic-ui-react';\r\nimport DatePicker, {ReactDatePickerProps} from 'react-datepicker';\r\n\r\n\r\nexport default function MyDateInput(props: Partial<ReactDatePickerProps>){\r\n\r\n    const [field, meta, helpers] = useField(props.name!);\r\n    return(\r\n        <Form.Field error = {meta.touched && !!meta.error }>\r\n            <DatePicker\r\n                {...field}\r\n                {...props}\r\n                selected = {(field.value && new Date(field.value)) || null}\r\n                onChange = {value => helpers.setValue(value)}\r\n            />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ): null}\r\n        </Form.Field>\r\n    )\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useHistory, useParams } from \"react-router\";\r\nimport { Button, Header, Segment } from \"semantic-ui-react\";\r\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\r\nimport {v4 as uuid} from \"uuid\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Formik, Form } from \"formik\";\r\nimport * as Yup from 'yup';\r\nimport MyTextInput from \"../../../app/common/form/MyTextInput\";\r\nimport MyTextArea from \"../../../app/common/form/MyTextArea\";\r\nimport MySelectInput from \"../../../app/common/form/MySelectInput\";\r\nimport { categoryOptions } from \"../../../app/common/options/CategoryOptions\";\r\nimport MyDateInput from \"../../../app/common/form/MyDateInput\";\r\nimport { ActivityFormValues } from \"../../../app/models/activity\";\r\n\r\n\r\n\r\nexport default observer( function ActivityForm(){\r\n    const history = useHistory();\r\n    const{activityStore} = useStore();\r\n    const{createActivity, updateActivity, loadActivity, loadingInitial }= activityStore;\r\n    const{id} = useParams<{id:string}>();\r\n    const[activity, setActivity] = useState<ActivityFormValues>(new ActivityFormValues());\r\n\r\n\r\n    const validationSchema = Yup.object({\r\n        title: Yup.string().required(\"The activity title is required\"),\r\n        description: Yup.string().required(\"The activity description is required\"),\r\n        category: Yup.string().required(),\r\n        date: Yup.string().required('Date is required').nullable(),\r\n        venue: Yup.string().required(),\r\n        city: Yup.string().required(),\r\n    })\r\n\r\n    useEffect(()=>{\r\n        if(id) loadActivity(id).then(activity => setActivity(new ActivityFormValues(activity)) )\r\n    }, [id, loadActivity]);\r\n\r\n\r\n    function handleFormSubmit(activity:ActivityFormValues){\r\n        if(!activity.id)\r\n        {\r\n            let newActivity = {\r\n                ...activity, id: uuid()\r\n            } \r\n            createActivity(newActivity).then(()=>history.push(`/activities/${newActivity.id}`));\r\n        }\r\n        else{\r\n            updateActivity(activity).then(()=>history.push(`/activities/${activity.id}`));\r\n        }\r\n    }\r\n   \r\n\r\n    if(loadingInitial)   return <LoadingComponent content=\"loading activity...\"/>\r\n    return(\r\n        <Segment clearing>\r\n            <Header content=\"Activity Details\" sub color='teal'/>\r\n            <Formik\r\n            validationSchema= {validationSchema} \r\n            enableReinitialize \r\n            initialValues={activity} \r\n            onSubmit = {values => handleFormSubmit(values)}\r\n            >\r\n                {({handleSubmit, isValid, isSubmitting, dirty})=>(\r\n                <Form className=\"ui form\" onSubmit={handleSubmit} autoComplete = \"off\">\r\n                    <MyTextInput name='title' placeholder='Title'/>\r\n\r\n                    <MyTextArea rows = {3} placeholder = \"Description\"  name='description'  />\r\n                    <MySelectInput options = {categoryOptions} placeholder = \"Category\"  name ='category'   />\r\n                    <MyDateInput  \r\n                        placeholderText = \"Date\"  \r\n                        name ='date'\r\n                        showTimeSelect\r\n                        timeCaption = \"time\"\r\n                        dateFormat = \"MMMM d, yyyy h:mm aa\"\r\n                    />\r\n                    <Header content=\"Location Details\" sub color='teal'/>\r\n                    <MyTextInput placeholder = \"City\"  name ='city'  />\r\n                    <MyTextInput placeholder = \"Venue\" name ='venue'  />\r\n                    <Button \r\n                        disabled ={isSubmitting || !dirty || !isValid}\r\n                        loading={isSubmitting} \r\n                        floated='right' \r\n                        positive \r\n                        type = \"submit\" \r\n                        content = \"Submit\" \r\n                    />\r\n                    <Button as = {Link} to ='/activities'  floated='right' type = \"button\" content = \"Cancel\"/>\r\n                </Form>\r\n                )}\r\n\r\n\r\n            </Formik>\r\n        </Segment>\r\n    )\r\n})","import { Formik, Form, Field, FieldProps } from 'formik'\r\nimport { observer } from 'mobx-react-lite'\r\nimport { useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport {Segment, Header, Comment, Loader} from 'semantic-ui-react'\r\nimport { useStore } from '../../../app/stores/store';\r\nimport * as Yup from 'yup';\r\nimport { formatDistanceToNow } from 'date-fns'\r\n\r\ninterface Props{\r\n    activityId:string;\r\n}\r\n\r\n\r\nexport default observer(function ActivityDetailedChat({activityId}:Props) {\r\n\r\n    const{commentStore}= useStore();\r\n\r\n    useEffect(()=>{\r\n        if(activityId){\r\n            commentStore.createHubConnection(activityId);\r\n        }\r\n        return()=>{\r\n            commentStore.clearComments();\r\n        }\r\n    },[commentStore, activityId]);\r\n\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                attached='top'\r\n                inverted\r\n                color='teal'\r\n                style={{border: 'none'}}\r\n            >\r\n                <Header>Chat about this event</Header>\r\n            </Segment>\r\n            <Segment attached clearing>\r\n                <Formik\r\n                    onSubmit = {(values, {resetForm})=>\r\n                    commentStore.addComment(values).then(()=> resetForm())}\r\n\r\n                    initialValues = {{body:''}}\r\n\r\n                    validationSchema = {Yup.object({\r\n                        body: Yup.string().required()\r\n                    })}\r\n                >\r\n                    {({isSubmitting, isValid, handleSubmit})=>(\r\n                        <Form className='ui form'>\r\n                            <Field name='body'>\r\n                                {(props:FieldProps)=>(\r\n                                    <div style={{position:'relative'}}>\r\n                                        <Loader active={isSubmitting}/>\r\n                                        <textarea \r\n                                        placeholder = \"Enter your comment (Enter to submit, SHIFT + Enter for new line)\"\r\n                                        rows = {2}\r\n                                        {...props.field}\r\n                                        onKeyPress = {e =>{\r\n                                            if(e.key === 'Enter' && e.shiftKey){\r\n                                                return;\r\n                                            }\r\n                                            if(e.key === 'Enter' && !e.shiftKey){\r\n                                                e.preventDefault();\r\n                                                isValid && handleSubmit();\r\n\r\n                                            }\r\n                                        }}\r\n                                        />\r\n                                    </div>\r\n                                )}\r\n                                \r\n                            </Field>\r\n                        </Form>\r\n                    )}\r\n                    \r\n                </Formik>\r\n                <Comment.Group>\r\n                    {commentStore.comments.map(comment =>(\r\n                        <Comment key= {comment.id}>\r\n                            <Comment.Avatar src={comment.image ||'/assets/user.png'}/>\r\n                            <Comment.Content>\r\n                                <Comment.Author as= {Link} to = {`/profile/${comment.username}`}>{comment.displayName}</Comment.Author>\r\n                                <Comment.Metadata>\r\n                                    <div>{ formatDistanceToNow( comment.createdAt)} ago</div>\r\n                                </Comment.Metadata>\r\n                                <Comment.Text style = {{whiteSpace: 'pre-wrap'}}>{comment.body}</Comment.Text>\r\n                            </Comment.Content>\r\n                        </Comment>\r\n                    ))}\r\n\r\n\r\n                    \r\n                </Comment.Group>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})\r\n","import { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport {Button, Header, Item, Segment, Image, Label} from 'semantic-ui-react'\r\nimport {Activity} from \"../../../app/models/activity\";\r\n\r\nimport {format} from 'date-fns';\r\nimport { useStore } from '../../../app/stores/store';\r\nconst activityImageStyle = {\r\n    filter: 'brightness(30%)'\r\n};\r\n\r\nconst activityImageTextStyle = {\r\n    position: 'absolute',\r\n    bottom: '5%',\r\n    left: '5%',\r\n    width: '100%',\r\n    height: 'auto',\r\n    color: 'white'\r\n};\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer (function ActivityDetailedHeader({activity}: Props) {\r\n    const {activityStore:{updateAttendance, loading, cancelActivityToggle}} = useStore();\r\n    return (\r\n        <Segment.Group>\r\n            <Segment basic attached='top' style={{padding: '0'}}>\r\n                {activity.isCancelled && (\r\n                    <Label\r\n                        style = {{position: \"absolute\", zIndex: 1000, left: -14, top:20}}\r\n                        ribbon\r\n                        color = 'red'\r\n                        content='Cancelled'\r\n                    />\r\n                )}\r\n                <Image src={`/assets/categoryImages/${activity.category}.jpg`} fluid style={activityImageStyle}/>\r\n                <Segment style={activityImageTextStyle} basic>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Content>\r\n                                <Header\r\n                                    size='huge'\r\n                                    content={activity.title}\r\n                                    style={{color: 'white'}}\r\n                                />\r\n                                <p>{format(activity.date!, \"dd MMMM yyyy\")}</p>\r\n                                <p>\r\n                                    Hosted by <strong><Link to={`/profile/${activity.host?.username}`}>{activity.host?.displayName}</Link> </strong>\r\n                                </p>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Segment>\r\n            </Segment>\r\n            <Segment clearing attached='bottom'>\r\n                {activity.isHost?(\r\n                    <>\r\n                        <Button\r\n                            color = {activity.isCancelled ? \"green\": \"red\"}\r\n                            floated = \"left\"\r\n                            basic\r\n                            content= {activity.isCancelled? \"Re-activate Activity\": \"Cancel Activity\"}\r\n                            onClick = {cancelActivityToggle}\r\n                            loading = {loading}\r\n                        />\r\n                        <Button as={Link} \r\n                            to={`/manage/${activity.id}`} \r\n                            color='orange' \r\n                            floated='right'\r\n                            disabled = {activity.isCancelled}\r\n                        >\r\n                        Manage Event\r\n                        </Button>\r\n                    </>\r\n                     \r\n                ): activity.isGoing?(\r\n                    <Button loading= {loading} onClick={updateAttendance}>Cancel attendance</Button>\r\n\r\n                ):(\r\n                    <Button  disabled = {activity.isCancelled} loading= {loading} onClick={updateAttendance} color='teal'>Join Activity</Button>\r\n\r\n                )}\r\n              \r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})\r\n\r\n","\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport {Segment, Grid, Icon} from 'semantic-ui-react'\r\nimport {Activity} from \"../../../app/models/activity\";\r\n\r\nimport {format} from 'date-fns';\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedInfo({activity}: Props) {\r\n    return (\r\n        <Segment.Group>\r\n            <Segment attached='top'>\r\n                <Grid>\r\n                    <Grid.Column width={1}>\r\n                        <Icon size='large' color='teal' name='info'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <p>{activity.description}</p>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='calendar' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n            <span>\r\n              {format( activity.date!, \"dd MMMM yyyy h:mm aa\")}\r\n            </span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='marker' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={11}>\r\n                        <span>{activity.venue}, {activity.city}</span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})\r\n","import React from 'react'\r\nimport { Segment, List, Label, Item, Image } from 'semantic-ui-react'\r\nimport { Link } from 'react-router-dom'\r\nimport { observer } from 'mobx-react-lite'\r\nimport { Activity } from '../../../app/models/activity'\r\n\r\n\r\ninterface Props{\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedSidebar ({activity:{attendees, host}}:Props) {\r\n    if(!attendees) return null;\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                style={{ border: 'none' }}\r\n                attached='top'\r\n                secondary\r\n                inverted\r\n                color='teal'\r\n            >\r\n                  {attendees.length}{attendees.length ===1?\"Person\":\"People\"} going\r\n            </Segment>\r\n            <Segment attached>\r\n                <List relaxed divided>\r\n                    {attendees.map(attendee =>(\r\n                        <Item style={{ position: 'relative' }} key={attendee.username}>\r\n                            {attendee.username === host?.username &&(\r\n                                <Label\r\n                                    style={{ position: 'absolute' }}\r\n                                    color='orange'\r\n                                    ribbon='right'\r\n                                >\r\n                                    Host\r\n                                </Label>\r\n                            )}\r\n                            \r\n                            <Image size='tiny' src={attendee.image ||'/assets/user.png'} />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Item.Header as='h3'>\r\n                                    <Link to={`/profiles/${attendee.username}`}>{attendee.displayName}</Link>\r\n                                </Item.Header>\r\n                                {attendee.following &&\r\n                                <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>}\r\n                            </Item.Content>\r\n                        </Item>\r\n                    ))}\r\n                </List>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})\r\n\r\n\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React, { useEffect } from \"react\";\r\nimport { useParams } from \"react-router\";\r\nimport { Grid } from \"semantic-ui-react\";\r\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport ActivityDetailedChat from \"./ActivityDetailedChat\";\r\nimport ActivityDetailedHeader from \"./ActivityDetailedHeader\";\r\nimport ActivityDetailedInfo from \"./ActivityDetailedInfo\";\r\nimport ActivityDetailedSidebar from \"./ActivityDetailedSidebar\";\r\n\r\n\r\nexport default observer( function ActivityDetails(){\r\n    const {activityStore} = useStore();\r\n    const{selectedActivity: activity, loadActivity, loadingInitial, clearSelectedActivity} = activityStore;\r\n    const{id} = useParams<{id:string}>();\r\n\r\n    useEffect(()=>{\r\n        if(id) loadActivity(id);\r\n        return ()=> clearSelectedActivity();\r\n    }, [id, loadActivity, clearSelectedActivity]);\r\n    \r\n    if(loadingInitial || !activity) return <LoadingComponent/>\r\n    return(\r\n       <Grid>\r\n           <Grid.Column width= {10}>\r\n              <ActivityDetailedHeader activity= {activity}></ActivityDetailedHeader>\r\n              <ActivityDetailedInfo activity = {activity}></ActivityDetailedInfo>\r\n              <ActivityDetailedChat activityId={activity.id}></ActivityDetailedChat>\r\n           </Grid.Column>\r\n           <Grid.Column width= {6}>\r\n               <ActivityDetailedSidebar activity = {activity} ></ActivityDetailedSidebar>\r\n           </Grid.Column>\r\n\r\n       </Grid>\r\n        \r\n    )\r\n})","\r\nimport React, { useState } from 'react';\r\nimport {Button, Header, Segment} from \"semantic-ui-react\";\r\nimport axios from 'axios';\r\nimport ValidationErrors from './ValidationErrors';\r\n\r\nexport default function TestErrors() {\r\n    const baseUrl = process.env.REACT_APP_API_URL;\r\n    const [errors, setErrors] = useState(null);\r\n\r\n    function handleNotFound() {\r\n        axios.get(baseUrl + 'buggy/not-found').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadRequest() {\r\n        axios.get(baseUrl + 'buggy/bad-request').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleServerError() {\r\n        axios.get(baseUrl + 'buggy/server-error').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleUnauthorised() {\r\n        axios.get(baseUrl + 'buggy/unauthorised').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadGuid() {\r\n        axios.get(baseUrl + 'activities/notaguid').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleValidationError() {\r\n        axios.post(baseUrl + 'activities', {}).catch(err => setErrors(err));\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header as='h1' content='Test Error component' />\r\n            <Segment>\r\n                <Button.Group widths='7'>\r\n                    <Button onClick={handleNotFound} content='Not Found' basic primary />\r\n                    <Button onClick={handleBadRequest} content='Bad Request' basic primary />\r\n                    <Button onClick={handleValidationError} content='Validation Error' basic primary />\r\n                    <Button onClick={handleServerError} content='Server Error' basic primary />\r\n                    <Button onClick={handleUnauthorised} content='Unauthorised' basic primary />\r\n                    <Button onClick={handleBadGuid} content='Bad Guid' basic primary />\r\n                </Button.Group>\r\n            </Segment>\r\n            {errors && \r\n            <ValidationErrors errors= {errors}/>}\r\n\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, Header, Icon, Segment } from \"semantic-ui-react\";\r\n\r\n\r\nexport default function NotFound(){\r\n    return(\r\n        <Segment placeholder>\r\n            <Header icon>\r\n                <Icon name = 'search'/>\r\n                Oops - we've looked everywhere and could not find this.\r\n            </Header>\r\n            <Segment.Inline>\r\n                <Button as={Link} to = \"/activities\" primary >\r\n                    Return to Activities page\r\n                </Button>\r\n            </Segment.Inline>\r\n\r\n        </Segment>\r\n    )\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Container, Header, Segment } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store';\r\nexport default observer( function ServerError(){\r\n    const {commonStore} = useStore();\r\n    return(\r\n        <Container>\r\n            <Header as =\"h1\" content=\"Server Error\"/>\r\n            <Header sub as='h5' color='red' content={commonStore.error?.message}/>\r\n            {\r\n                commonStore.error?.details && \r\n                <Segment>\r\n                    <Header as ='h4' content='Stack trace' color = 'teal'/>\r\n                    <code style = {{marginTop: '10px'}}> {commonStore.error.details}</code>\r\n                </Segment>\r\n            }\r\n\r\n        </Container>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Modal } from 'semantic-ui-react';\r\nimport { useStore } from '../../stores/store';\r\n\r\nexport default observer( function ModalContainer(){\r\n    const{modalStore} = useStore();\r\n    return(\r\n        <Modal open={modalStore.modal.open} onClose={modalStore.closeModal} size=\"mini\">\r\n            <Modal.Content>\r\n                {modalStore.modal.body}\r\n            </Modal.Content>\r\n\r\n        </Modal>\r\n    )\r\n})","import { Form, Formik } from 'formik';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { useStore } from '../../app/stores/store';\r\nimport * as Yup from 'yup';\r\nimport MyTextInput from '../../app/common/form/MyTextInput';\r\nimport MyTextArea from '../../app/common/form/MyTextArea';\r\nimport { Button } from 'semantic-ui-react';\r\n\r\n\r\ninterface Props{\r\n    setEditMode: (editMode: boolean) => void;\r\n}\r\n\r\nexport default observer(function ProfileEditForm({setEditMode}:Props){\r\n    \r\n    const{profileStore:{profile, UpdateProfile}}=useStore();\r\n    return(\r\n        <Formik\r\n            initialValues = {{displayName: profile?.displayName, bio:profile?.bio}}\r\n            onSubmit= {values=>{\r\n                UpdateProfile(values).then(()=>{\r\n                    setEditMode (false);\r\n                })\r\n            }}\r\n\r\n            validationSchema = {Yup.object({\r\n                displayName: Yup.string().required()\r\n            })}\r\n        >\r\n            {({isSubmitting, isValid, dirty})=>(\r\n                <Form className='ui form'>\r\n                    <MyTextInput placeholder='Display Name' name='displayName' />\r\n                    <MyTextArea rows={3} placeholder='Add your bio' name='bio'/>\r\n                    <Button\r\n                        positive\r\n                        type= 'submit'\r\n                        loading = {isSubmitting}\r\n                        content='Update Profile'\r\n                        floated='right'\r\n                        disabled = {!isValid || !dirty}\r\n                    />\r\n                </Form>\r\n            )}\r\n\r\n        </Formik>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { useState } from \"react\";\r\nimport { Button, Grid, Header, Tab } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport ProfileEditForm from \"./ProfileEditForm\";\r\n\r\n\r\nexport default observer (function ProfileAbout(){\r\n    \r\n    const{profileStore}= useStore();\r\n    const{isCurrentUser, profile}= profileStore;\r\n    const[editMode, setEditMode] = useState(false);\r\n    \r\n    return(\r\n        <Tab.Pane>\r\n           <Grid>\r\n               <Grid.Column width={16}>\r\n                   <Header floated='left' icon='user' content={`about ${profile?.displayName}`}/>\r\n                   {isCurrentUser &&(\r\n                       <Button\r\n                        basic\r\n                        floated='right'\r\n                        content={editMode?'Cancel':'Edit Profile'}\r\n                        onClick={()=> setEditMode(!editMode)}\r\n                       />\r\n                   )}\r\n               </Grid.Column>\r\n               <Grid.Column width={16}>\r\n                   {editMode ? <ProfileEditForm setEditMode={setEditMode}/>:\r\n                   <span style={{whiteSpace: 'pre-wrap'}}>{profile?.bio}</span>}\r\n               </Grid.Column>\r\n\r\n           </Grid> \r\n        </Tab.Pane>\r\n    )\r\n})","import React, { SyntheticEvent, useEffect } from 'react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Tab, Grid, Header, Card, Image, TabProps } from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom';\r\nimport { format } from 'date-fns';\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport { UserActivity } from '../../app/models/porfile';\r\n\r\nconst panes = [\r\n    { menuItem: 'Future Events', pane: { key: 'future' } },\r\n    { menuItem: 'Past Events', pane: { key: 'past' } },\r\n    { menuItem: 'Hosting', pane: { key: 'hosting' } }\r\n];\r\n\r\nexport default observer(function ProfileActivities() {\r\n    const { profileStore } = useStore();\r\n    const {\r\n        loadUserActivities,\r\n        profile,\r\n        loadingActivities,\r\n        userActivities\r\n    } = profileStore;\r\n\r\n    useEffect(() => {\r\n        loadUserActivities(profile!.username);\r\n    }, [loadUserActivities, profile]);\r\n\r\n    const handleTabChange = (e: SyntheticEvent, data: TabProps) => {\r\n        loadUserActivities(profile!.username, panes[data.activeIndex as number].pane.key);\r\n    };\r\n\r\n    return (\r\n        <Tab.Pane loading={loadingActivities}>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='calendar' content={'Activities'} />\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Tab\r\n                        panes={panes}\r\n                        menu={{ secondary: true, pointing: true }}\r\n                        onTabChange={(e, data) => handleTabChange(e, data)}\r\n                    />\r\n                    <br />\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {userActivities.map((activity: UserActivity) => (\r\n                            <Card\r\n                                as={Link}\r\n                                to={`/activities/${activity.id}`}\r\n                                key={activity.id}\r\n                            >\r\n                                <Image\r\n                                    src={`/assets/categoryImages/${activity.category}.jpg`}\r\n                                    style={{ minHeight: 100, objectFit: 'cover' }}\r\n                                />\r\n                                <Card.Content>\r\n                                    <Card.Header textAlign='center'>{activity.title}</Card.Header>\r\n                                    <Card.Meta textAlign='center'>\r\n                                        <div>{format(new Date(activity.date), 'do LLL')}</div>\r\n                                        <div>{format(new Date(activity.date), 'h:mm a')}</div>\r\n                                    </Card.Meta>\r\n                                </Card.Content>\r\n                            </Card>\r\n                        ))}\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    );\r\n});","import React from 'react';\r\nimport {Tab, Grid, Header, Card} from \"semantic-ui-react\";\r\nimport ProfileCard from \"./ProfileCard\";\r\nimport {useStore} from \"../../app/stores/store\";\r\nimport { observer } from 'mobx-react-lite';\r\n\r\nexport default observer(function ProfileFollowings() {\r\n    const {profileStore} = useStore();\r\n    const {profile, followings, loadingFollowings, activeTab } = profileStore;\r\n    return (\r\n        <Tab.Pane loading={loadingFollowings}>\r\n            <Grid>\r\n                <Grid.Column width='16'>\r\n                    <Header\r\n                        floated='left'\r\n                        icon='user'\r\n                       content={activeTab === 3 ? `People following ${profile!.displayName}` : `People ${profile?.displayName} is following`}\r\n                  \r\n                    />\r\n                </Grid.Column>\r\n                <Grid.Column width='16'>\r\n                    <Card.Group itemsPerRow={4}>\r\n                       \r\n                        {followings.map(profile => (\r\n                            <ProfileCard key={profile.username} profile={profile} />\r\n                        ))}\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import React from \"react\";\r\nimport { Cropper } from \"react-cropper\";\r\nimport 'cropperjs/dist/cropper.css';\r\n\r\ninterface Props{\r\nimagePreview : string;\r\nsetCropper:(cropper:Cropper) => void;\r\n}\r\nexport default function PhotoWidgetCropper({imagePreview, setCropper}:Props){\r\n    return(\r\n        <Cropper \r\n            src = {imagePreview}\r\n            style = {{height: 200, width:\"100%\"}}\r\n            initialAspectRatio= {1}\r\n            aspectRatio = {1}\r\n            preview = '.img-preview'\r\n            guides = {false}\r\n            viewMode = {1}\r\n            autoCropArea= {1}\r\n            background = {false}\r\n            onInitialized = {cropper => setCropper(cropper)}\r\n        \r\n        \r\n        />\r\n    )\r\n}","import React, {useCallback} from 'react'\r\nimport {useDropzone} from 'react-dropzone'\r\nimport { Header, Icon } from 'semantic-ui-react'\r\n\r\ninterface Props{\r\n    setFiles: (files: any)=> void;\r\n}\r\n\r\nexport default function PhotoWidgetDropZone({setFiles}: Props) {\r\n\r\n    const dzStyles = {\r\n        border: 'dashed 3px #eee',\r\n        borderColor: '#eee',\r\n        borderRadious: '5px',\r\n        paddingTop: '30px',\r\n        textAlign: 'center'as 'center',\r\n        height: 200\r\n    }\r\n\r\n    const dzActive = {\r\n        borderColor: 'green'\r\n    }\r\n\r\n\r\n  const onDrop = useCallback(acceptedFiles => {\r\n    setFiles(acceptedFiles.map((file:any) => Object.assign(file, {\r\n        preview: URL.createObjectURL(file)\r\n    })))\r\n  }, [setFiles])\r\n  const {getRootProps, getInputProps, isDragActive} = useDropzone({onDrop})\r\n\r\n  return (\r\n    <div {...getRootProps()} style={isDragActive ? {...dzStyles, ...dzActive}: dzStyles} >\r\n      <input {...getInputProps()} />\r\n        <Icon name = \"upload\" size= 'huge' />\r\n        <Header content = \"Drop image here\"/>\r\n    </div>\r\n  )\r\n}","import React from \"react\";\r\nimport { useEffect } from \"react\";\r\nimport { useState } from \"react\";\r\nimport { Button, Grid, Header } from \"semantic-ui-react\";\r\nimport PhotoWidgetCropper from \"./PhotoWidgetCropper\";\r\nimport PhotoWidgetDropZone from \"./PhotoWidgetDropZone\";\r\n\r\n\r\ninterface Props{\r\n   loading: boolean;\r\n   uploadPhoto:(file:Blob)=> void; \r\n}\r\n\r\n\r\nexport default function PhotoUploadWidget({loading, uploadPhoto}:Props){\r\n    const[files, setFiles] = useState<any>([]);\r\n    const[cropper, setCropper] = useState<Cropper>();\r\n\r\n    function onCrop(){\r\n        if(cropper){\r\n            cropper.getCroppedCanvas().toBlob(blob => uploadPhoto(blob!));\r\n        }\r\n    }\r\n\r\n    useEffect(()=>{\r\n        return()=>{\r\n            files.forEach((file:any)=> URL.revokeObjectURL(file.preview))\r\n        }\r\n    },[files])\r\n\r\n    return(\r\n        <Grid>\r\n            <Grid.Column width= {4}>\r\n                <Header sub color='teal' content= 'Step 1 - Add Photo'/> \r\n                <PhotoWidgetDropZone setFiles = {setFiles}/>\r\n            </Grid.Column>\r\n            <Grid.Column width= {1}></Grid.Column>\r\n            <Grid.Column width= {4}>\r\n                <Header sub color='teal' content= 'Step 2 - Resize Image'/> \r\n                {files && files.length > 0 &&(\r\n                    <PhotoWidgetCropper setCropper = {setCropper} imagePreview = {files[0].preview} />\r\n                )}\r\n            </Grid.Column>\r\n            <Grid.Column width= {1}></Grid.Column>\r\n            <Grid.Column width= {4}>\r\n                {files && files.length > 0 && \r\n                <>\r\n                    <Header sub color='teal' content= 'Step 3 - Preview & unpload'/> \r\n                    <> \r\n                        <div className = \"img-preview\" style= {{minHeight:200, overflow:\"hidden\"}}/>\r\n                        <Button.Group widths={2}>\r\n                            <Button loading={loading} onClick={onCrop} positive icon= 'check'/>\r\n                            <Button disabled={loading} onClick={()=> setFiles([])} icon= 'close'/>\r\n                        </Button.Group>\r\n                    </>\r\n                </>}\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport React, { SyntheticEvent } from \"react\";\r\nimport { useState } from \"react\";\r\nimport { Card, Header, Image, Tab, Grid, Button } from \"semantic-ui-react\";\r\nimport PhotoUploadWidget from \"../../app/common/imageUpload/PhotoUploadWidget\";\r\nimport { Photo, Profile } from \"../../app/models/porfile\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\ninterface Props{\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfilePhotos({profile}:Props){\r\n    const{profileStore:{isCurrentUser, uploadPhoto, uploading, setMainPhoto, loading, deletePhoto}} = useStore();\r\n    const [addPhotoMode, setAddPhotoMode] = useState(false);\r\n    const [target, setTarget] = useState('');\r\n\r\n    function handlePhotoUpload(file:Blob){\r\n        uploadPhoto(file).then(()=> setAddPhotoMode(false));\r\n    }\r\n\r\n    function handleSetMainPhoto (photo: Photo, e: SyntheticEvent<HTMLButtonElement>){\r\n        setTarget(e.currentTarget.name);\r\n        setMainPhoto(photo);\r\n    }\r\n    function handleDeletePhoto (photo: Photo, e: SyntheticEvent<HTMLButtonElement>){\r\n        setTarget(e.currentTarget.name);\r\n        deletePhoto(photo);\r\n    }\r\n\r\n\r\n\r\n    return(\r\n        \r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width = {16}>\r\n                    <Header floated= 'left' icon= \"image\" content = 'Photos'></Header>\r\n                    {isCurrentUser && (\r\n                        <Button floated=\"right\"\r\n                        content = {addPhotoMode ? 'Cancel': 'Add Photo'}\r\n                        onClick = {()=> setAddPhotoMode(!addPhotoMode)}\r\n                        />\r\n                    )\r\n                    }\r\n                </Grid.Column>\r\n                <Grid.Column width = {16}>\r\n                    {addPhotoMode ? (\r\n                        <PhotoUploadWidget uploadPhoto = {handlePhotoUpload} loading = {uploading} />\r\n                    ):(\r\n                    <Card.Group itemsPerRow={5}>\r\n                        {profile.photos?.map((photo)=>(\r\n                            <Card key={photo.id}>\r\n                                <Image src = {photo.url || '/assets/user.png'}/>\r\n                                {isCurrentUser && (\r\n                                    <Button.Group fluid widths= {2}>\r\n                                        <Button \r\n                                            basic\r\n                                            color='green'\r\n                                            content='Main'\r\n                                            name = {'main' +photo.id}\r\n                                            disabled = {photo.isMain}\r\n                                            loading = {target === 'main'+photo.id && loading}\r\n                                            onClick={e=> handleSetMainPhoto(photo, e)}\r\n                                        />\r\n                                        <Button\r\n                                            basic \r\n                                            color='red' \r\n                                            icon='trash'\r\n                                            name = {photo.id}\r\n                                            loading = {target === photo.id && loading}\r\n                                            disabled = {photo.isMain}\r\n                                            onClick = {e => handleDeletePhoto(photo, e)}\r\n                                        />\r\n\r\n                                    </Button.Group>\r\n                                )}\r\n                            </Card> \r\n                        ))}\r\n                    \r\n                    </Card.Group>\r\n                    )}\r\n                </Grid.Column>\r\n\r\n            </Grid>  \r\n        </Tab.Pane>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Tab } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/models/porfile\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport ProfileAbout from \"./ProfileAbout\";\r\nimport ProfileActivities from \"./ProfileActivities\";\r\nimport ProfileFollowings from \"./ProfileFollowings\";\r\nimport ProfilePhotos from \"./ProfilePhotos\";\r\ninterface Props{\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer( function ProfileContent({profile}:Props){\r\n    const{profileStore} = useStore()\r\n    const panes= [\r\n        {menuItem: 'About', render: ()=> <ProfileAbout/>},\r\n        {menuItem: 'Photos', render: ()=><ProfilePhotos profile = {profile}/>},\r\n        {menuItem: 'Events', render: ()=> <ProfileActivities/>},\r\n        {menuItem: 'Followers', render: ()=><ProfileFollowings/>},\r\n        {menuItem: 'Following', render: ()=><ProfileFollowings/>},\r\n    ]\r\n    return(\r\n        <Tab \r\n            menu = {{fluid: true, vertical:true}}\r\n            menuPosition = \"right\"\r\n            panes = {panes}\r\n            onTabChange = {(e, data)=> profileStore.setActiveTab(data.activeIndex)}\r\n        />\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport { Divider, Grid, Header, Item, Segment, Statistic, StatisticGroup } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/porfile';\r\nimport FollowButton from './FollowButton';\r\n\r\ninterface Props{\r\n    profile: Profile;\r\n}\r\n\r\n\r\nexport default observer( function ProfileHeader({profile}: Props){\r\n    return(\r\n        <Segment>\r\n            <Grid>\r\n\r\n                <Grid.Column width = {12}>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Image avatar size =\"small\" src= {profile.image ||\"/assets/user.png\"}/>\r\n                            <Item.Content verticalAlign = \"middle\">\r\n                                <Header as ='h1' content= {profile.displayName}/>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Grid.Column>\r\n\r\n                <Grid.Column width = {4}>\r\n                    <StatisticGroup widths= {2}>\r\n                        <Statistic label= 'Followers' value= {profile.followersCount} />\r\n                        <Statistic label= 'Following' value= {profile.followingCount} />\r\n                    </StatisticGroup>\r\n                    \r\n                    <Divider />\r\n                    <FollowButton profile= {profile}/>\r\n\r\n                </Grid.Column>\r\n\r\n            </Grid>\r\n        </Segment>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React, { useEffect } from \"react\";\r\nimport { useParams } from \"react-router\";\r\nimport { Grid } from \"semantic-ui-react\";\r\nimport LoadingComponent from \"../../app/layout/LoadingComponent\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport ProfileContent from \"./ProfileContent\";\r\nimport ProfileHeader from \"./ProfileHeader\";\r\n\r\nexport default observer( function ProfilePage(){\r\n\r\n    const {username} = useParams<{username: string}>();\r\n    const {profileStore} = useStore();\r\n    const {loadProfile, loadingProfile, profile, setActiveTab} = profileStore;\r\n\r\n    useEffect(()=>{\r\n        loadProfile(username);\r\n        setActiveTab(0);\r\n    },[loadProfile, username, setActiveTab])\r\n\r\n    if(loadingProfile) return <LoadingComponent content= 'Loading Profile.....'></LoadingComponent> \r\n\r\n    return(\r\n        <Grid>\r\n            <Grid.Column width= {16}>\r\n                {profile &&\r\n                    <> \r\n                        <ProfileHeader profile = {profile} />\r\n                        <ProfileContent profile = {profile}/>\r\n                    </>\r\n                }   \r\n               \r\n                \r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import { Redirect, Route, RouteComponentProps, RouteProps } from \"react-router-dom\";\r\nimport { useStore } from \"../stores/store\";\r\n\r\ninterface Props extends RouteProps {\r\n    component: React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>;\r\n}\r\n\r\nexport default function PrivateRoute({component: Component, ...rest}: Props) {\r\n    const {userStore: {isLoggedIn}} = useStore();\r\n    return (\r\n        <Route \r\n            {...rest}\r\n            render={(props) => isLoggedIn ? <Component {...props} /> : <Redirect to='/' />}\r\n        />\r\n    )\r\n}","import { useEffect } from 'react';\nimport { Container } from 'semantic-ui-react';\nimport NavBar from './NavBar';\nimport ActivityDashboard from '../../features/activities/dashboard/ActivityDashboard';\nimport { observer } from 'mobx-react-lite';\nimport { Route, Switch, useLocation } from 'react-router';\nimport HomePage from '../../features/home/Home';\nimport ActivityForm from '../../features/activities/form/ActivityForm';\nimport ActivityDetails from '../../features/activities/details/ActivityDetails';\nimport TestErrors from '../../features/errors/TestErrors';\nimport { ToastContainer } from 'react-toastify';\nimport NotFound from '../../features/errors/NotFound';\nimport ServerError from '../../features/errors/ServerError';\nimport { useStore } from '../stores/store';\nimport LoadingComponent from './LoadingComponent';\nimport ModalContainer from '../common/modals/ModalContainer';\nimport ProfilePage from '../../features/profiles/ProfilePage';\nimport PrivateRoute from './PrivateRoute';\n\n\nfunction App() {\n  const location = useLocation();\n  const {commonStore, userStore} = useStore();\n\n  useEffect(()=>{\n    if(commonStore.token){\n      userStore.getUser().finally(()=> commonStore.setAppLoaded());\n    }else{\n      commonStore.setAppLoaded();\n    }\n  }, [commonStore, userStore])\n\n  if(!commonStore.appLoaded) return (<LoadingComponent content = 'Loading app.....' />)\n\n  return (\n    < >\n    <ToastContainer position=\"bottom-right\" hideProgressBar />\n    <ModalContainer/>\n     <Route exact path='/' component={HomePage}/>\n     <Route \n      path={'/(.+)'}\n      render = {()=>(\n        <>\n        <NavBar/>\n        <Container style = {{marginTop: '7em'}}> \n          <Switch>\n            <PrivateRoute exact path='/activities' component={ActivityDashboard}/>\n            <PrivateRoute path='/activities/:id' component={ActivityDetails}/>\n            <PrivateRoute key={location.key} path={['/createActivity', '/manage/:id' ]} component={ActivityForm}/>\n            <PrivateRoute path=\"/profile/:username\" component = {ProfilePage}/>\n            <PrivateRoute path=\"/errors\" component = {TestErrors}/>\n            <Route path='/server-error' component = {ServerError}/>\n            <Route component={NotFound}/>\n          </Switch>\n        </Container>\n        </>\n      )}\n     />\n    \n    </>\n  );\n}\n\nexport default observer( App);\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useEffect } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nexport default function ScrollToTop() {\r\n  const { pathname } = useLocation();\r\n\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n  }, [pathname]);\r\n\r\n  return null;\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Router } from 'react-router-dom';\nimport \"semantic-ui-css/semantic.min.css\";\nimport \"react-calendar/dist/Calendar.css\";\nimport \"react-toastify/dist/ReactToastify.min.css\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport App from './app/layout/App';\nimport './app/layout/style.css';\nimport { store, StoreContext } from './app/stores/store';\nimport reportWebVitals from './reportWebVitals';\nimport {createBrowserHistory} from \"history\";\nimport ScrollToTop from './app/layout/ScrollToTop';\n\nexport const history = createBrowserHistory();\n\nReactDOM.render(\n <StoreContext.Provider value={store}>\n    <Router history = {history}>\n       <ScrollToTop/>\n       <App />\n    </Router>\n </StoreContext.Provider>\n ,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n "],"sourceRoot":""}