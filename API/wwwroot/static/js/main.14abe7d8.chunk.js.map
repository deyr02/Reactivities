{"version":3,"sources":["app/models/pagination.ts","app/api/agent.tsx","app/models/activity.ts","app/models/porfile.ts","app/stores/activityStore.ts","app/stores/profileStore.ts","app/stores/userStore.ts","app/stores/store.ts","app/stores/commonStore.ts","app/stores/modalStore.ts","app/stores/commentStore.ts","app/layout/NavBar.tsx","features/activities/dashboard/ActivityFilter.tsx","features/profiles/FollowButton.tsx","features/profiles/ProfileCard.tsx","features/activities/dashboard/ActivityListItemAttendee.tsx","features/activities/dashboard/ActivityListItem.tsx","features/activities/dashboard/ActivityList.tsx","features/activities/dashboard/ActivityListItemPlaceholder.tsx","features/activities/dashboard/ActivityDashboard.tsx","app/common/form/MyTextInput.tsx","features/users/LoginForm.tsx","features/errors/ValidationErrors.tsx","features/users/RegisterForm.tsx","features/home/Home.tsx","app/layout/LoadingComponent.tsx","app/common/form/MyTextArea.tsx","app/common/form/MySelectInput.tsx","app/common/options/CategoryOptions.tsx","app/common/form/MyDateInput.tsx","features/activities/form/ActivityForm.tsx","features/activities/details/ActivityDetailedChat.tsx","features/activities/details/ActivityDetailedHeader.tsx","features/activities/details/ActivityDetailedInfo.tsx","features/activities/details/ActivityDetailedSidebar.tsx","features/activities/details/ActivityDetails.tsx","features/errors/TestErrors.tsx","features/errors/NotFound.tsx","features/errors/ServerError.tsx","app/common/modals/ModalContainer.tsx","features/profiles/ProfileEditForm.tsx","features/profiles/ProfileAbout.tsx","features/profiles/ProfileActivities.tsx","features/profiles/ProfileFollowings.tsx","app/common/imageUpload/PhotoWidgetCropper.tsx","app/common/imageUpload/PhotoWidgetDropZone.tsx","app/common/imageUpload/PhotoUploadWidget.tsx","features/profiles/ProfilePhotos.tsx","features/profiles/ProfileContent.tsx","features/profiles/ProfileHeader.tsx","features/profiles/ProfilePage.tsx","app/layout/PrivateRoute.tsx","app/common/util/hooks.ts","features/users/RegisterSuccess.tsx","features/users/ConfirmEmail.tsx","app/layout/App.tsx","reportWebVitals.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["PaginatedResult","data","pagination","this","PagingParams","pageNumber","pageSize","axios","defaults","baseURL","process","interceptors","request","use","config","token","store","commonStore","headers","Authorization","response","a","JSON","parse","error","status","toast","method","errors","hasOwnProperty","history","push","modalStateErrors","key","flat","startsWith","userStore","logout","setServerError","Promise","reject","responseBody","requests","url","get","then","body","post","put","delete","agent","Activities","list","params","details","id","create","activity","update","attend","listActivities","username","predicate","Account","current","login","user","register","fbLogin","accessToken","refreshToken","verifyEmail","email","resendEmailConfirm","Profiles","uploadPhoto","file","formData","FormData","append","setMainPhoto","deletePhoto","updateProfile","profile","updateFollowing","listFollowings","Activity","init","Object","assign","ActivityFormValues","undefined","title","date","description","category","city","venue","Profile","displayName","image","ActivityStore","activityRegistry","Map","selectedActivity","editMode","loading","loadingInitial","pagingParams","set","setPagingParams","setPredicate","value","resetPredicate","forEach","loadingActivities","axiosParams","result","setActivity","setPagination","setLoadingInitial","console","log","loadActivity","getActivity","runInAction","isGoing","attendees","some","isHost","hostUserName","host","find","x","Date","state","createActivity","attendee","newActivity","updateActivity","updatedActivity","deleteActivity","updateAttendance","filter","attedee","cancelActivityToggle","isCancelled","clearSelectedActivity","updateAttendeeFollowing","following","followersCount","makeAutoObservable","reaction","keys","clear","URLSearchParams","toString","toISOString","Array","from","values","sort","b","getTime","entries","activitiesByDate","reduce","activities","format","ProfileStore","loadingProfile","uploading","followings","activeTab","loadingFollowings","userActivities","setActiveTab","loadProfile","photo","photos","isMain","setImage","p","UpdateProfile","setDisplayName","activityStore","followingCount","loadFollowings","loadUserActivities","UserStore","fbAccessToken","fbLoading","refreshTokenTimeout","creds","setToken","startRefreshTokenTimer","modalStore","closeModal","window","localStorage","removeItem","getUser","name","getFacebookLoginStatus","FB","getLoginStatus","authResponse","facebookLogin","apiLogin","catch","scope","stopRefreshTokenTimer","jwtToken","atob","split","timeout","exp","now","setTimeout","clearTimeout","getItem","appLoaded","setAppLoaded","setItem","modal","open","openModal","content","profileStore","commentStore","comments","hubConnection","createHubConnection","activityId","HubConnectionBuilder","withUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","LogLevel","Information","build","start","on","comment","createdAt","unshift","stopHubConnection","stop","clearComments","addComment","invoke","StoreContext","createContext","useStore","useContext","observer","isLoggedIn","Menu","inverted","fixed","Container","Item","as","NavLink","to","header","src","alt","style","marginRight","Button","positive","position","Image","avatar","spaced","Dropdown","pointing","text","Link","icon","onClick","vertical","size","width","marginTop","Header","attached","color","active","has","onChange","Reveal","animated","Content","visible","fluid","hidden","basic","e","preventDefault","handleFollow","Card","Description","str","length","substring","truncate","bio","Icon","borderColor","borderWidth","List","horizontal","map","Popup","hoverable","trigger","circular","bordered","ActivityListItem","Segment","Group","Label","texAligh","marginBottom","clearing","floated","groupedActivities","group","sub","ActivityListItemPlaceholder","Placeholder","minHeight","Line","Paragraph","secondary","disabled","useState","loadingNext","setLoadingNext","useEffect","Grid","Column","pageStart","loadMore","currentPage","hasMore","totalPages","initialLoad","Loader","MyTextInput","props","useField","field","meta","Form","Field","touched","label","initialValues","password","onSubmit","setErrors","handleSubmit","isSubmitting","className","autoComplete","textAlign","placeholder","type","render","ValidationErrors","Message","err","i","validationSchema","Yup","required","isValid","dirty","HomePage","LoginForm","Divider","LoadingComponent","Dimmer","MyTextArea","TextArea","MySelectInput","helpers","Select","clearable","options","d","setValue","onBlur","setTouched","categoryOptions","MyDateInput","selected","useHistory","useParams","nullable","enableReinitialize","uuid","handleFormSubmit","rows","placeholderText","showTimeSelect","timeCaption","dateFormat","border","resetForm","onKeyPress","shiftKey","Comment","Avatar","Author","Metadata","formatDistanceToNow","Text","whiteSpace","activityImageStyle","activityImageTextStyle","bottom","left","height","padding","zIndex","top","ribbon","verticalAlign","relaxed","divided","Extra","TestErrors","widths","baseUrl","primary","NotFound","Inline","message","Modal","onClose","setEditMode","isCurrentUser","Tab","Pane","panes","menuItem","pane","menu","onTabChange","activeIndex","handleTabChange","itemsPerRow","objectFit","Meta","PhotoWidgetCropper","imagePreview","setCropper","initialAspectRatio","aspectRatio","preview","guides","viewMode","autoCropArea","background","onInitialized","cropper","PhotoWidgetDropZone","setFiles","dzStyles","borderRadious","paddingTop","onDrop","useCallback","acceptedFiles","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoUploadWidget","files","revokeObjectURL","overflow","getCroppedCanvas","toBlob","blob","addPhotoMode","setAddPhotoMode","target","setTarget","currentTarget","handleSetMainPhoto","handleDeletePhoto","menuPosition","StatisticGroup","Statistic","PrivateRoute","Component","component","rest","useQuery","useLocation","search","RegisterSuccess","success","ConfirmEmail","Status","setStatus","handleConfirmEmailResend","getBody","location","finally","hideProgressBar","exact","path","ActivityDashboard","ActivityDetails","ActivityForm","ProfilePage","ServerError","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollToTop","pathname","scrollTo","createBrowserHistory","ReactDOM","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.14abe7d8.chunk.js","sourcesContent":["export interface Pagination {\r\n    currentPage: number;\r\n    itemsPerPage: number;\r\n    totalItems: number;\r\n    totalPages: number;\r\n}\r\n\r\nexport class PaginatedResult<T> {\r\n    data: T;\r\n    pagination: Pagination;\r\n\r\n    constructor(data: T, pagination: Pagination) {\r\n        this.data = data;\r\n        this.pagination = pagination;\r\n    }\r\n}\r\n\r\nexport class PagingParams {\r\n    pageNumber;\r\n    pageSize;\r\n\r\n    constructor(pageNumber = 1, pageSize = 5) {\r\n        this.pageNumber = pageNumber;\r\n        this.pageSize = pageSize;\r\n    }\r\n}","import axios, { AxiosError, AxiosResponse } from 'axios';\r\nimport { toast } from 'react-toastify';\r\nimport { history } from '../..';\r\nimport {Activity, ActivityFormValues} from '../models/activity';\r\nimport { PaginatedResult } from '../models/pagination';\r\nimport { Photo, Profile, UserActivity } from '../models/porfile';\r\nimport { User, UserFormValues } from '../models/user';\r\nimport { store } from '../stores/store';\r\n\r\nconst sleep = (delay:number) =>{\r\n    return new Promise ((resolve)=>{\r\n        setTimeout(resolve, delay);\r\n    })\r\n}\r\n\r\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\r\naxios.interceptors.request.use(config => {\r\n    const token = store.commonStore.token;\r\n    if(token) config.headers.Authorization = `Bearer ${token}`\r\n    return config;\r\n})\r\naxios.interceptors.response.use(async response =>{\r\n    if(process.env.NODE_ENV === 'development') await sleep(1000);\r\n    \r\n    const pagination = response.headers['pagination'];\r\n    if (pagination) {\r\n        response.data = new PaginatedResult(response.data, JSON.parse(pagination));\r\n        return response as AxiosResponse<PaginatedResult<any>>\r\n    }\r\n    \r\n    return response;\r\n   \r\n}, (error:AxiosError) =>{\r\n    const{data, status, config, headers} = error.response!;\r\n    switch (status){\r\n        case 400:\r\n            if(typeof data === 'string'){\r\n                toast.error(data);\r\n            }\r\n           // toast.error('bad request');\r\n           if(config.method === 'get' && data.errors.hasOwnProperty('id')){\r\n               history.push('/not-found');\r\n           }\r\n            if(data.errors){\r\n                const modalStateErrors = [];\r\n                for(const key in data.errors){\r\n                    if(data.errors[key]){\r\n                        modalStateErrors.push(data.errors[key]);\r\n                    }\r\n                }\r\n                throw modalStateErrors.flat();\r\n            }\r\n            else{\r\n                toast.error(data);\r\n            }\r\n\r\n            break;\r\n        case 401:\r\n            if (status === 401 && headers['www-authenticate']?.startsWith('Bearer error=\"invalid_token\"')) {\r\n                store.userStore.logout();\r\n                toast.error('Session expired - please login again');\r\n            }\r\n            break;\r\n        case 404:\r\n            history.push(\"/not-found\");\r\n            break;\r\n        case 500:\r\n            //toast.error('server error');\r\n            store.commonStore.setServerError(data);\r\n            history.push('/server-error');\r\n            break;\r\n    }\r\n\r\n    return Promise.reject(error);\r\n})\r\n\r\nconst responseBody = <T,> (response: AxiosResponse<T>) => response.data;\r\nconst requests = {\r\n    get: <T,>(url:string)=> axios.get<T>(url).then(responseBody),\r\n    post:<T,> (url:string, body:{})=> axios.post<T>(url, body).then(responseBody),\r\n    put: <T,>(url:string, body:{})=> axios.put<T>(url, body).then(responseBody),\r\n    del: <T,> (url:string)=> axios.delete<T>(url).then(responseBody),\r\n}\r\nconst Activities = {\r\n    list: (params:URLSearchParams)=> axios.get<PaginatedResult<Activity[]>>('/activities',{params})\r\n        .then(responseBody),\r\n    details: ( id: string) => requests.get<Activity>(`/activities/${id}`),\r\n    create: (activity:ActivityFormValues)=> requests.post<void>('/activities', activity),\r\n    update: (activity:ActivityFormValues)=> requests.put<void>(`/activities/${activity.id}`, activity),\r\n    delete: (id:string)=> requests.del<void>(`/activities/${id}`),\r\n    attend: (id: string) => requests.post<void>(`/activities/${id}/attend`, {}),\r\n    listActivities: (username: string, predicate: string) =>\r\n    requests.get<UserActivity[]>(`/profiles/${username}/activities?predicate=${predicate}`)\r\n}\r\n\r\nconst Account = {\r\n    current: ()=> requests.get<User>('/account'),\r\n    login:(user: UserFormValues)=> requests.post<User>('/account/login', user),\r\n    register: (user: UserFormValues)=> requests.post<User>('/account/register', user),\r\n    fbLogin: (accessToken:string)=> requests.post<User>(`/account/fbLogin?accessToken=${accessToken}`, {}),\r\n    refreshToken: () => requests.post<User>('/account/refreshToken', {}),\r\n    verifyEmail: (token: string, email: string) => \r\n        requests.post<void>(`/account/verifyEmail?token=${token}&email=${email}`, {}),\r\n    resendEmailConfirm: (email: string) => \r\n        requests.get(`/account/resendEmailConfirmationLink?email=${email}`)\r\n}\r\n\r\nconst Profiles = {\r\n    get:(username:string) => requests.get<Profile>(`/profiles/${username}`),\r\n    uploadPhoto: (file: Blob)=>{\r\n        let formData = new FormData();\r\n        formData.append('File', file);\r\n        return axios.post<Photo>('photos', formData, {\r\n            headers: {'Content-type':'multipart/form-data'}\r\n        })\r\n    },\r\n    setMainPhoto: (id:string)=> requests.post(`/photos/${id}/setMain`, {}),\r\n    deletePhoto: (id:string)=>requests.del(`/photos/${id}`),\r\n    updateProfile:(profile:Partial<Profile>)=> requests.put('/profiles', profile),\r\n    updateFollowing:(username: string)=>requests.post(`/follow/${username}`, {}),\r\n    listFollowings:(username:string, predicate:string)=> \r\n    requests.get<Profile[]>(`/follow/${username}?predicate=${predicate}`),\r\n    listActivities: (username: string, predicate: string) =>\r\n    requests.get<UserActivity[]>(`/profiles/${username}/activities?predicate=${predicate}`)\r\n\r\n}\r\n\r\n\r\n\r\n\r\nconst agent = {\r\n    Activities,\r\n    Account,\r\n    Profiles\r\n}\r\n\r\nexport default agent;","\r\nimport { Profile } from \"./porfile\";\r\n\r\n  export interface Activity {\r\n        id: string;\r\n        title: string;\r\n        date: Date| null;\r\n        description: string;\r\n        category: string;\r\n        city: string;\r\n        venue: string;\r\n        hostUserName: string;\r\n        isCancelled: boolean;\r\n        isGoing:boolean;\r\n        isHost:boolean;\r\n        host?: Profile;\r\n        attendees:Profile[];\r\n    }\r\n\r\n\r\n    export class Activity implements Activity{\r\n      constructor(init?: ActivityFormValues){\r\n        Object.assign(this, init);\r\n      }\r\n    }\r\n\r\n    export class ActivityFormValues{\r\n      id?:string = undefined;\r\n      title: string = '';\r\n      date: Date| null = null;\r\n      description: string = '';\r\n      category: string = '';\r\n      city: string = '';\r\n      venue: string = '';\r\n\r\n      constructor(activity?: ActivityFormValues){\r\n        if(activity){\r\n          this.id = activity.id;\r\n          this.title = activity.title;\r\n          this.date = activity.date;\r\n          this.description = activity.description;\r\n          this.category = activity.category;\r\n          this.city = activity.city;\r\n          this.venue = activity.venue;\r\n        }\r\n      }\r\n    }","import { User } from \"./user\";\r\n\r\nexport interface Profile{\r\n    username: string;\r\n    displayName: string;\r\n    image?: string;\r\n    bio?:string;\r\n    followersCount:number;\r\n    followingCount:number;\r\n    following:boolean;\r\n    photos?: Photo[];\r\n}\r\n\r\n\r\nexport class Profile implements Profile{\r\n    constructor(user:User){\r\n        this.username = user.username;\r\n        this.displayName = user.displayName;\r\n        this.image = user.image;\r\n    }\r\n}\r\n\r\n\r\nexport interface Photo {\r\n    id: string;\r\n    url:string;\r\n    isMain:boolean;\r\n}\r\n\r\nexport interface UserActivity {\r\n    id: string;\r\n    title: string;\r\n    category: string;\r\n    date: Date;\r\n}","import {  makeAutoObservable, reaction, runInAction} from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { Activity, ActivityFormValues } from \"../models/activity\";\r\n\r\nimport {format} from 'date-fns';\r\nimport { store } from \"./store\";\r\nimport { Profile } from \"../models/porfile\";\r\nimport { Pagination, PagingParams } from \"../models/pagination\";\r\n\r\nexport default class ActivityStore{\r\n    activityRegistry= new Map<string, Activity>();\r\n    selectedActivity: Activity | undefined = undefined;\r\n    editMode = false;\r\n    loading = false;\r\n    loadingInitial = false;\r\n    pagination:Pagination|null = null;\r\n    pagingParams = new PagingParams();\r\n    predicate = new Map().set('all', true);\r\n\r\n    constructor(){\r\n        makeAutoObservable(this)\r\n        reaction(\r\n            () => this.predicate.keys(),\r\n            () => {\r\n                this.pagingParams = new PagingParams();\r\n                this.activityRegistry.clear();\r\n                this.loadingActivities();\r\n            }\r\n        )\r\n    }\r\n\r\n    setPagingParams = (pagingParams : PagingParams)=>{\r\n        this.pagingParams = pagingParams;\r\n    }\r\n\r\n    setPredicate = (predicate: string, value: string | Date) => {\r\n        const resetPredicate = () => {\r\n            this.predicate.forEach((value, key) => {\r\n                if (key !== 'startDate') this.predicate.delete(key);\r\n            })\r\n        }\r\n        switch (predicate) {\r\n            case 'all':\r\n                resetPredicate();\r\n                this.predicate.set('all', true);\r\n                break;\r\n            case 'isGoing':\r\n                resetPredicate();\r\n                this.predicate.set('isGoing', true);\r\n                break;\r\n            case 'isHost':\r\n                resetPredicate();\r\n                this.predicate.set('isHost', true);\r\n                break;\r\n            case 'startDate':\r\n                this.predicate.delete('startDate');\r\n                this.predicate.set('startDate', value);\r\n        }\r\n    } \r\n\r\n    get axiosParams(){\r\n        const params = new URLSearchParams();\r\n        params.append(\"pageNumber\", this.pagingParams.pageNumber.toString());\r\n        params.append('pageSize', this.pagingParams.pageSize.toString());\r\n        this.predicate.forEach((value, key)=>{\r\n            if(key === 'startDate'){\r\n                params.append(key, (value as Date).toISOString())\r\n            }\r\n            else{\r\n                params.append(key, value);\r\n            }\r\n        })\r\n        return params;\r\n    }\r\n\r\n\r\n    get activitiesByDate(){\r\n        return Array.from(this.activityRegistry.values()).sort((a,b)=> a.date!.getTime() - b.date!.getTime());\r\n    }\r\n\r\n    get groupedActivities(){\r\n        return Object.entries(\r\n            this.activitiesByDate.reduce((activities, activity) =>{\r\n                const date = format(activity.date!, 'dd MM yyyy');\r\n                activities[date] = activities[date] ? [...activities[date], activity] : [activity];\r\n                return activities;\r\n            },{} as {[key:string]: Activity[]})\r\n        )\r\n    }\r\n    loadingActivities = async() => {\r\n        this.loadingInitial = true;\r\n        try{\r\n            const result = await agent.Activities.list(this.axiosParams);\r\n            result.data.forEach(activity =>{\r\n                this.setActivity(activity);\r\n            });\r\n            this.setPagination(result.pagination);\r\n            this.setLoadingInitial(false); \r\n           \r\n        }catch(error){\r\n            console.log(error);\r\n            this.setLoadingInitial(false);            \r\n\r\n        }\r\n    }\r\n    setPagination = (pagination:Pagination)=>{\r\n        this.pagination = pagination;\r\n    }\r\n\r\n    loadActivity = async(id:string)=>{\r\n        let activity = this.getActivity(id);\r\n        if(activity){\r\n            this.selectedActivity = activity;\r\n            return activity;\r\n        }\r\n        else{\r\n            this.loadingInitial = true;\r\n            try{\r\n                activity = await agent.Activities.details(id);\r\n                this.setActivity(activity);\r\n                runInAction(()=>{\r\n                     this.selectedActivity = activity;\r\n                });\r\n                this.setLoadingInitial(false);\r\n                return activity;\r\n            }\r\n            catch(error){\r\n                console.log(error);\r\n                this.setLoadingInitial(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    private getActivity = (id:string)=>{\r\n        return this.activityRegistry.get(id);\r\n    }\r\n\r\n    private setActivity = (activity: Activity)=>{\r\n        const user = store.userStore.user;\r\n\r\n        if(user){\r\n            activity.isGoing = activity.attendees?.some(a => a.username === user.username);\r\n            activity.isHost = activity.hostUserName === user.username;\r\n            activity.host = activity.attendees?.find(x=> x.username === activity.hostUserName);\r\n\r\n        }\r\n\r\n\r\n         activity.date = new Date(activity.date!);\r\n        this.activityRegistry.set(activity.id, activity);\r\n    }\r\n\r\n\r\n    setLoadingInitial = (state: boolean)=>{\r\n        this.loadingInitial = state;\r\n    }\r\n\r\n   \r\n\r\n\r\n    createActivity = async (activity:ActivityFormValues)=>{\r\n        const user = store.userStore.user;\r\n        const attendee = new Profile(user!);\r\n        try{\r\n            await agent.Activities.create(activity);\r\n            const newActivity = new Activity(activity);\r\n            newActivity.hostUserName = user!.username;\r\n            newActivity.attendees =[attendee];\r\n            this.setActivity(newActivity);\r\n            runInAction(()=>{\r\n                this.selectedActivity = newActivity;\r\n\r\n            })\r\n        }catch(error){\r\n            console.log(error);\r\n          \r\n        }\r\n        \r\n    }\r\n\r\n    updateActivity= async (activity:ActivityFormValues)=>{\r\n        try{\r\n            await agent.Activities.update(activity);\r\n            runInAction(()=>{\r\n                if(activity.id){\r\n                    let updatedActivity = {...this.getActivity(activity.id), ...activity}\r\n                    this.activityRegistry.set(activity.id, updatedActivity as Activity);\r\n                    this.selectedActivity = updatedActivity as Activity;\r\n                }\r\n               \r\n               \r\n            })\r\n        }\r\n        catch(error){\r\n            console.log(error);\r\n            runInAction(()=>{\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n    deleteActivity = async (id:string)=>{\r\n        this.loading = true;\r\n        try{\r\n            await agent.Activities.delete(id);\r\n            runInAction(()=>{\r\n                this.activityRegistry.delete(id);\r\n                this.loading = false;\r\n\r\n\r\n            })\r\n\r\n        }catch(error){\r\n            console.log(error);\r\n            runInAction(()=>{\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    updateAttendance = async () =>{\r\n        const user = store.userStore.user;\r\n        this.loading = true;\r\n\r\n        try{\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(()=>{\r\n                if(this.selectedActivity?.isGoing){\r\n                    this.selectedActivity.attendees = this.selectedActivity.attendees?.filter(a => a.username !== user?.username);\r\n                    this.selectedActivity.isGoing = false;\r\n                }\r\n                else{\r\n                    const attedee = new Profile(user!);\r\n                    this.selectedActivity?.attendees?.push(attedee);\r\n                    this.selectedActivity!.isGoing = true;\r\n                }\r\n\r\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!)\r\n            })\r\n        }\r\n        catch (error){\r\n            console.log(error)\r\n        }\r\n        finally{\r\n            runInAction(()=> this.loading = false);\r\n        }\r\n    }\r\n\r\n    cancelActivityToggle = async ()=> {\r\n        this.loading = true;\r\n\r\n        try{\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(()=>{\r\n                this.selectedActivity!.isCancelled = !this.selectedActivity!.isCancelled;\r\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!)\r\n            })\r\n\r\n        }\r\n        catch(error){\r\n            console.log(error);\r\n        }\r\n        finally{\r\n            runInAction(()=> this.loading = false);\r\n        }\r\n    }\r\n\r\n    clearSelectedActivity = () => {\r\n        this.selectedActivity = undefined;\r\n    }\r\n\r\n    updateAttendeeFollowing = (username: string)=>{\r\n        this.activityRegistry.forEach(activity =>{\r\n            activity.attendees.forEach(attendee =>{\r\n                if(attendee.username === username){\r\n                    attendee.following ? attendee.followersCount-- : attendee.followersCount++;\r\n                    attendee.following = !attendee.following;\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n}","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { Photo, Profile, UserActivity } from \"../models/porfile\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class ProfileStore{\r\n    profile: Profile | null = null;\r\n    loadingProfile = false;\r\n    uploading = false;\r\n    loading = false;\r\n    followings: Profile[] = [];\r\n    activeTab = 0;\r\n\r\n    loadingFollowings: boolean = false;\r\n    userActivities: UserActivity[] = [];\r\n    loadingActivities = false;\r\n\r\n    constructor(){\r\n        makeAutoObservable(this);\r\n        reaction (\r\n            ()=> this.activeTab,\r\n            activeTab => {\r\n                if(activeTab ===3 || activeTab === 4 ){\r\n                    const predicate =  activeTab ===3? \"followers\": \"followings\";\r\n                    this.loadFollowings(predicate);\r\n                }\r\n                else{\r\n                    this.followings = [];\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    setActiveTab = (activeTab: any)=>{\r\n        this.activeTab = activeTab;\r\n    }\r\n\r\n\r\n    get isCurrentUser(){\r\n        if(store.userStore.user && this.profile){\r\n            return store.userStore.user.username === this.profile.username;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    loadProfile = async(username: string)=>{\r\n        this.loadingProfile = true;\r\n        try{\r\n            const profile = await agent.Profiles.get(username);\r\n            runInAction(()=>{\r\n                this.profile = profile;\r\n                this.loadingProfile = false;\r\n            })\r\n        }\r\n        catch(error){\r\n            console.log(error);\r\n            runInAction(()=> this.loadingProfile= false);   \r\n        }\r\n    }\r\n\r\n    uploadPhoto = async (file:Blob)=>{\r\n        this.uploading = true;\r\n        try{\r\n            const response = await agent.Profiles.uploadPhoto(file);\r\n            const photo = response.data;\r\n            runInAction(()=>{\r\n                if(this.profile){\r\n                    this.profile.photos?.push(photo);\r\n                    if(photo.isMain && store.userStore.user){\r\n                        store.userStore.setImage(photo.url);\r\n                        this.profile.image = photo.url;\r\n                    }\r\n                }\r\n                this.uploading = false;\r\n            })\r\n        }\r\n        catch(error){\r\n            console.log(error);\r\n            runInAction(()=>this.uploading = false);\r\n        }\r\n    }\r\n\r\n    setMainPhoto = async (photo:Photo) => {\r\n        this.loading = true;\r\n        try{\r\n            await agent.Profiles.setMainPhoto(photo.id);\r\n            store.userStore.setImage(photo.url);\r\n            runInAction(()=>{\r\n                if(this.profile && this.profile.photos){\r\n                    this.profile.photos.find(p=> p.isMain)!.isMain = false;\r\n                    this.profile.photos.find(p=> p.id===photo.id)!.isMain = true;\r\n                    this.profile.image = photo.url;\r\n                    this.loading = false;\r\n                }\r\n            })\r\n\r\n        }\r\n        catch(error){\r\n            console.log(error);\r\n            runInAction(()=> this.loading = false)\r\n        }\r\n    }\r\n\r\n    deletePhoto = async(photo: Photo)=>{\r\n        this.loading = true;\r\n        try{\r\n            await agent.Profiles.deletePhoto(photo.id);\r\n            runInAction(()=>{\r\n                if(this.profile){\r\n                    this.profile.photos = this.profile.photos?.filter(p=> p.id !== photo.id);\r\n                    this.loading = false;\r\n                }\r\n            })\r\n\r\n        }\r\n        catch(error){\r\n            console.log(error);\r\n            runInAction(()=> this.loading= false)\r\n        }\r\n    }\r\n\r\n    UpdateProfile = async (profile: Partial<Profile>) => {\r\n        this.loading = true;\r\n        try{\r\n            await agent.Profiles.updateProfile(profile);\r\n            runInAction(()=>{\r\n                if(profile.displayName && profile.displayName !== store.userStore.user?.displayName){\r\n                    store.userStore.setDisplayName(profile.displayName);\r\n                }\r\n                this.profile = {...this.profile, ...profile as Profile};\r\n                this.loading = false;\r\n            })\r\n\r\n        }\r\n        catch(error){\r\n            console.log(error);\r\n            runInAction(()=> this.loading = false);\r\n        }\r\n    }\r\n\r\n\r\n    updateFollowing = async (username:string, following:boolean)=>{\r\n        this.loading = true;\r\n        try{\r\n            await agent.Profiles.updateFollowing(username);\r\n            store.activityStore.updateAttendeeFollowing(username);\r\n            runInAction(()=>{\r\n                if(this.profile && this.profile.username !== store.userStore.user?.username && this.profile.username === username){\r\n                    following? this.profile.followersCount ++: this.profile.followersCount --;\r\n                    this.profile.following = !this.profile.following;\r\n                }\r\n                if(this.profile && this.profile.username === store.userStore.user?.username)\r\n                {\r\n                    following? this.profile.followingCount ++: this.profile.followingCount --;\r\n\r\n                }\r\n\r\n                this.followings.forEach(profile =>{\r\n                    if(profile.username === username){\r\n                        profile.following?profile.followersCount--: profile.followersCount++;\r\n                        profile.following = !profile.following;\r\n                    }\r\n                })\r\n                this.loading = false;\r\n            })\r\n\r\n        }\r\n        catch(error){\r\n            console.log(error);\r\n            runInAction(()=> this.loading = false);\r\n        }\r\n    }\r\n\r\n     loadFollowings = async (predicate: string) => {\r\n        this.loadingFollowings = true;\r\n        try {\r\n            const followings = await agent.Profiles.listFollowings(this.profile!.username, predicate);\r\n            runInAction(() => {\r\n                this.followings = followings;\r\n                this.loadingFollowings = false;\r\n            })\r\n        } catch (error) {\r\n            runInAction(() => this.loadingFollowings = false);\r\n        }\r\n    }\r\n\r\n    loadUserActivities = async (username: string, predicate?: string) => {\r\n        this.loadingActivities = true;\r\n        try {\r\n            const activities = await agent.Profiles.listActivities(username, predicate!);\r\n            runInAction(() => {\r\n                this.userActivities = activities;\r\n                this.loadingActivities = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loadingActivities = false;\r\n            })\r\n        }\r\n    }\r\n}","import { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { history } from \"../..\";\r\nimport agent from \"../api/agent\";\r\nimport { User, UserFormValues } from \"../models/user\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class UserStore {\r\n    user: User | null = null;\r\n    fbAccessToken: string | null = null;\r\n    fbLoading = false;\r\n    refreshTokenTimeout: any;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    get isLoggedIn() {\r\n        return !!this.user;\r\n    }\r\n\r\n    login = async (creds: UserFormValues) => {\r\n        try {\r\n            const user = await agent.Account.login(creds);\r\n            store.commonStore.setToken(user.token);\r\n            this.startRefreshTokenTimer(user);\r\n            runInAction(() => this.user = user);\r\n            history.push('/activities');\r\n            store.modalStore.closeModal();\r\n        }\r\n        catch (error) {\r\n            throw error;\r\n        }\r\n\r\n\r\n    }\r\n\r\n    logout = () => {\r\n        store.commonStore.setToken(null);\r\n        window.localStorage.removeItem('jwt');\r\n        this.user = null;\r\n        history.push('/');\r\n\r\n    }\r\n\r\n    getUser = async () => {\r\n        try {\r\n            const user = await agent.Account.current();\r\n            store.commonStore.setToken(user.token);\r\n            runInAction(() => this.user = user);\r\n            this.startRefreshTokenTimer(user);\r\n        }\r\n        catch (error) {\r\n            console.log(error);\r\n        }\r\n\r\n    }\r\n\r\n    register = async (creds: UserFormValues) => {\r\n        try {\r\n            await agent.Account.register(creds);\r\n            history.push(`/account/registerSuccess?email=${creds.email}`);\r\n            store.modalStore.closeModal();\r\n        }\r\n        catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    setImage = (image: string) => {\r\n        if (this.user) this.user.image = image;\r\n    }\r\n\r\n    setDisplayName = (name: string) => {\r\n        if (this.user) this.user.displayName = name;\r\n    }\r\n\r\n    getFacebookLoginStatus = async () => {\r\n        window.FB.getLoginStatus(response => {\r\n            if (response.status === 'connected') {\r\n                this.fbAccessToken = response.authResponse.accessToken;\r\n            }\r\n        })\r\n    }\r\n\r\n    facebookLogin = () => {\r\n        this.fbLoading = true;\r\n        const apiLogin = (accessToken: string) => {\r\n            agent.Account.fbLogin(accessToken).then(user => {\r\n                store.commonStore.setToken(user.token);\r\n                this.startRefreshTokenTimer(user);\r\n                runInAction(() => {\r\n                    this.user = user;\r\n                    this.fbLoading = false;\r\n                })\r\n                history.push('/activities');\r\n            }).catch(error => {\r\n                console.log(error);\r\n                runInAction(() => this.fbLoading = false);\r\n            })\r\n        }\r\n        if (this.fbAccessToken) {\r\n            apiLogin(this.fbAccessToken);\r\n        } else {\r\n            window.FB.login(response => {\r\n                apiLogin(response.authResponse.accessToken);\r\n            }, { scope: 'public_profile,email' })\r\n        }\r\n    }\r\n\r\n    refreshToken = async () => {\r\n        this.stopRefreshTokenTimer();\r\n        try {\r\n            const user = await agent.Account.refreshToken();\r\n            runInAction(() => this.user = user);\r\n            store.commonStore.setToken(user.token);\r\n            this.startRefreshTokenTimer(user);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    private startRefreshTokenTimer(user: User) {\r\n        const jwtToken = JSON.parse(atob(user.token.split('.')[1]));\r\n        const expires = new Date(jwtToken.exp * 1000);\r\n        const timeout = expires.getTime() - Date.now() - (60 * 1000);\r\n        this.refreshTokenTimeout = setTimeout(this.refreshToken, timeout);\r\n    }\r\n\r\n    private stopRefreshTokenTimer() {\r\n        clearTimeout(this.refreshTokenTimeout);\r\n    }\r\n\r\n\r\n}","import { createContext, useContext } from \"react\";\r\nimport ActivityStore from \"./activityStore\";\r\nimport CommentStore from \"./commentStore\";\r\nimport CommonStore from \"./commonStore\";\r\nimport ModalStore from \"./modalStore\";\r\nimport ProfileStore from \"./profileStore\";\r\nimport UserStore from \"./userStore\";\r\n\r\ninterface Store{\r\n    activityStore: ActivityStore;\r\n    commonStore: CommonStore;\r\n    userStore: UserStore;\r\n    modalStore: ModalStore;\r\n    profileStore: ProfileStore;\r\n    commentStore: CommentStore;\r\n}\r\n\r\nexport const store: Store = {\r\n    activityStore : new ActivityStore(),\r\n    commonStore: new CommonStore(),\r\n    userStore: new UserStore(),\r\n    modalStore: new ModalStore(),\r\n    profileStore: new ProfileStore(),\r\n    commentStore:new CommentStore(),\r\n}\r\n\r\nexport const StoreContext = createContext(store);\r\n\r\nexport function useStore(){\r\n    return useContext(StoreContext);\r\n}","import { makeAutoObservable, reaction } from \"mobx\";\r\nimport { ServerError } from \"../models/serverError\";\r\n\r\nexport default class CommonStore{\r\n    error: ServerError|null = null;\r\n    token:string|null = window.localStorage.getItem('jwt');\r\n    appLoaded = false;\r\n\r\n    constructor(){\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            ()=>this.token,\r\n            token =>{\r\n                if(token){\r\n                    window.localStorage.setItem('jwt', token)\r\n                }else{\r\n                    window.localStorage.removeItem('jwt')\r\n                }\r\n            }\r\n        )\r\n\r\n\r\n    }\r\n    setServerError = (error:ServerError)=> {\r\n        this.error = error;\r\n    }\r\n\r\n    setToken = (token:string|null)=>{\r\n        this.token = token;\r\n    }\r\n    setAppLoaded = () => {\r\n        this.appLoaded = true;\r\n    }\r\n\r\n}","import { makeAutoObservable } from \"mobx\"\r\n\r\ninterface Modal{\r\n    open: boolean,\r\n    body: JSX.Element | null\r\n}\r\n\r\n\r\nexport default class ModalStore{\r\n    modal:Modal = {\r\n        open: false,\r\n        body: null\r\n    }\r\n\r\n\r\n    constructor(){\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    openModal = (content:JSX.Element)=> {\r\n        this.modal.open = true;\r\n        this.modal.body = content;\r\n    }\r\n\r\n    closeModal = ()=>{\r\n        this.modal.open = false;\r\n        this.modal.body = null;\r\n    }\r\n}","import { HubConnection, HubConnectionBuilder, LogLevel } from \"@microsoft/signalr\";\r\nimport { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { ChatComment } from \"../models/comment\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class CommentStore{\r\n    comments:ChatComment[] = [];\r\n    hubConnection: HubConnection|null = null;\r\n\r\n    constructor(){\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n\r\n    createHubConnection = (activityId: string) => {\r\n        if (store.activityStore.selectedActivity) {\r\n            this.hubConnection = new HubConnectionBuilder()\r\n                .withUrl( process.env.REACT_APP_CHAT_URL + '?activityId=' + activityId, {\r\n                    accessTokenFactory: () => store.userStore.user?.token!\r\n                })\r\n                .withAutomaticReconnect()\r\n                .configureLogging(LogLevel.Information)\r\n                .build();\r\n\r\n            this.hubConnection?.start().catch(error => console.log('Error establishing the connection: ', error));\r\n\r\n            this.hubConnection?.on('LoadComments', (comments: ChatComment[]) => {\r\n                runInAction(()=>{   \r\n                    comments.forEach(comment =>{\r\n                        comment.createdAt = new Date(comment.createdAt+ 'Z');\r\n                    })\r\n                    this.comments = comments;\r\n                }); \r\n            })\r\n\r\n            this.hubConnection?.on('ReceivedComment', (comment: ChatComment) => {\r\n                runInAction(()=>{\r\n                    comment.createdAt = new Date(comment.createdAt);\r\n                    this.comments.unshift(comment)\r\n                })\r\n            })\r\n        }\r\n    }\r\n\r\n    stopHubConnection = () => {\r\n        this.hubConnection?.stop().catch(error => console.log('Error stopping connection: ', error));\r\n    }\r\n\r\n    clearComments = () => {\r\n        this.comments = [];\r\n        this.stopHubConnection();\r\n    }\r\n\r\n    addComment = async (values: any) => {\r\n        values.activityId = store.activityStore.selectedActivity?.id;\r\n        try {\r\n            await this.hubConnection?.invoke('SendComment', values);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n}","import { observer } from 'mobx-react-lite';\r\nimport  React from 'react';\r\nimport { Link, NavLink } from 'react-router-dom';\r\nimport { Button, Container, Dropdown, Image, Menu } from 'semantic-ui-react';\r\nimport { useStore } from '../stores/store';\r\n\r\n\r\nexport default observer( function NavBar(){\r\n    const{userStore: {user, logout, isLoggedIn}} = useStore();\r\n    return(\r\n        <Menu inverted fixed='top'>\r\n            <Container>\r\n                <Menu.Item as={NavLink} to='/' header>\r\n                    <img src = \"/assets/logo.png\" alt = \"logo\" style={{marginRight:'10px'}}/>\r\n                    Reactivities\r\n                </Menu.Item>\r\n                {isLoggedIn &&\r\n                <>\r\n                    <Menu.Item as={NavLink} to='/activities' name=\"Activities\"/>\r\n                    <Menu.Item as={NavLink} to='/errors' name=\"Errors\"/>\r\n                    <Menu.Item>\r\n                        <Button as={NavLink} to='/createActivity' positive content=\"Create Activity\"/>\r\n                    </Menu.Item>\r\n\r\n                    <Menu.Item position = 'right'>\r\n                        <Image src= {user?.image || '/assets/user.png'} avatar spaced= 'right' />\r\n                        <Dropdown pointing ='top left' text= {user?.displayName}>\r\n                            <Dropdown.Menu>\r\n                                <Dropdown.Item as = {Link} to={`/profile/${user?.username}`} text='My Profile' icon = 'user'/>\r\n                                <Dropdown.Item onClick={logout} text=\"Log out\" icon=\"power\"/>\r\n                            </Dropdown.Menu>\r\n                            \r\n                        </Dropdown>\r\n                    </Menu.Item>\r\n                </>}\r\n                \r\n            </Container>\r\n        </Menu>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport Calendar from 'react-calendar';\r\nimport { Header, Menu } from 'semantic-ui-react';\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\nexport default observer ( function ActivityFilter(){\r\n    const {activityStore:{predicate, setPredicate}} = useStore();\r\n    return(\r\n        <>\r\n            <Menu vertical size='large' style={{width:'100%', marginTop: 25}}> \r\n                <Header icon='filter' attached color='teal' content='Fileter'></Header>\r\n                <Menu.Item \r\n                    content='All Activities'\r\n                    active={predicate.has('all')}\r\n                    onClick={()=> setPredicate('all', 'true')}\r\n                />\r\n                <Menu.Item \r\n                    content=\"I'm going\"\r\n                    active={predicate.has('isGoing')}\r\n                    onClick={()=> setPredicate('isGoing', 'true')}\r\n                />\r\n                <Menu.Item \r\n                    content=\"I'm hosting\"\r\n                    active={predicate.has('isHost')}\r\n                    onClick={()=> setPredicate('isHost', 'true')}\r\n                />\r\n            </Menu>\r\n            <Header/>\r\n            <Calendar\r\n                onChange = {(date)=> setPredicate('startDate', date as Date)}\r\n                value = {predicate.get(\"startDate\") || new Date()}\r\n\r\n\r\n            />\r\n        </>\r\n        \r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport { SyntheticEvent } from \"react\";\r\nimport { Button, Reveal } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/models/porfile\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\ninterface Props{\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function FollowButton({profile}:Props){\r\n    const{profileStore, userStore} = useStore();\r\n    const{updateFollowing, loading}= profileStore;\r\n\r\n    if(userStore.user?.username === profile.username) return null;\r\n\r\n    function handleFollow(e:SyntheticEvent, username:string){\r\n        e.preventDefault();\r\n        profile.following ? updateFollowing(username, false): updateFollowing(username, true);\r\n    }\r\n    return(\r\n        <Reveal animated= 'move'>\r\n            <Reveal.Content visible style= {{width:'100%'}}>\r\n                <Button \r\n                    fluid \r\n                    color='teal' \r\n                    content= { profile.following?'Following': 'Not Following'}\r\n\r\n                />\r\n            </Reveal.Content>\r\n\r\n                <Reveal.Content hidden style= {{width:'100%'}}>\r\n                <Button \r\n                    fluid \r\n                    basic\r\n                    color={profile.following? \"red\": \"green\"} \r\n                    content= {profile.following?\"Unfollow\": \"Follow\"}\r\n                    loading = {loading}\r\n                    onClick ={(e)=> handleFollow(e, profile.username)}\r\n                />\r\n            </Reveal.Content>\r\n        </Reveal>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport { Link } from 'react-router-dom';\r\nimport { Card, Icon, Image } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/porfile';\r\nimport FollowButton from './FollowButton';\r\n\r\ninterface Props{\r\n    profile: Profile;\r\n}\r\n\r\n\r\n\r\nexport default observer(function ProfileCard({profile}:Props){\r\n   \r\n   function truncate(str: string | undefined){\r\n       if(str){\r\n           return str.length >40 ? str.substring(0, 37) + '...' : str;\r\n       }\r\n   }\r\n   \r\n    return(\r\n        <Card as= {Link} to ={`/profile/${profile.username}`}>\r\n            <Image src= {profile.image || '/assets/user.png'} />\r\n            <Card.Content>\r\n                <Card.Header>{profile.displayName}</Card.Header>\r\n                <Card.Description>{truncate(profile.bio)}</Card.Description>\r\n            </Card.Content>\r\n            <Card.Content>\r\n                <Icon name='user'/>\r\n                {profile.followersCount} followers\r\n            </Card.Content>\r\n             <FollowButton profile= {profile}/>\r\n            \r\n        </Card>\r\n    )\r\n\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Image, List, Popup } from 'semantic-ui-react';\r\nimport { Profile } from '../../../app/models/porfile';\r\nimport ProfileCard from '../../profiles/ProfileCard';\r\n\r\n\r\ninterface Props{\r\n    attendees: Profile[];\r\n}\r\n\r\nexport default observer( function ActivityListItemAttendee({attendees}: Props){\r\n    const style = {\r\n        borderColor: 'orange',\r\n        borderWidth:3\r\n    }\r\n    return(\r\n        <List horizontal>\r\n            {attendees.map(attendee => (\r\n                <Popup\r\n                    hoverable\r\n                    key= {attendee.username}\r\n                    trigger={\r\n                        <List.Item as={Link} to ={`/profile/${attendee.username}`} key={attendee.username}>\r\n                            <Image \r\n                                size='mini' \r\n                                circular  \r\n                                src={ attendee.image || '/assets/user.png'}\r\n                                bordered\r\n                                style = {attendee.following ? style : null}\r\n                            />\r\n                        </List.Item>\r\n                    }\r\n                >\r\n                    <Popup.Content>\r\n                        <ProfileCard profile= {attendee} />\r\n                    </Popup.Content>\r\n\r\n                </Popup>\r\n               \r\n\r\n            ))}\r\n           \r\n        </List>\r\n\r\n    )\r\n})","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Icon, Item, Label, Segment } from 'semantic-ui-react';\r\nimport { Activity } from '../../../app/models/activity';\r\n\r\nimport {format} from 'date-fns';\r\nimport ActivityListItemAttendee from './ActivityListItemAttendee';\r\n\r\ninterface Props{\r\n    activity: Activity\r\n}\r\n\r\nexport default function ActivityListItem({activity}:Props){\r\n\r\n   \r\n\r\n    return (\r\n        <Segment.Group>\r\n            <Segment>\r\n                {activity.isCancelled && (\r\n                    <Label \r\n                        attached = \"top\"\r\n                        color = \"red\"\r\n                        content = \"Cancelled\"\r\n                        style = {{texAligh:\"center\"}}\r\n                    />\r\n                )}\r\n                <Item.Group>\r\n                    <Item>\r\n                        <Item.Image  style = {{marginBottom: 3}}  size ='tiny' circular src= {activity.host?.image ||'assets/user.png'} />\r\n                        <Item.Content>\r\n                            <Item.Header as= {Link} to={`/activities/${activity.id}`}>\r\n                                {activity.title}\r\n                            </Item.Header>\r\n                             <Item.Description>\r\n                                Hosted by  <Link to={`/profile/${activity.hostUserName}`}>{ activity.host?.displayName}</Link> \r\n                            </Item.Description>\r\n                            {activity.isHost && (\r\n                                <Item.Description>\r\n                                    <Label basic color='orange'>\r\n                                        You are hosting this activity\r\n                                    </Label>\r\n                                </Item.Description>\r\n                            )}\r\n                            {activity.isGoing && !activity.isHost && (\r\n                                <Item.Description>\r\n                                    <Label basic color='green'>\r\n                                        You are going to this activity\r\n                                    </Label>\r\n                                </Item.Description>\r\n                            )}\r\n                        </Item.Content>\r\n                       \r\n                    </Item>\r\n                </Item.Group>\r\n            </Segment>\r\n            <Segment>\r\n                <span>\r\n                    <Icon name = 'clock'/> {format( activity.date!, 'dd MMMM yyyy h:mm aa')}\r\n                    <Icon name = 'marker'/> {activity.venue}\r\n                </span>\r\n            </Segment>\r\n            <Segment>\r\n                <ActivityListItemAttendee attendees = {activity.attendees!} />\r\n            </Segment>\r\n            <Segment clearing>\r\n                <span>{activity.description}</span>\r\n                <Button\r\n                    as = {Link}\r\n                    to = {`/activities/${activity.id}`}\r\n                    color=\"teal\"\r\n                    content = \"View\"\r\n                    floated='right'\r\n                />\r\n            </Segment>\r\n        </Segment.Group>\r\n\r\n\r\n        // <Item key={activity.id}>\r\n        //     <Item.Content>\r\n        //         <Item.Header as= 'a'>{activity.title} </Item.Header>\r\n        //         <Item.Meta>{activity.date}</Item.Meta>\r\n        //         <Item.Description>\r\n        //             <div>{activity.description}</div>\r\n        //             <div>{activity.city}, {activity.venue}</div>\r\n        //         </Item.Description>\r\n        //         <Item.Extra>\r\n        //             <Button as={Link} to={`/activities/${activity.id}`} floated='right' content= \"View\" color=\"blue\"/>\r\n        //             <Button\r\n        //                 name = {activity.id}\r\n        //                 loading={loading && target === activity.id} \r\n        //                 onClick={(e)=> handlActivityDelete(e, activity.id)} \r\n        //                 floated='right' \r\n        //                 content= \"Delete\" \r\n        //                 color=\"red\"\r\n        //             />\r\n        //             <Label basic content={activity.category} />\r\n        //         </Item.Extra>\r\n        //     </Item.Content>\r\n        // </Item> \r\n    )\r\n}","import { observer } from 'mobx-react-lite';\r\nimport { Fragment } from 'react';\r\nimport {Header} from 'semantic-ui-react';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport ActivityListItem from './ActivityListItem';\r\n\r\nexport default observer( function ActivityList(){\r\n    const{activityStore} = useStore();\r\n    const{groupedActivities}= activityStore\r\n   \r\n\r\n    return(\r\n        <>\r\n        {groupedActivities.map(([group, activities])=>(\r\n            <Fragment key= {group}>\r\n                <Header sub color='teal'>\r\n                    {group}\r\n                </Header>\r\n                \r\n                {activities.map(activity =>(\r\n                    <ActivityListItem key={activity.id} activity ={activity}/>\r\n                ))}\r\n               \r\n            </Fragment>\r\n        ))}\r\n        </>\r\n     \r\n    )\r\n})","import React, { Fragment } from 'react';\r\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\r\n\r\nexport default function ActivityListItemPlaceholder() {\r\n    return (\r\n        <Fragment>\r\n            <Placeholder fluid style={{ marginTop: 25 }}>\r\n                <Segment.Group>\r\n                    <Segment style={{ minHeight: 110 }}>\r\n                        <Placeholder>\r\n                            <Placeholder.Header image>\r\n                                <Placeholder.Line />\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Header>\r\n                            <Placeholder.Paragraph>\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Paragraph>\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment>\r\n                        <Placeholder>\r\n                            <Placeholder.Line />\r\n                            <Placeholder.Line />\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment secondary style={{ minHeight: 70 }} />\r\n                    <Segment clearing>\r\n                        <Button disabled color='blue' floated='right' content='View' />\r\n                    </Segment>\r\n                </Segment.Group>\r\n            </Placeholder>\r\n        </Fragment>\r\n    );\r\n}; ","import { observer } from 'mobx-react-lite';\r\nimport { useEffect, useState } from 'react';\r\nimport InfiniteScroll from 'react-infinite-scroller';\r\nimport { Grid, Loader } from 'semantic-ui-react';\r\nimport { PagingParams } from '../../../app/models/pagination';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport ActivityFilter from './ActivityFilter';\r\nimport ActivityList from './ActivityList';\r\nimport ActivityListItemPlaceholder from './ActivityListItemPlaceholder';\r\n\r\n\r\n\r\n\r\nexport default observer( function ActivityDashboard(){\r\n    const {activityStore} = useStore();\r\n    const {loadingActivities, activityRegistry, setPagingParams, pagination} = activityStore;\r\n    const[loadingNext, setLoadingNext] = useState(false);\r\n\r\n    function handleGetNext(){\r\n        setLoadingNext(true);\r\n        setPagingParams(new PagingParams(pagination!.currentPage+1))\r\n        loadingActivities().then(()=>setLoadingNext(false));\r\n    }\r\n\r\n    useEffect(()=>{\r\n    if(activityRegistry.size <=1) loadingActivities();\r\n    }, [activityRegistry.size, loadingActivities])\r\n    \r\n\r\n    return(\r\n        <Grid>\r\n            <Grid.Column width = '10'>\r\n                {activityStore.loadingInitial && !loadingNext ?(\r\n                    <>\r\n                        <ActivityListItemPlaceholder/>\r\n                        <ActivityListItemPlaceholder/>\r\n                    </>\r\n                ):(\r\n                    <InfiniteScroll\r\n                        pageStart={0}\r\n                        loadMore= {handleGetNext}\r\n                        hasMore = {!loadingNext && !!pagination && pagination.currentPage < pagination.totalPages}\r\n                        initialLoad= {false}\r\n                    >\r\n                        <ActivityList />\r\n                    </InfiniteScroll>\r\n                )}\r\n            \r\n            </Grid.Column>\r\n            <Grid.Column width=\"6\">\r\n                <ActivityFilter/>\r\n            </Grid.Column>\r\n            <Grid.Column width ={10}>\r\n                <Loader active = {loadingNext} />\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import { useField } from 'formik';\r\nimport React from 'react';\r\nimport { Form, Label } from 'semantic-ui-react';\r\n\r\ninterface Props{\r\n    placeholder:string,\r\n    name : string,\r\n    type?: string,\r\n    label?: string,\r\n}\r\n\r\nexport default function MyTextInput(props:Props){\r\n\r\n    const [field, meta] = useField(props.name);\r\n    return(\r\n        <Form.Field error = {meta.touched && !!meta.error }>\r\n            <label>{props.label}</label>\r\n            <input {...field} {...props}/>\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ): null}\r\n        </Form.Field>\r\n    )\r\n}","import { ErrorMessage, Form, Formik } from 'formik';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Button, Header, Label } from 'semantic-ui-react';\r\nimport MyTextInput from '../../app/common/form/MyTextInput';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\nexport default observer( function Loginform(){\r\n    const {userStore} = useStore();\r\n    return(\r\n        <Formik\r\n            initialValues = {{email:'', password:'', error: null}}\r\n            onSubmit = {(values, {setErrors}) => userStore.login(values).catch(error=> \r\n                setErrors({error: error.response.data}))}\r\n        >\r\n            {({handleSubmit, isSubmitting, errors})=>(\r\n                <Form\r\n                    className = 'ui form'\r\n                    onSubmit = {handleSubmit}\r\n                    autoComplete= \"off\"\r\n                >\r\n                    <Header as='h2' content='Login to Reactivities' color='teal' textAlign='center'/>\r\n\r\n                    <MyTextInput name= 'email' placeholder = \"Email\"/>\r\n                    <MyTextInput name= 'password' placeholder = \"Password\" type='password'/>\r\n                    <ErrorMessage\r\n                        name = 'error'\r\n                        render = {()=>\r\n                            <Label style={{marginBottom:10}} basic color='red' content = {errors.error} />\r\n                        }\r\n                    />\r\n\r\n                    <Button loading = {isSubmitting} positive content='Login' type = 'submit' fluid /> \r\n\r\n                </Form>\r\n            )}\r\n\r\n\r\n        </Formik>\r\n\r\n    )\r\n})","import React from 'react';\r\nimport { Message } from 'semantic-ui-react';\r\n\r\ninterface Props{\r\n    errors: any;\r\n}\r\n\r\nexport default function ValidationErrors({errors}:Props){\r\n    return(\r\n        <Message error>\r\n            {\r\n               errors &&(\r\n                   <Message.List>\r\n                       {errors.map((err:any, i:any)=>(\r\n                           <Message.Item key={i}>{err}</Message.Item>\r\n                       ))}\r\n                   </Message.List>\r\n               ) \r\n            }\r\n\r\n        </Message>\r\n    )\r\n}","import { ErrorMessage, Form, Formik } from 'formik';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Button, Header } from 'semantic-ui-react';\r\nimport MyTextInput from '../../app/common/form/MyTextInput';\r\nimport { useStore } from '../../app/stores/store';\r\nimport * as Yup from \"yup\";\r\nimport ValidationErrors from '../errors/ValidationErrors';\r\n\r\n\r\nexport default observer( function RegisterForm(){\r\n    const {userStore} = useStore();\r\n    return(\r\n        <Formik\r\n            initialValues = {{displayName:'', username:'', email:'', password:'', error: null}}\r\n            onSubmit = {(values, {setErrors}) => userStore.register(values).catch(error=> \r\n                setErrors({error})\r\n                )}\r\n            validationSchema= {Yup.object({\r\n                displayName: Yup.string().required(),\r\n                username: Yup.string().required(),\r\n                email: Yup.string().required().email(),\r\n                password: Yup.string().required(),\r\n            })}\r\n        >\r\n            {({handleSubmit, isSubmitting, errors, isValid, dirty})=>(\r\n                <Form\r\n                    className = 'ui form error'\r\n                    onSubmit = {handleSubmit}\r\n                    autoComplete= \"off\"\r\n                >\r\n                    <Header as='h2' content='Sign Up to Reactivities' color='teal' textAlign='center'/>\r\n\r\n                    <MyTextInput name= 'displayName' placeholder = \"Display Name\"/>\r\n                    <MyTextInput name= 'username' placeholder = \"Username\"/>\r\n                    <MyTextInput name= 'email' placeholder = \"Email\"/>\r\n                    <MyTextInput name= 'password' placeholder = \"Password\" type='password'/>\r\n                    <ErrorMessage\r\n                        name = 'error'\r\n                        render = {()=>\r\n                            <ValidationErrors errors = {errors.error} />\r\n                        }\r\n                    />\r\n\r\n                    <Button \r\n                        disabled={!isValid || !dirty || isSubmitting} \r\n                        loading = {isSubmitting} \r\n                        positive \r\n                        content='Register' \r\n                        type = 'submit' \r\n                        fluid \r\n                    /> \r\n\r\n                </Form>\r\n            )}\r\n\r\n\r\n        </Formik>\r\n\r\n    )\r\n})","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Container, Header, Segment, Image, Button, Divider } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store';\r\nimport LoginForm from '../users/LoginForm';\r\nimport RegisterForm from '../users/RegisterForm';\r\n\r\nexport default function HomePage(){\r\n    const{userStore, modalStore} = useStore();\r\n    return (\r\n        <Segment inverted textAlign='center' vertical className='masthead' >\r\n            <Container text>\r\n                <Header as=\"h1\" inverted>\r\n                    <Image size='massive' src = '/assets/logo.png' alt= 'logo' style= {{marginBottom:12}}/>\r\n                    Reactivities\r\n                </Header>\r\n                {\r\n                    userStore.isLoggedIn?(\r\n                        <>\r\n                        <Header as=\"h2\" inverted content= \"Welcome to Reactivities\"/>\r\n                        <Button as={Link} to='/activities' size='huge' inverted>\r\n                            Go to activities\r\n                        </Button>\r\n                        </>\r\n                        \r\n                    ):(\r\n                        <>\r\n                            <Button onClick={()=>modalStore.openModal(<LoginForm/>)} size='huge' inverted>\r\n                                Login!\r\n                            </Button>\r\n                            <Button onClick={()=>modalStore.openModal(<RegisterForm/>)} size='huge' inverted>\r\n                                Register\r\n                            </Button>\r\n                            <Divider horizontal inverted>or</Divider>\r\n                            <Button\r\n                                loading={userStore.fbLoading}\r\n                                size='huge'\r\n                                inverted\r\n                                color=\"facebook\"\r\n                                content=\"Login with facebook\"\r\n                                onClick= {userStore.facebookLogin}\r\n\r\n                            />\r\n                        </>\r\n                        \r\n                    )\r\n                }\r\n\r\n            </Container>\r\n        </Segment>\r\n    )\r\n}","import React from \"react\"\r\nimport { Dimmer, Loader } from \"semantic-ui-react\"\r\n\r\ninterface Props {\r\n    inverted?: boolean;\r\n    content?: string;\r\n}\r\n\r\n\r\nexport default function LoadingComponent({inverted = true, content = \"loading....\"}: Props){\r\n    return(\r\n        <Dimmer active={true} inverted = {inverted}>\r\n            <Loader content={content}></Loader>\r\n        </Dimmer>\r\n    )\r\n}","\r\nimport { useField } from \"formik\";\r\nimport React from \"react\";\r\nimport { Form, Label, TextArea } from \"semantic-ui-react\";\r\n\r\ninterface Props{\r\n    placeholder:string,\r\n    name : string,\r\n    rows: number,\r\n    label?: string,\r\n}\r\n\r\n\r\nexport default function MyTextArea(props:Props){\r\n\r\n    const[field, meta] = useField(props.name);\r\n\r\n    return(\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <TextArea {...field} {...props} />\r\n            {\r\n                meta.touched && meta.error ? (\r\n                    <Label basic color='red'>{meta.error}</Label>\r\n                ): null\r\n            }\r\n        </Form.Field>\r\n    )\r\n\r\n}","import {  useField } from \"formik\";\r\nimport React from \"react\";\r\nimport { Form, Label, Select } from \"semantic-ui-react\";\r\n\r\n\r\ninterface Props{\r\n    placeholder:string,\r\n    name : string,\r\n    options: any;\r\n    label?: string,\r\n}\r\n\r\n\r\nexport default function MySelectInput(props: Props){\r\n    const[field, meta, helpers] = useField(props.name);\r\n\r\n    return(\r\n        <Form.Field error ={meta.touched && !!meta.error}>\r\n            {/* <Label> {props.label}</Label> */}\r\n            <Select\r\n                clearable\r\n                options = {props.options}\r\n                value = {field.value || null}\r\n                onChange = {(e, d)=> helpers.setValue(d.value)}\r\n                onBlur = {()=> helpers.setTouched(true)}\r\n                placeholder = {props.placeholder}\r\n            />\r\n            {\r\n                meta.touched && meta.error? (\r\n                    <Label basic color=\"red\">{meta.error}</Label>\r\n                ):null\r\n            }\r\n        \r\n\r\n        </Form.Field>\r\n    )\r\n\r\n}","export const categoryOptions = [\r\n    {text: 'Drinks', value : 'drink'},\r\n    {text: 'Culture', value : 'culture'},\r\n    {text: 'Film', value : 'film'},\r\n    {text: 'Food', value : 'food'},\r\n    {text: 'Music', value : 'music'},\r\n    {text: 'Travel', value : 'travel'},\r\n]","import { useField } from 'formik';\r\nimport React from 'react';\r\nimport { Form, Label } from 'semantic-ui-react';\r\nimport DatePicker, {ReactDatePickerProps} from 'react-datepicker';\r\n\r\n\r\nexport default function MyDateInput(props: Partial<ReactDatePickerProps>){\r\n\r\n    const [field, meta, helpers] = useField(props.name!);\r\n    return(\r\n        <Form.Field error = {meta.touched && !!meta.error }>\r\n            <DatePicker\r\n                {...field}\r\n                {...props}\r\n                selected = {(field.value && new Date(field.value)) || null}\r\n                onChange = {value => helpers.setValue(value)}\r\n            />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ): null}\r\n        </Form.Field>\r\n    )\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useHistory, useParams } from \"react-router\";\r\nimport { Button, Header, Segment } from \"semantic-ui-react\";\r\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\r\nimport {v4 as uuid} from \"uuid\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Formik, Form } from \"formik\";\r\nimport * as Yup from 'yup';\r\nimport MyTextInput from \"../../../app/common/form/MyTextInput\";\r\nimport MyTextArea from \"../../../app/common/form/MyTextArea\";\r\nimport MySelectInput from \"../../../app/common/form/MySelectInput\";\r\nimport { categoryOptions } from \"../../../app/common/options/CategoryOptions\";\r\nimport MyDateInput from \"../../../app/common/form/MyDateInput\";\r\nimport { ActivityFormValues } from \"../../../app/models/activity\";\r\n\r\n\r\n\r\nexport default observer( function ActivityForm(){\r\n    const history = useHistory();\r\n    const{activityStore} = useStore();\r\n    const{createActivity, updateActivity, loadActivity, loadingInitial }= activityStore;\r\n    const{id} = useParams<{id:string}>();\r\n    const[activity, setActivity] = useState<ActivityFormValues>(new ActivityFormValues());\r\n\r\n\r\n    const validationSchema = Yup.object({\r\n        title: Yup.string().required(\"The activity title is required\"),\r\n        description: Yup.string().required(\"The activity description is required\"),\r\n        category: Yup.string().required(),\r\n        date: Yup.string().required('Date is required').nullable(),\r\n        venue: Yup.string().required(),\r\n        city: Yup.string().required(),\r\n    })\r\n\r\n    useEffect(()=>{\r\n        if(id) loadActivity(id).then(activity => setActivity(new ActivityFormValues(activity)) )\r\n    }, [id, loadActivity]);\r\n\r\n\r\n    function handleFormSubmit(activity:ActivityFormValues){\r\n        if(!activity.id)\r\n        {\r\n            let newActivity = {\r\n                ...activity, id: uuid()\r\n            } \r\n            createActivity(newActivity).then(()=>history.push(`/activities/${newActivity.id}`));\r\n        }\r\n        else{\r\n            updateActivity(activity).then(()=>history.push(`/activities/${activity.id}`));\r\n        }\r\n    }\r\n   \r\n\r\n    if(loadingInitial)   return <LoadingComponent content=\"loading activity...\"/>\r\n    return(\r\n        <Segment clearing>\r\n            <Header content=\"Activity Details\" sub color='teal'/>\r\n            <Formik\r\n            validationSchema= {validationSchema} \r\n            enableReinitialize \r\n            initialValues={activity} \r\n            onSubmit = {values => handleFormSubmit(values)}\r\n            >\r\n                {({handleSubmit, isValid, isSubmitting, dirty})=>(\r\n                <Form className=\"ui form\" onSubmit={handleSubmit} autoComplete = \"off\">\r\n                    <MyTextInput name='title' placeholder='Title'/>\r\n\r\n                    <MyTextArea rows = {3} placeholder = \"Description\"  name='description'  />\r\n                    <MySelectInput options = {categoryOptions} placeholder = \"Category\"  name ='category'   />\r\n                    <MyDateInput  \r\n                        placeholderText = \"Date\"  \r\n                        name ='date'\r\n                        showTimeSelect\r\n                        timeCaption = \"time\"\r\n                        dateFormat = \"MMMM d, yyyy h:mm aa\"\r\n                    />\r\n                    <Header content=\"Location Details\" sub color='teal'/>\r\n                    <MyTextInput placeholder = \"City\"  name ='city'  />\r\n                    <MyTextInput placeholder = \"Venue\" name ='venue'  />\r\n                    <Button \r\n                        disabled ={isSubmitting || !dirty || !isValid}\r\n                        loading={isSubmitting} \r\n                        floated='right' \r\n                        positive \r\n                        type = \"submit\" \r\n                        content = \"Submit\" \r\n                    />\r\n                    <Button as = {Link} to ='/activities'  floated='right' type = \"button\" content = \"Cancel\"/>\r\n                </Form>\r\n                )}\r\n\r\n\r\n            </Formik>\r\n        </Segment>\r\n    )\r\n})","import { Formik, Form, Field, FieldProps } from 'formik'\r\nimport { observer } from 'mobx-react-lite'\r\nimport { useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport {Segment, Header, Comment, Loader} from 'semantic-ui-react'\r\nimport { useStore } from '../../../app/stores/store';\r\nimport * as Yup from 'yup';\r\nimport { formatDistanceToNow } from 'date-fns'\r\n\r\ninterface Props{\r\n    activityId:string;\r\n}\r\n\r\n\r\nexport default observer(function ActivityDetailedChat({activityId}:Props) {\r\n\r\n    const{commentStore}= useStore();\r\n\r\n    useEffect(()=>{\r\n        if(activityId){\r\n            commentStore.createHubConnection(activityId);\r\n        }\r\n        return()=>{\r\n            commentStore.clearComments();\r\n        }\r\n    },[commentStore, activityId]);\r\n\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                attached='top'\r\n                inverted\r\n                color='teal'\r\n                style={{border: 'none'}}\r\n            >\r\n                <Header>Chat about this event</Header>\r\n            </Segment>\r\n            <Segment attached clearing>\r\n                <Formik\r\n                    onSubmit = {(values, {resetForm})=>\r\n                    commentStore.addComment(values).then(()=> resetForm())}\r\n\r\n                    initialValues = {{body:''}}\r\n\r\n                    validationSchema = {Yup.object({\r\n                        body: Yup.string().required()\r\n                    })}\r\n                >\r\n                    {({isSubmitting, isValid, handleSubmit})=>(\r\n                        <Form className='ui form'>\r\n                            <Field name='body'>\r\n                                {(props:FieldProps)=>(\r\n                                    <div style={{position:'relative'}}>\r\n                                        <Loader active={isSubmitting}/>\r\n                                        <textarea \r\n                                        placeholder = \"Enter your comment (Enter to submit, SHIFT + Enter for new line)\"\r\n                                        rows = {2}\r\n                                        {...props.field}\r\n                                        onKeyPress = {e =>{\r\n                                            if(e.key === 'Enter' && e.shiftKey){\r\n                                                return;\r\n                                            }\r\n                                            if(e.key === 'Enter' && !e.shiftKey){\r\n                                                e.preventDefault();\r\n                                                isValid && handleSubmit();\r\n\r\n                                            }\r\n                                        }}\r\n                                        />\r\n                                    </div>\r\n                                )}\r\n                                \r\n                            </Field>\r\n                        </Form>\r\n                    )}\r\n                    \r\n                </Formik>\r\n                <Comment.Group>\r\n                    {commentStore.comments.map(comment =>(\r\n                        <Comment key= {comment.id}>\r\n                            <Comment.Avatar src={comment.image ||'/assets/user.png'}/>\r\n                            <Comment.Content>\r\n                                <Comment.Author as= {Link} to = {`/profile/${comment.username}`}>{comment.displayName}</Comment.Author>\r\n                                <Comment.Metadata>\r\n                                    <div>{ formatDistanceToNow( comment.createdAt)} ago</div>\r\n                                </Comment.Metadata>\r\n                                <Comment.Text style = {{whiteSpace: 'pre-wrap'}}>{comment.body}</Comment.Text>\r\n                            </Comment.Content>\r\n                        </Comment>\r\n                    ))}\r\n\r\n\r\n                    \r\n                </Comment.Group>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})\r\n","import { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport {Button, Header, Item, Segment, Image, Label} from 'semantic-ui-react'\r\nimport {Activity} from \"../../../app/models/activity\";\r\n\r\nimport {format} from 'date-fns';\r\nimport { useStore } from '../../../app/stores/store';\r\nconst activityImageStyle = {\r\n    filter: 'brightness(30%)'\r\n};\r\n\r\nconst activityImageTextStyle = {\r\n    position: 'absolute',\r\n    bottom: '5%',\r\n    left: '5%',\r\n    width: '100%',\r\n    height: 'auto',\r\n    color: 'white'\r\n};\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer (function ActivityDetailedHeader({activity}: Props) {\r\n    const {activityStore:{updateAttendance, loading, cancelActivityToggle}} = useStore();\r\n    return (\r\n        <Segment.Group>\r\n            <Segment basic attached='top' style={{padding: '0'}}>\r\n                {activity.isCancelled && (\r\n                    <Label\r\n                        style = {{position: \"absolute\", zIndex: 1000, left: -14, top:20}}\r\n                        ribbon\r\n                        color = 'red'\r\n                        content='Cancelled'\r\n                    />\r\n                )}\r\n                <Image src={`/assets/categoryImages/${activity.category}.jpg`} fluid style={activityImageStyle}/>\r\n                <Segment style={activityImageTextStyle} basic>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Content>\r\n                                <Header\r\n                                    size='huge'\r\n                                    content={activity.title}\r\n                                    style={{color: 'white'}}\r\n                                />\r\n                                <p>{format(activity.date!, \"dd MMMM yyyy\")}</p>\r\n                                <p>\r\n                                    Hosted by <strong><Link to={`/profile/${activity.host?.username}`}>{activity.host?.displayName}</Link> </strong>\r\n                                </p>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Segment>\r\n            </Segment>\r\n            <Segment clearing attached='bottom'>\r\n                {activity.isHost?(\r\n                    <>\r\n                        <Button\r\n                            color = {activity.isCancelled ? \"green\": \"red\"}\r\n                            floated = \"left\"\r\n                            basic\r\n                            content= {activity.isCancelled? \"Re-activate Activity\": \"Cancel Activity\"}\r\n                            onClick = {cancelActivityToggle}\r\n                            loading = {loading}\r\n                        />\r\n                        <Button as={Link} \r\n                            to={`/manage/${activity.id}`} \r\n                            color='orange' \r\n                            floated='right'\r\n                            disabled = {activity.isCancelled}\r\n                        >\r\n                        Manage Event\r\n                        </Button>\r\n                    </>\r\n                     \r\n                ): activity.isGoing?(\r\n                    <Button loading= {loading} onClick={updateAttendance}>Cancel attendance</Button>\r\n\r\n                ):(\r\n                    <Button  disabled = {activity.isCancelled} loading= {loading} onClick={updateAttendance} color='teal'>Join Activity</Button>\r\n\r\n                )}\r\n              \r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})\r\n\r\n","\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport {Segment, Grid, Icon} from 'semantic-ui-react'\r\nimport {Activity} from \"../../../app/models/activity\";\r\n\r\nimport {format} from 'date-fns';\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedInfo({activity}: Props) {\r\n    return (\r\n        <Segment.Group>\r\n            <Segment attached='top'>\r\n                <Grid>\r\n                    <Grid.Column width={1}>\r\n                        <Icon size='large' color='teal' name='info'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <p>{activity.description}</p>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='calendar' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n            <span>\r\n              {format( activity.date!, \"dd MMMM yyyy h:mm aa\")}\r\n            </span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='marker' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={11}>\r\n                        <span>{activity.venue}, {activity.city}</span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})\r\n","import React from 'react'\r\nimport { Segment, List, Label, Item, Image } from 'semantic-ui-react'\r\nimport { Link } from 'react-router-dom'\r\nimport { observer } from 'mobx-react-lite'\r\nimport { Activity } from '../../../app/models/activity'\r\n\r\n\r\ninterface Props{\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedSidebar ({activity:{attendees, host}}:Props) {\r\n    if(!attendees) return null;\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                style={{ border: 'none' }}\r\n                attached='top'\r\n                secondary\r\n                inverted\r\n                color='teal'\r\n            >\r\n                  {attendees.length}{attendees.length ===1?\"Person\":\"People\"} going\r\n            </Segment>\r\n            <Segment attached>\r\n                <List relaxed divided>\r\n                    {attendees.map(attendee =>(\r\n                        <Item style={{ position: 'relative' }} key={attendee.username}>\r\n                            {attendee.username === host?.username &&(\r\n                                <Label\r\n                                    style={{ position: 'absolute' }}\r\n                                    color='orange'\r\n                                    ribbon='right'\r\n                                >\r\n                                    Host\r\n                                </Label>\r\n                            )}\r\n                            \r\n                            <Image size='tiny' src={attendee.image ||'/assets/user.png'} />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Item.Header as='h3'>\r\n                                    <Link to={`/profiles/${attendee.username}`}>{attendee.displayName}</Link>\r\n                                </Item.Header>\r\n                                {attendee.following &&\r\n                                <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>}\r\n                            </Item.Content>\r\n                        </Item>\r\n                    ))}\r\n                </List>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})\r\n\r\n\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React, { useEffect } from \"react\";\r\nimport { useParams } from \"react-router\";\r\nimport { Grid } from \"semantic-ui-react\";\r\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport ActivityDetailedChat from \"./ActivityDetailedChat\";\r\nimport ActivityDetailedHeader from \"./ActivityDetailedHeader\";\r\nimport ActivityDetailedInfo from \"./ActivityDetailedInfo\";\r\nimport ActivityDetailedSidebar from \"./ActivityDetailedSidebar\";\r\n\r\n\r\nexport default observer( function ActivityDetails(){\r\n    const {activityStore} = useStore();\r\n    const{selectedActivity: activity, loadActivity, loadingInitial, clearSelectedActivity} = activityStore;\r\n    const{id} = useParams<{id:string}>();\r\n\r\n    useEffect(()=>{\r\n        if(id) loadActivity(id);\r\n        return ()=> clearSelectedActivity();\r\n    }, [id, loadActivity, clearSelectedActivity]);\r\n    \r\n    if(loadingInitial || !activity) return <LoadingComponent/>\r\n    return(\r\n       <Grid>\r\n           <Grid.Column width= {10}>\r\n              <ActivityDetailedHeader activity= {activity}></ActivityDetailedHeader>\r\n              <ActivityDetailedInfo activity = {activity}></ActivityDetailedInfo>\r\n              <ActivityDetailedChat activityId={activity.id}></ActivityDetailedChat>\r\n           </Grid.Column>\r\n           <Grid.Column width= {6}>\r\n               <ActivityDetailedSidebar activity = {activity} ></ActivityDetailedSidebar>\r\n           </Grid.Column>\r\n\r\n       </Grid>\r\n        \r\n    )\r\n})","\r\nimport React, { useState } from 'react';\r\nimport {Button, Header, Segment} from \"semantic-ui-react\";\r\nimport axios from 'axios';\r\nimport ValidationErrors from './ValidationErrors';\r\n\r\nexport default function TestErrors() {\r\n    const baseUrl = process.env.REACT_APP_API_URL;\r\n    const [errors, setErrors] = useState(null);\r\n\r\n    function handleNotFound() {\r\n        axios.get(baseUrl + 'buggy/not-found').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadRequest() {\r\n        axios.get(baseUrl + 'buggy/bad-request').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleServerError() {\r\n        axios.get(baseUrl + 'buggy/server-error').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleUnauthorised() {\r\n        axios.get(baseUrl + 'buggy/unauthorised').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadGuid() {\r\n        axios.get(baseUrl + 'activities/notaguid').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleValidationError() {\r\n        axios.post(baseUrl + 'activities', {}).catch(err => setErrors(err));\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header as='h1' content='Test Error component' />\r\n            <Segment>\r\n                <Button.Group widths='7'>\r\n                    <Button onClick={handleNotFound} content='Not Found' basic primary />\r\n                    <Button onClick={handleBadRequest} content='Bad Request' basic primary />\r\n                    <Button onClick={handleValidationError} content='Validation Error' basic primary />\r\n                    <Button onClick={handleServerError} content='Server Error' basic primary />\r\n                    <Button onClick={handleUnauthorised} content='Unauthorised' basic primary />\r\n                    <Button onClick={handleBadGuid} content='Bad Guid' basic primary />\r\n                </Button.Group>\r\n            </Segment>\r\n            {errors && \r\n            <ValidationErrors errors= {errors}/>}\r\n\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, Header, Icon, Segment } from \"semantic-ui-react\";\r\n\r\n\r\nexport default function NotFound(){\r\n    return(\r\n        <Segment placeholder>\r\n            <Header icon>\r\n                <Icon name = 'search'/>\r\n                Oops - we've looked everywhere and could not find this.\r\n            </Header>\r\n            <Segment.Inline>\r\n                <Button as={Link} to = \"/activities\" primary >\r\n                    Return to Activities page\r\n                </Button>\r\n            </Segment.Inline>\r\n\r\n        </Segment>\r\n    )\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Container, Header, Segment } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store';\r\nexport default observer( function ServerError(){\r\n    const {commonStore} = useStore();\r\n    return(\r\n        <Container>\r\n            <Header as =\"h1\" content=\"Server Error\"/>\r\n            <Header sub as='h5' color='red' content={commonStore.error?.message}/>\r\n            {\r\n                commonStore.error?.details && \r\n                <Segment>\r\n                    <Header as ='h4' content='Stack trace' color = 'teal'/>\r\n                    <code style = {{marginTop: '10px'}}> {commonStore.error.details}</code>\r\n                </Segment>\r\n            }\r\n\r\n        </Container>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Modal } from 'semantic-ui-react';\r\nimport { useStore } from '../../stores/store';\r\n\r\nexport default observer( function ModalContainer(){\r\n    const{modalStore} = useStore();\r\n    return(\r\n        <Modal open={modalStore.modal.open} onClose={modalStore.closeModal} size=\"mini\">\r\n            <Modal.Content>\r\n                {modalStore.modal.body}\r\n            </Modal.Content>\r\n\r\n        </Modal>\r\n    )\r\n})","import { Form, Formik } from 'formik';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { useStore } from '../../app/stores/store';\r\nimport * as Yup from 'yup';\r\nimport MyTextInput from '../../app/common/form/MyTextInput';\r\nimport MyTextArea from '../../app/common/form/MyTextArea';\r\nimport { Button } from 'semantic-ui-react';\r\n\r\n\r\ninterface Props{\r\n    setEditMode: (editMode: boolean) => void;\r\n}\r\n\r\nexport default observer(function ProfileEditForm({setEditMode}:Props){\r\n    \r\n    const{profileStore:{profile, UpdateProfile}}=useStore();\r\n    return(\r\n        <Formik\r\n            initialValues = {{displayName: profile?.displayName, bio:profile?.bio}}\r\n            onSubmit= {values=>{\r\n                UpdateProfile(values).then(()=>{\r\n                    setEditMode (false);\r\n                })\r\n            }}\r\n\r\n            validationSchema = {Yup.object({\r\n                displayName: Yup.string().required()\r\n            })}\r\n        >\r\n            {({isSubmitting, isValid, dirty})=>(\r\n                <Form className='ui form'>\r\n                    <MyTextInput placeholder='Display Name' name='displayName' />\r\n                    <MyTextArea rows={3} placeholder='Add your bio' name='bio'/>\r\n                    <Button\r\n                        positive\r\n                        type= 'submit'\r\n                        loading = {isSubmitting}\r\n                        content='Update Profile'\r\n                        floated='right'\r\n                        disabled = {!isValid || !dirty}\r\n                    />\r\n                </Form>\r\n            )}\r\n\r\n        </Formik>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { useState } from \"react\";\r\nimport { Button, Grid, Header, Tab } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport ProfileEditForm from \"./ProfileEditForm\";\r\n\r\n\r\nexport default observer (function ProfileAbout(){\r\n    \r\n    const{profileStore}= useStore();\r\n    const{isCurrentUser, profile}= profileStore;\r\n    const[editMode, setEditMode] = useState(false);\r\n    \r\n    return(\r\n        <Tab.Pane>\r\n           <Grid>\r\n               <Grid.Column width={16}>\r\n                   <Header floated='left' icon='user' content={`about ${profile?.displayName}`}/>\r\n                   {isCurrentUser &&(\r\n                       <Button\r\n                        basic\r\n                        floated='right'\r\n                        content={editMode?'Cancel':'Edit Profile'}\r\n                        onClick={()=> setEditMode(!editMode)}\r\n                       />\r\n                   )}\r\n               </Grid.Column>\r\n               <Grid.Column width={16}>\r\n                   {editMode ? <ProfileEditForm setEditMode={setEditMode}/>:\r\n                   <span style={{whiteSpace: 'pre-wrap'}}>{profile?.bio}</span>}\r\n               </Grid.Column>\r\n\r\n           </Grid> \r\n        </Tab.Pane>\r\n    )\r\n})","import React, { SyntheticEvent, useEffect } from 'react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Tab, Grid, Header, Card, Image, TabProps } from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom';\r\nimport { format } from 'date-fns';\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport { UserActivity } from '../../app/models/porfile';\r\n\r\nconst panes = [\r\n    { menuItem: 'Future Events', pane: { key: 'future' } },\r\n    { menuItem: 'Past Events', pane: { key: 'past' } },\r\n    { menuItem: 'Hosting', pane: { key: 'hosting' } }\r\n];\r\n\r\nexport default observer(function ProfileActivities() {\r\n    const { profileStore } = useStore();\r\n    const {\r\n        loadUserActivities,\r\n        profile,\r\n        loadingActivities,\r\n        userActivities\r\n    } = profileStore;\r\n\r\n    useEffect(() => {\r\n        loadUserActivities(profile!.username);\r\n    }, [loadUserActivities, profile]);\r\n\r\n    const handleTabChange = (e: SyntheticEvent, data: TabProps) => {\r\n        loadUserActivities(profile!.username, panes[data.activeIndex as number].pane.key);\r\n    };\r\n\r\n    return (\r\n        <Tab.Pane loading={loadingActivities}>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='calendar' content={'Activities'} />\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Tab\r\n                        panes={panes}\r\n                        menu={{ secondary: true, pointing: true }}\r\n                        onTabChange={(e, data) => handleTabChange(e, data)}\r\n                    />\r\n                    <br />\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {userActivities.map((activity: UserActivity) => (\r\n                            <Card\r\n                                as={Link}\r\n                                to={`/activities/${activity.id}`}\r\n                                key={activity.id}\r\n                            >\r\n                                <Image\r\n                                    src={`/assets/categoryImages/${activity.category}.jpg`}\r\n                                    style={{ minHeight: 100, objectFit: 'cover' }}\r\n                                />\r\n                                <Card.Content>\r\n                                    <Card.Header textAlign='center'>{activity.title}</Card.Header>\r\n                                    <Card.Meta textAlign='center'>\r\n                                        <div>{format(new Date(activity.date), 'do LLL')}</div>\r\n                                        <div>{format(new Date(activity.date), 'h:mm a')}</div>\r\n                                    </Card.Meta>\r\n                                </Card.Content>\r\n                            </Card>\r\n                        ))}\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    );\r\n});","import React from 'react';\r\nimport {Tab, Grid, Header, Card} from \"semantic-ui-react\";\r\nimport ProfileCard from \"./ProfileCard\";\r\nimport {useStore} from \"../../app/stores/store\";\r\nimport { observer } from 'mobx-react-lite';\r\n\r\nexport default observer(function ProfileFollowings() {\r\n    const {profileStore} = useStore();\r\n    const {profile, followings, loadingFollowings, activeTab } = profileStore;\r\n    return (\r\n        <Tab.Pane loading={loadingFollowings}>\r\n            <Grid>\r\n                <Grid.Column width='16'>\r\n                    <Header\r\n                        floated='left'\r\n                        icon='user'\r\n                       content={activeTab === 3 ? `People following ${profile!.displayName}` : `People ${profile?.displayName} is following`}\r\n                  \r\n                    />\r\n                </Grid.Column>\r\n                <Grid.Column width='16'>\r\n                    <Card.Group itemsPerRow={4}>\r\n                       \r\n                        {followings.map(profile => (\r\n                            <ProfileCard key={profile.username} profile={profile} />\r\n                        ))}\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import React from \"react\";\r\nimport { Cropper } from \"react-cropper\";\r\nimport 'cropperjs/dist/cropper.css';\r\n\r\ninterface Props{\r\nimagePreview : string;\r\nsetCropper:(cropper:Cropper) => void;\r\n}\r\nexport default function PhotoWidgetCropper({imagePreview, setCropper}:Props){\r\n    return(\r\n        <Cropper \r\n            src = {imagePreview}\r\n            style = {{height: 200, width:\"100%\"}}\r\n            initialAspectRatio= {1}\r\n            aspectRatio = {1}\r\n            preview = '.img-preview'\r\n            guides = {false}\r\n            viewMode = {1}\r\n            autoCropArea= {1}\r\n            background = {false}\r\n            onInitialized = {cropper => setCropper(cropper)}\r\n        \r\n        \r\n        />\r\n    )\r\n}","import React, {useCallback} from 'react'\r\nimport {useDropzone} from 'react-dropzone'\r\nimport { Header, Icon } from 'semantic-ui-react'\r\n\r\ninterface Props{\r\n    setFiles: (files: any)=> void;\r\n}\r\n\r\nexport default function PhotoWidgetDropZone({setFiles}: Props) {\r\n\r\n    const dzStyles = {\r\n        border: 'dashed 3px #eee',\r\n        borderColor: '#eee',\r\n        borderRadious: '5px',\r\n        paddingTop: '30px',\r\n        textAlign: 'center'as 'center',\r\n        height: 200\r\n    }\r\n\r\n    const dzActive = {\r\n        borderColor: 'green'\r\n    }\r\n\r\n\r\n  const onDrop = useCallback(acceptedFiles => {\r\n    setFiles(acceptedFiles.map((file:any) => Object.assign(file, {\r\n        preview: URL.createObjectURL(file)\r\n    })))\r\n  }, [setFiles])\r\n  const {getRootProps, getInputProps, isDragActive} = useDropzone({onDrop})\r\n\r\n  return (\r\n    <div {...getRootProps()} style={isDragActive ? {...dzStyles, ...dzActive}: dzStyles} >\r\n      <input {...getInputProps()} />\r\n        <Icon name = \"upload\" size= 'huge' />\r\n        <Header content = \"Drop image here\"/>\r\n    </div>\r\n  )\r\n}","import React from \"react\";\r\nimport { useEffect } from \"react\";\r\nimport { useState } from \"react\";\r\nimport { Button, Grid, Header } from \"semantic-ui-react\";\r\nimport PhotoWidgetCropper from \"./PhotoWidgetCropper\";\r\nimport PhotoWidgetDropZone from \"./PhotoWidgetDropZone\";\r\n\r\n\r\ninterface Props{\r\n   loading: boolean;\r\n   uploadPhoto:(file:Blob)=> void; \r\n}\r\n\r\n\r\nexport default function PhotoUploadWidget({loading, uploadPhoto}:Props){\r\n    const[files, setFiles] = useState<any>([]);\r\n    const[cropper, setCropper] = useState<Cropper>();\r\n\r\n    function onCrop(){\r\n        if(cropper){\r\n            cropper.getCroppedCanvas().toBlob(blob => uploadPhoto(blob!));\r\n        }\r\n    }\r\n\r\n    useEffect(()=>{\r\n        return()=>{\r\n            files.forEach((file:any)=> URL.revokeObjectURL(file.preview))\r\n        }\r\n    },[files])\r\n\r\n    return(\r\n        <Grid>\r\n            <Grid.Column width= {4}>\r\n                <Header sub color='teal' content= 'Step 1 - Add Photo'/> \r\n                <PhotoWidgetDropZone setFiles = {setFiles}/>\r\n            </Grid.Column>\r\n            <Grid.Column width= {1}></Grid.Column>\r\n            <Grid.Column width= {4}>\r\n                <Header sub color='teal' content= 'Step 2 - Resize Image'/> \r\n                {files && files.length > 0 &&(\r\n                    <PhotoWidgetCropper setCropper = {setCropper} imagePreview = {files[0].preview} />\r\n                )}\r\n            </Grid.Column>\r\n            <Grid.Column width= {1}></Grid.Column>\r\n            <Grid.Column width= {4}>\r\n                {files && files.length > 0 && \r\n                <>\r\n                    <Header sub color='teal' content= 'Step 3 - Preview & unpload'/> \r\n                    <> \r\n                        <div className = \"img-preview\" style= {{minHeight:200, overflow:\"hidden\"}}/>\r\n                        <Button.Group widths={2}>\r\n                            <Button loading={loading} onClick={onCrop} positive icon= 'check'/>\r\n                            <Button disabled={loading} onClick={()=> setFiles([])} icon= 'close'/>\r\n                        </Button.Group>\r\n                    </>\r\n                </>}\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport React, { SyntheticEvent } from \"react\";\r\nimport { useState } from \"react\";\r\nimport { Card, Header, Image, Tab, Grid, Button } from \"semantic-ui-react\";\r\nimport PhotoUploadWidget from \"../../app/common/imageUpload/PhotoUploadWidget\";\r\nimport { Photo, Profile } from \"../../app/models/porfile\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\ninterface Props{\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfilePhotos({profile}:Props){\r\n    const{profileStore:{isCurrentUser, uploadPhoto, uploading, setMainPhoto, loading, deletePhoto}} = useStore();\r\n    const [addPhotoMode, setAddPhotoMode] = useState(false);\r\n    const [target, setTarget] = useState('');\r\n\r\n    function handlePhotoUpload(file:Blob){\r\n        uploadPhoto(file).then(()=> setAddPhotoMode(false));\r\n    }\r\n\r\n    function handleSetMainPhoto (photo: Photo, e: SyntheticEvent<HTMLButtonElement>){\r\n        setTarget(e.currentTarget.name);\r\n        setMainPhoto(photo);\r\n    }\r\n    function handleDeletePhoto (photo: Photo, e: SyntheticEvent<HTMLButtonElement>){\r\n        setTarget(e.currentTarget.name);\r\n        deletePhoto(photo);\r\n    }\r\n\r\n\r\n\r\n    return(\r\n        \r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width = {16}>\r\n                    <Header floated= 'left' icon= \"image\" content = 'Photos'></Header>\r\n                    {isCurrentUser && (\r\n                        <Button floated=\"right\"\r\n                        content = {addPhotoMode ? 'Cancel': 'Add Photo'}\r\n                        onClick = {()=> setAddPhotoMode(!addPhotoMode)}\r\n                        />\r\n                    )\r\n                    }\r\n                </Grid.Column>\r\n                <Grid.Column width = {16}>\r\n                    {addPhotoMode ? (\r\n                        <PhotoUploadWidget uploadPhoto = {handlePhotoUpload} loading = {uploading} />\r\n                    ):(\r\n                    <Card.Group itemsPerRow={5}>\r\n                        {profile.photos?.map((photo)=>(\r\n                            <Card key={photo.id}>\r\n                                <Image src = {photo.url || '/assets/user.png'}/>\r\n                                {isCurrentUser && (\r\n                                    <Button.Group fluid widths= {2}>\r\n                                        <Button \r\n                                            basic\r\n                                            color='green'\r\n                                            content='Main'\r\n                                            name = {'main' +photo.id}\r\n                                            disabled = {photo.isMain}\r\n                                            loading = {target === 'main'+photo.id && loading}\r\n                                            onClick={e=> handleSetMainPhoto(photo, e)}\r\n                                        />\r\n                                        <Button\r\n                                            basic \r\n                                            color='red' \r\n                                            icon='trash'\r\n                                            name = {photo.id}\r\n                                            loading = {target === photo.id && loading}\r\n                                            disabled = {photo.isMain}\r\n                                            onClick = {e => handleDeletePhoto(photo, e)}\r\n                                        />\r\n\r\n                                    </Button.Group>\r\n                                )}\r\n                            </Card> \r\n                        ))}\r\n                    \r\n                    </Card.Group>\r\n                    )}\r\n                </Grid.Column>\r\n\r\n            </Grid>  \r\n        </Tab.Pane>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Tab } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/models/porfile\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport ProfileAbout from \"./ProfileAbout\";\r\nimport ProfileActivities from \"./ProfileActivities\";\r\nimport ProfileFollowings from \"./ProfileFollowings\";\r\nimport ProfilePhotos from \"./ProfilePhotos\";\r\ninterface Props{\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer( function ProfileContent({profile}:Props){\r\n    const{profileStore} = useStore()\r\n    const panes= [\r\n        {menuItem: 'About', render: ()=> <ProfileAbout/>},\r\n        {menuItem: 'Photos', render: ()=><ProfilePhotos profile = {profile}/>},\r\n        {menuItem: 'Events', render: ()=> <ProfileActivities/>},\r\n        {menuItem: 'Followers', render: ()=><ProfileFollowings/>},\r\n        {menuItem: 'Following', render: ()=><ProfileFollowings/>},\r\n    ]\r\n    return(\r\n        <Tab \r\n            menu = {{fluid: true, vertical:true}}\r\n            menuPosition = \"right\"\r\n            panes = {panes}\r\n            onTabChange = {(e, data)=> profileStore.setActiveTab(data.activeIndex)}\r\n        />\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport { Divider, Grid, Header, Item, Segment, Statistic, StatisticGroup } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/porfile';\r\nimport FollowButton from './FollowButton';\r\n\r\ninterface Props{\r\n    profile: Profile;\r\n}\r\n\r\n\r\nexport default observer( function ProfileHeader({profile}: Props){\r\n    return(\r\n        <Segment>\r\n            <Grid>\r\n\r\n                <Grid.Column width = {12}>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Image avatar size =\"small\" src= {profile.image ||\"/assets/user.png\"}/>\r\n                            <Item.Content verticalAlign = \"middle\">\r\n                                <Header as ='h1' content= {profile.displayName}/>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Grid.Column>\r\n\r\n                <Grid.Column width = {4}>\r\n                    <StatisticGroup widths= {2}>\r\n                        <Statistic label= 'Followers' value= {profile.followersCount} />\r\n                        <Statistic label= 'Following' value= {profile.followingCount} />\r\n                    </StatisticGroup>\r\n                    \r\n                    <Divider />\r\n                    <FollowButton profile= {profile}/>\r\n\r\n                </Grid.Column>\r\n\r\n            </Grid>\r\n        </Segment>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React, { useEffect } from \"react\";\r\nimport { useParams } from \"react-router\";\r\nimport { Grid } from \"semantic-ui-react\";\r\nimport LoadingComponent from \"../../app/layout/LoadingComponent\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport ProfileContent from \"./ProfileContent\";\r\nimport ProfileHeader from \"./ProfileHeader\";\r\n\r\nexport default observer( function ProfilePage(){\r\n\r\n    const {username} = useParams<{username: string}>();\r\n    const {profileStore} = useStore();\r\n    const {loadProfile, loadingProfile, profile, setActiveTab} = profileStore;\r\n\r\n    useEffect(()=>{\r\n        loadProfile(username);\r\n        setActiveTab(0);\r\n    },[loadProfile, username, setActiveTab])\r\n\r\n    if(loadingProfile) return <LoadingComponent content= 'Loading Profile.....'></LoadingComponent> \r\n\r\n    return(\r\n        <Grid>\r\n            <Grid.Column width= {16}>\r\n                {profile &&\r\n                    <> \r\n                        <ProfileHeader profile = {profile} />\r\n                        <ProfileContent profile = {profile}/>\r\n                    </>\r\n                }   \r\n               \r\n                \r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import { Redirect, Route, RouteComponentProps, RouteProps } from \"react-router-dom\";\r\nimport { useStore } from \"../stores/store\";\r\n\r\ninterface Props extends RouteProps {\r\n    component: React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>;\r\n}\r\n\r\nexport default function PrivateRoute({component: Component, ...rest}: Props) {\r\n    const {userStore: {isLoggedIn}} = useStore();\r\n    return (\r\n        <Route \r\n            {...rest}\r\n            render={(props) => isLoggedIn ? <Component {...props} /> : <Redirect to='/' />}\r\n        />\r\n    )\r\n}","import { useLocation } from \"react-router-dom\";\r\n\r\nexport default function useQuery() {\r\n    return new URLSearchParams(useLocation().search);\r\n}","import React from 'react';\r\nimport { toast } from 'react-toastify';\r\nimport { Button, Header, Icon, Segment } from 'semantic-ui-react';\r\nimport agent from '../../app/api/agent';\r\nimport useQuery from '../../app/common/util/hooks';\r\n\r\nexport default function RegisterSuccess() {\r\n    const email = useQuery().get('email') as string;\r\n\r\n    function handleConfirmEmailResend() {\r\n        agent.Account.resendEmailConfirm(email).then(() => {\r\n            toast.success('Verification email resent - please check your email');\r\n        }).catch(error => console.log(error));\r\n    }\r\n\r\n    return (\r\n        <Segment placeholder textAlign='center'>\r\n            <Header icon color='green'>\r\n                <Icon name='check'/>\r\n                Successfully registered!\r\n            </Header>\r\n            <p>Please check your email (including junk email) for the verification email</p>\r\n            {email &&\r\n                <>\r\n                    <p>Didn't receive the email?  Click the below button to resend</p>\r\n                    <Button primary onClick={handleConfirmEmailResend} \r\n                        content='Resend email' size='huge' />\r\n                </>\r\n            }\r\n        </Segment>\r\n    )\r\n}","import React, { useEffect, useState } from 'react';\r\nimport { toast } from 'react-toastify';\r\nimport { Button, Header, Icon, Segment } from 'semantic-ui-react';\r\nimport agent from '../../app/api/agent';\r\nimport useQuery from '../../app/common/util/hooks';\r\nimport { useStore } from '../../app/stores/store';\r\nimport LoginForm from './LoginForm';\r\n\r\nexport default function ConfirmEmail() {\r\n    const {modalStore} = useStore();\r\n    const email = useQuery().get('email') as string;\r\n    const token = useQuery().get('token') as string;\r\n\r\n    const Status = {\r\n        Verifying: 'Verifying',\r\n        Failed: 'Failed',\r\n        Success: 'Success'\r\n    }\r\n\r\n    const [status, setStatus] = useState(Status.Verifying);\r\n\r\n    function handleConfirmEmailResend() {\r\n        agent.Account.resendEmailConfirm(email).then(() => {\r\n            toast.success('Verification email resent - please check your email');\r\n        }).catch(error => console.log(error));\r\n    }\r\n\r\n    useEffect(() => {\r\n        agent.Account.verifyEmail(token, email).then(() => {\r\n            setStatus(Status.Success)\r\n        }).catch(() => {\r\n            setStatus(Status.Failed)\r\n        })\r\n    }, [Status.Failed, Status.Success, token, email])\r\n\r\n    function getBody() {\r\n        switch (status) {\r\n            case Status.Verifying:\r\n                return <p>Verifying...</p>;\r\n            case Status.Failed:\r\n                return (\r\n                    <div>\r\n                        <p>Verification failed.  You can try resending the verify link to your email</p>\r\n                        <Button primary onClick={handleConfirmEmailResend} size='huge' content='Resend email' />\r\n                    </div>\r\n                );\r\n            case Status.Success:\r\n                return (\r\n                    <div>\r\n                        <p>Email has been verified - you can now login</p>\r\n                        <Button primary onClick={() => modalStore.openModal(<LoginForm />)} size='huge' />\r\n                    </div>\r\n                );\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Segment placeholder textAlign='center'>\r\n            <Header icon>\r\n                <Icon name='envelope' />\r\n                Email verification\r\n            </Header>\r\n            <Segment.Inline>\r\n                {getBody()}\r\n            </Segment.Inline>\r\n        </Segment>\r\n    )\r\n}","import { useEffect } from 'react';\r\nimport { Container } from 'semantic-ui-react';\r\nimport NavBar from './NavBar';\r\nimport ActivityDashboard from '../../features/activities/dashboard/ActivityDashboard';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Route, Switch, useLocation } from 'react-router';\r\nimport HomePage from '../../features/home/Home';\r\nimport ActivityForm from '../../features/activities/form/ActivityForm';\r\nimport ActivityDetails from '../../features/activities/details/ActivityDetails';\r\nimport TestErrors from '../../features/errors/TestErrors';\r\nimport { ToastContainer } from 'react-toastify';\r\nimport NotFound from '../../features/errors/NotFound';\r\nimport ServerError from '../../features/errors/ServerError';\r\nimport { useStore } from '../stores/store';\r\nimport LoadingComponent from './LoadingComponent';\r\nimport ModalContainer from '../common/modals/ModalContainer';\r\nimport ProfilePage from '../../features/profiles/ProfilePage';\r\nimport PrivateRoute from './PrivateRoute';\r\nimport RegisterSuccess from '../../features/users/RegisterSuccess';\r\nimport ConfirmEmail from '../../features/users/ConfirmEmail';\r\n\r\n\r\nfunction App() {\r\n  const location = useLocation();\r\n  const {commonStore, userStore} = useStore();\r\n\r\n  useEffect(()=>{\r\n    if(commonStore.token){\r\n      userStore.getUser().finally(()=> commonStore.setAppLoaded());\r\n    }else{\r\n      userStore.getFacebookLoginStatus().then(() => commonStore.setAppLoaded());\r\n    }\r\n  }, [commonStore, userStore])\r\n\r\n  if(!commonStore.appLoaded) return (<LoadingComponent content = 'Loading app.....' />)\r\n\r\n  return (\r\n    < >\r\n    <ToastContainer position=\"bottom-right\" hideProgressBar />\r\n    <ModalContainer/>\r\n     <Route exact path='/' component={HomePage}/>\r\n     <Route \r\n      path={'/(.+)'}\r\n      render = {()=>(\r\n        <>\r\n        <NavBar/>\r\n        <Container style = {{marginTop: '7em'}}> \r\n          <Switch>\r\n            <PrivateRoute exact path='/activities' component={ActivityDashboard}/>\r\n            <PrivateRoute path='/activities/:id' component={ActivityDetails}/>\r\n            <PrivateRoute key={location.key} path={['/createActivity', '/manage/:id' ]} component={ActivityForm}/>\r\n            <PrivateRoute path=\"/profile/:username\" component = {ProfilePage}/>\r\n            <PrivateRoute path=\"/errors\" component = {TestErrors}/>\r\n            <Route path='/server-error' component = {ServerError}/>\r\n            <Route path='/account/registerSuccess' component = {RegisterSuccess}/>\r\n            <Route path='/account/verifyEmail' component = {ConfirmEmail}/>\r\n            <Route component={NotFound}/>\r\n          </Switch>\r\n        </Container>\r\n        </>\r\n      )}\r\n     />\r\n    \r\n    </>\r\n  );\r\n}\r\n\r\nexport default observer( App);\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useEffect } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nexport default function ScrollToTop() {\r\n  const { pathname } = useLocation();\r\n\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n  }, [pathname]);\r\n\r\n  return null;\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Router } from 'react-router-dom';\nimport \"semantic-ui-css/semantic.min.css\";\nimport \"react-calendar/dist/Calendar.css\";\nimport \"react-toastify/dist/ReactToastify.min.css\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport App from './app/layout/App';\nimport './app/layout/style.css';\nimport { store, StoreContext } from './app/stores/store';\nimport reportWebVitals from './reportWebVitals';\nimport {createBrowserHistory} from \"history\";\nimport ScrollToTop from './app/layout/ScrollToTop';\n\nexport const history = createBrowserHistory();\n\nReactDOM.render(\n <StoreContext.Provider value={store}>\n    <Router history = {history}>\n       <ScrollToTop/>\n       <App />\n    </Router>\n </StoreContext.Provider>\n ,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n "],"sourceRoot":""}